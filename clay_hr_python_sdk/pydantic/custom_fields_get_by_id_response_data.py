# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from clay_hr_python_sdk.pydantic.custom_fields_get_by_id_response_data_custom_field_group_model import CustomFieldsGetByIdResponseDataCustomFieldGroupModel
from clay_hr_python_sdk.pydantic.custom_fields_get_by_id_response_data_custom_field_value_model_list import CustomFieldsGetByIdResponseDataCustomFieldValueModelList

class CustomFieldsGetByIdResponseData(BaseModel):
    custom_field_id: typing.Optional[str] = Field(None, alias='customFieldId')

    custom_field_name: typing.Optional[str] = Field(None, alias='customFieldName')

    custom_field_type: typing.Optional[str] = Field(None, alias='customFieldType')

    object_type: typing.Optional[str] = Field(None, alias='objectType')

    sequence: typing.Optional[str] = Field(None, alias='sequence')

    cid: typing.Optional[str] = Field(None, alias='cid')

    field_type: typing.Optional[str] = Field(None, alias='fieldType')

    default_value: typing.Optional[str] = Field(None, alias='defaultValue')

    cfcode: typing.Optional[str] = Field(None, alias='cfcode')

    cfgroupid: typing.Optional[str] = Field(None, alias='cfgroupid')

    style: typing.Optional[str] = Field(None, alias='style')

    op_values: typing.Optional[str] = Field(None, alias='opValues')

    field_formula: typing.Optional[str] = Field(None, alias='fieldFormula')

    custom_field_value_model: typing.Optional[str] = Field(None, alias='customFieldValueModel')

    custom_field_value_model_list: typing.Optional[CustomFieldsGetByIdResponseDataCustomFieldValueModelList] = Field(None, alias='customFieldValueModelList')

    custom_field_group_model: typing.Optional[CustomFieldsGetByIdResponseDataCustomFieldGroupModel] = Field(None, alias='customFieldGroupModel')

    object_access_model: typing.Optional[str] = Field(None, alias='objectAccessModel')

    access: typing.Optional[str] = Field(None, alias='access')

    user_group_id: typing.Optional[str] = Field(None, alias='userGroupId')

    candidate_access: typing.Optional[str] = Field(None, alias='candidateAccess')

    user_access: typing.Optional[str] = Field(None, alias='userAccess')

    manager_access: typing.Optional[str] = Field(None, alias='managerAccess')

    integration_type_id: typing.Optional[str] = Field(None, alias='integrationTypeId')

    help_text: typing.Optional[str] = Field(None, alias='helpText')

    create_user_id: typing.Optional[str] = Field(None, alias='createUserId')

    createts: typing.Optional[int] = Field(None, alias='createts')

    custom_field_style_model: typing.Optional[str] = Field(None, alias='customFieldStyleModel')

    read_access_type_code: typing.Optional[str] = Field(None, alias='readAccessTypeCode')

    read_user_group_id: typing.Optional[str] = Field(None, alias='readUserGroupId')

    mandatory: typing.Optional[str] = Field(None, alias='mandatory')

    masked: typing.Optional[str] = Field(None, alias='masked')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )

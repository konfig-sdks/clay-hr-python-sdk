# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from clay_hr_python_sdk.pydantic.address_model import AddressModel
from clay_hr_python_sdk.pydantic.assessment_model import AssessmentModel
from clay_hr_python_sdk.pydantic.attachment_model import AttachmentModel
from clay_hr_python_sdk.pydantic.candidate_applications_model import CandidateApplicationsModel
from clay_hr_python_sdk.pydantic.candidate_status_model import CandidateStatusModel
from clay_hr_python_sdk.pydantic.certification_model import CertificationModel
from clay_hr_python_sdk.pydantic.custom_field_value_model import CustomFieldValueModel
from clay_hr_python_sdk.pydantic.education_model import EducationModel
from clay_hr_python_sdk.pydantic.employment_model import EmploymentModel
if TYPE_CHECKING:
    from clay_hr_python_sdk.pydantic.position_model import PositionModel
from clay_hr_python_sdk.pydantic.skill_user_model import SkillUserModel
from clay_hr_python_sdk.pydantic.timestamp import Timestamp
from clay_hr_python_sdk.pydantic.workflow_model import WorkflowModel

class CandidateModel(BaseModel):
    acceptance1: typing.Optional[bool] = Field(None, alias='acceptance1')

    acceptance2: typing.Optional[bool] = Field(None, alias='acceptance2')

    access_code: typing.Optional[str] = Field(None, alias='accessCode')

    address_model_list: typing.Optional[typing.List[AddressModel]] = Field(None, alias='addressModelList')

    assessment_model: typing.Optional[AssessmentModel] = Field(None, alias='assessmentModel')

    attachment_model_list: typing.Optional['typing.List[AttachmentModel]'] = Field(None, alias='attachmentModelList')

    candidate_lock: typing.Optional[int] = Field(None, alias='candidateLock')

    candidate_positions_model_list: typing.Optional[typing.List[CandidateApplicationsModel]] = Field(None, alias='candidatePositionsModelList')

    candidate_status_model: typing.Optional[CandidateStatusModel] = Field(None, alias='candidateStatusModel')

    certification_model_list: typing.Optional[typing.List[CertificationModel]] = Field(None, alias='certificationModelList')

    cid: typing.Optional[int] = Field(None, alias='cid')

    cloud_search_sync: typing.Optional[int] = Field(None, alias='cloudSearchSync')

    createts: typing.Optional[Timestamp] = Field(None, alias='createts')

    createuserid: typing.Optional[int] = Field(None, alias='createuserid')

    custom_field_value_model_list: typing.Optional[typing.List[CustomFieldValueModel]] = Field(None, alias='customFieldValueModelList')

    customfieldvalue: typing.Optional[typing.List[CustomFieldValueModel]] = Field(None, alias='customfieldvalue')

    date_of_birth: typing.Optional[date] = Field(None, alias='dateOfBirth')

    education_model_list: typing.Optional[typing.List[EducationModel]] = Field(None, alias='educationModelList')

    education_str: typing.Optional[str] = Field(None, alias='educationStr')

    email: typing.Optional[str] = Field(None, alias='email')

    employment_model_list: typing.Optional[typing.List[EmploymentModel]] = Field(None, alias='employmentModelList')

    is_internal_cand: typing.Optional[bool] = Field(None, alias='isInternalCand')

    is_new_cand: typing.Optional[bool] = Field(None, alias='isNewCand')

    language_preference: typing.Optional[str] = Field(None, alias='languagePreference')

    lastupdateuserid: typing.Optional[int] = Field(None, alias='lastupdateuserid')

    name: typing.Optional[str] = Field(None, alias='name')

    notes: typing.Optional[str] = Field(None, alias='notes')

    password_hash: typing.Optional[str] = Field(None, alias='passwordHash')

    phone: typing.Optional[str] = Field(None, alias='phone')

    position_model: typing.Optional['PositionModel'] = Field(None, alias='positionModel')

    position_name: typing.Optional[str] = Field(None, alias='positionName')

    recruit_id: typing.Optional[int] = Field(None, alias='recruitId')

    recruiter: typing.Optional[str] = Field(None, alias='recruiter')

    recruiter_user_id: typing.Optional[int] = Field(None, alias='recruiterUserId')

    referrer: typing.Optional[str] = Field(None, alias='referrer')

    referrer_id: typing.Optional[int] = Field(None, alias='referrerId')

    salary_amount: typing.Optional[int] = Field(None, alias='salaryAmount')

    salary_currency_code: typing.Optional[str] = Field(None, alias='salaryCurrencyCode')

    score: typing.Optional[typing.Union[int, float]] = Field(None, alias='score')

    skill_model_list: typing.Optional['typing.List[SkillUserModel]'] = Field(None, alias='skillModelList')

    source: typing.Optional[str] = Field(None, alias='source')

    status: typing.Optional[str] = Field(None, alias='status')

    statusid: typing.Optional[int] = Field(None, alias='statusid')

    summary_by_candidate: typing.Optional[str] = Field(None, alias='summaryByCandidate')

    system_reco: typing.Optional[str] = Field(None, alias='systemReco')

    system_reco_help: typing.Optional[str] = Field(None, alias='systemRecoHelp')

    template_id: typing.Optional[int] = Field(None, alias='templateId')

    timezone: typing.Optional[str] = Field(None, alias='timezone')

    training_access: typing.Optional[bool] = Field(None, alias='trainingAccess')

    updated_on: typing.Optional[Timestamp] = Field(None, alias='updatedOn')

    user_id: typing.Optional[int] = Field(None, alias='userId')

    verification_code: typing.Optional[int] = Field(None, alias='verificationCode')

    verified: typing.Optional[str] = Field(None, alias='verified')

    workflow_id: typing.Optional[int] = Field(None, alias='workflowId')

    workflow_model: typing.Optional[WorkflowModel] = Field(None, alias='workflowModel')

    workflow_name: typing.Optional[str] = Field(None, alias='workflowName')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )

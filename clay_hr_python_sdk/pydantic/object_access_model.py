# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from clay_hr_python_sdk.pydantic.department_model import DepartmentModel
from clay_hr_python_sdk.pydantic.location_model import LocationModel
from clay_hr_python_sdk.pydantic.timestamp import Timestamp
from clay_hr_python_sdk.pydantic.user_group_model import UserGroupModel
from clay_hr_python_sdk.pydantic.user_view_model import UserViewModel

class ObjectAccessModel(BaseModel):
    access_code: typing.Optional[str] = Field(None, alias='accessCode')

    atchfolderid: typing.Optional[int] = Field(None, alias='atchfolderid')

    atchid: typing.Optional[int] = Field(None, alias='atchid')

    cfid: typing.Optional[int] = Field(None, alias='cfid')

    cid: typing.Optional[int] = Field(None, alias='cid')

    create_timestamp: typing.Optional[Timestamp] = Field(None, alias='createTimestamp')

    create_user_id: typing.Optional[int] = Field(None, alias='createUserId')

    department_id: typing.Optional[int] = Field(None, alias='departmentId')

    department_model: typing.Optional[DepartmentModel] = Field(None, alias='departmentModel')

    location_id: typing.Optional[int] = Field(None, alias='locationId')

    location_model: typing.Optional[LocationModel] = Field(None, alias='locationModel')

    object_access_id: typing.Optional[int] = Field(None, alias='objectAccessId')

    obtype: typing.Optional[str] = Field(None, alias='obtype')

    user_group_id: typing.Optional[int] = Field(None, alias='userGroupId')

    user_group_model: typing.Optional[UserGroupModel] = Field(None, alias='userGroupModel')

    user_view_model: typing.Optional[UserViewModel] = Field(None, alias='userViewModel')

    userid: typing.Optional[int] = Field(None, alias='userid')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )

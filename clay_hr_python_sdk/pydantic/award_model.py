# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from clay_hr_python_sdk.pydantic.award_type_model import AwardTypeModel
from clay_hr_python_sdk.pydantic.currency_model import CurrencyModel
from clay_hr_python_sdk.pydantic.timestamp import Timestamp
from clay_hr_python_sdk.pydantic.user_view_model import UserViewModel

class AwardModel(BaseModel):
    appraisal_id: typing.Optional[int] = Field(None, alias='appraisalId')

    attribution: typing.Optional[str] = Field(None, alias='attribution')

    award_date: typing.Optional[date] = Field(None, alias='awardDate')

    award_id: typing.Optional[int] = Field(None, alias='awardId')

    award_type_model: typing.Optional[AwardTypeModel] = Field(None, alias='awardTypeModel')

    cid: typing.Optional[int] = Field(None, alias='cid')

    createts: typing.Optional[Timestamp] = Field(None, alias='createts')

    currency_model: typing.Optional[CurrencyModel] = Field(None, alias='currencyModel')

    feedback_id: typing.Optional[int] = Field(None, alias='feedbackId')

    fin_account_code: typing.Optional[str] = Field(None, alias='finAccountCode')

    fin_amount: typing.Optional[typing.Union[int, float]] = Field(None, alias='finAmount')

    fin_currency_code: typing.Optional[str] = Field(None, alias='finCurrencyCode')

    fin_payment_date: typing.Optional[date] = Field(None, alias='finPaymentDate')

    fin_payment_status: typing.Optional[str] = Field(None, alias='finPaymentStatus')

    non_monetary_compensation: typing.Optional[str] = Field(None, alias='nonMonetaryCompensation')

    notes: typing.Optional[str] = Field(None, alias='notes')

    user_view_model: typing.Optional[UserViewModel] = Field(None, alias='userViewModel')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from clay_hr_python_sdk.pydantic.custom_field_model import CustomFieldModel
from clay_hr_python_sdk.pydantic.timestamp import Timestamp

class EmploymentModel(BaseModel):
    s_o_c_code: typing.Optional[str] = Field(None, alias='SOCCode')

    cid: typing.Optional[int] = Field(None, alias='cid')

    city: typing.Optional[str] = Field(None, alias='city')

    country_id: typing.Optional[int] = Field(None, alias='countryId')

    createts: typing.Optional[Timestamp] = Field(None, alias='createts')

    cust_app_id: typing.Optional[int] = Field(None, alias='custAppId')

    custom_field_model_list: typing.Optional[typing.List[CustomFieldModel]] = Field(None, alias='customFieldModelList')

    department: typing.Optional[str] = Field(None, alias='department')

    duties: typing.Optional[str] = Field(None, alias='duties')

    emp_id: typing.Optional[int] = Field(None, alias='empId')

    employer_name: typing.Optional[str] = Field(None, alias='employerName')

    employer_type_bus: typing.Optional[str] = Field(None, alias='employerTypeBus')

    employment_type: typing.Optional[str] = Field(None, alias='employmentType')

    end_date: typing.Optional[date] = Field(None, alias='endDate')

    naicscode: typing.Optional[str] = Field(None, alias='naicscode')

    position: typing.Optional[str] = Field(None, alias='position')

    recruitid: typing.Optional[int] = Field(None, alias='recruitid')

    soccode: typing.Optional[str] = Field(None, alias='soccode')

    start_date: typing.Optional[date] = Field(None, alias='startDate')

    state: typing.Optional[str] = Field(None, alias='state')

    user_id: typing.Optional[int] = Field(None, alias='userId')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )

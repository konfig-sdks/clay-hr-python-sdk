# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from clay_hr_python_sdk.pydantic.skills_get_user_assigned_skills_response_data_item_skill_model import SkillsGetUserAssignedSkillsResponseDataItemSkillModel

class SkillsGetUserAssignedSkillsResponseDataItem(BaseModel):
    description: typing.Optional[str] = Field(None, alias='description')

    skill_user_id: typing.Optional[str] = Field(None, alias='skillUserId')

    skill_id: typing.Optional[str] = Field(None, alias='skillId')

    user_id: typing.Optional[str] = Field(None, alias='userId')

    level: typing.Optional[str] = Field(None, alias='level')

    cid: typing.Optional[str] = Field(None, alias='cid')

    last_update_user_model: typing.Optional[str] = Field(None, alias='lastUpdateUserModel')

    create_user_id: typing.Optional[str] = Field(None, alias='createUserId')

    status: typing.Optional[str] = Field(None, alias='status')

    createts: typing.Optional[str] = Field(None, alias='createts')

    performancelevel: typing.Optional[str] = Field(None, alias='performancelevel')

    candidateid: typing.Optional[str] = Field(None, alias='candidateid')

    weightage: typing.Optional[str] = Field(None, alias='weightage')

    target_level: typing.Optional[str] = Field(None, alias='targetLevel')

    target_level_createts: typing.Optional[str] = Field(None, alias='targetLevelCreatets')

    target_level_create_user_id: typing.Optional[str] = Field(None, alias='targetLevelCreateUserId')

    skill_counsellor: typing.Optional[str] = Field(None, alias='skillCounsellor')

    years_of_experience: typing.Optional[str] = Field(None, alias='yearsOfExperience')

    date_of_last_use: typing.Optional[str] = Field(None, alias='dateOfLastUse')

    skill_acquire_date: typing.Optional[str] = Field(None, alias='skillAcquireDate')

    skill_model: typing.Optional[SkillsGetUserAssignedSkillsResponseDataItemSkillModel] = Field(None, alias='skillModel')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )

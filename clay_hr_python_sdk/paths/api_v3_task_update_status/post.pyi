# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401



from ...api_client import Dictionary

# Query params
AppraisalIdSchema = schemas.Int32Schema
AssignedUserIdSchema = schemas.Int32Schema
CiSchema = schemas.BoolSchema
CidSchema = schemas.Int32Schema
CreateUserIdSchema = schemas.Int32Schema
CreatetsSchema = schemas.DateSchema
DescriptionSchema = schemas.StrSchema
DueDateSchema = schemas.DateSchema
LastEditSchema = schemas.StrSchema
LaunchtsDateSchema = schemas.Int32Schema
LaunchtsDaySchema = schemas.Int32Schema
LaunchtsHoursSchema = schemas.Int32Schema
LaunchtsMinutesSchema = schemas.Int32Schema
LaunchtsMonthSchema = schemas.Int32Schema
LaunchtsNanosSchema = schemas.Int32Schema
LaunchtsSecondsSchema = schemas.Int32Schema
LaunchtsTimeSchema = schemas.Int64Schema
LaunchtsTimezoneOffsetSchema = schemas.Int32Schema
LaunchtsYearSchema = schemas.Int32Schema
PhasenameSchema = schemas.StrSchema
ProjectIdSchema = schemas.Int32Schema
RecruitIdSchema = schemas.Int32Schema
StatusCodeSchema = schemas.StrSchema
SystemTaskSchema = schemas.Int32Schema
TaskIdSchema = schemas.Int32Schema
TaskUIDSchema = schemas.Int32Schema
TitleSchema = schemas.StrSchema
TransitionNameSchema = schemas.StrSchema
TypeSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'appraisalId': typing.Union[AppraisalIdSchema, decimal.Decimal, int, ],
        'assignedUserId': typing.Union[AssignedUserIdSchema, decimal.Decimal, int, ],
        'ci': typing.Union[CiSchema, bool, ],
        'cid': typing.Union[CidSchema, decimal.Decimal, int, ],
        'createUserId': typing.Union[CreateUserIdSchema, decimal.Decimal, int, ],
        'createts': typing.Union[CreatetsSchema, str, date, ],
        'description': typing.Union[DescriptionSchema, str, ],
        'dueDate': typing.Union[DueDateSchema, str, date, ],
        'lastEdit': typing.Union[LastEditSchema, str, ],
        'launchts.date': typing.Union[LaunchtsDateSchema, decimal.Decimal, int, ],
        'launchts.day': typing.Union[LaunchtsDaySchema, decimal.Decimal, int, ],
        'launchts.hours': typing.Union[LaunchtsHoursSchema, decimal.Decimal, int, ],
        'launchts.minutes': typing.Union[LaunchtsMinutesSchema, decimal.Decimal, int, ],
        'launchts.month': typing.Union[LaunchtsMonthSchema, decimal.Decimal, int, ],
        'launchts.nanos': typing.Union[LaunchtsNanosSchema, decimal.Decimal, int, ],
        'launchts.seconds': typing.Union[LaunchtsSecondsSchema, decimal.Decimal, int, ],
        'launchts.time': typing.Union[LaunchtsTimeSchema, decimal.Decimal, int, ],
        'launchts.timezoneOffset': typing.Union[LaunchtsTimezoneOffsetSchema, decimal.Decimal, int, ],
        'launchts.year': typing.Union[LaunchtsYearSchema, decimal.Decimal, int, ],
        'phasename': typing.Union[PhasenameSchema, str, ],
        'projectId': typing.Union[ProjectIdSchema, decimal.Decimal, int, ],
        'recruitId': typing.Union[RecruitIdSchema, decimal.Decimal, int, ],
        'statusCode': typing.Union[StatusCodeSchema, str, ],
        'systemTask': typing.Union[SystemTaskSchema, decimal.Decimal, int, ],
        'taskId': typing.Union[TaskIdSchema, decimal.Decimal, int, ],
        'taskUID': typing.Union[TaskUIDSchema, decimal.Decimal, int, ],
        'title': typing.Union[TitleSchema, str, ],
        'transitionName': typing.Union[TransitionNameSchema, str, ],
        'type': typing.Union[TypeSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_appraisal_id = api_client.QueryParameter(
    name="appraisalId",
    style=api_client.ParameterStyle.FORM,
    schema=AppraisalIdSchema,
    explode=True,
)
request_query_assigned_user_id = api_client.QueryParameter(
    name="assignedUserId",
    style=api_client.ParameterStyle.FORM,
    schema=AssignedUserIdSchema,
    explode=True,
)
request_query_ci = api_client.QueryParameter(
    name="ci",
    style=api_client.ParameterStyle.FORM,
    schema=CiSchema,
    explode=True,
)
request_query_cid = api_client.QueryParameter(
    name="cid",
    style=api_client.ParameterStyle.FORM,
    schema=CidSchema,
    explode=True,
)
request_query_create_user_id = api_client.QueryParameter(
    name="createUserId",
    style=api_client.ParameterStyle.FORM,
    schema=CreateUserIdSchema,
    explode=True,
)
request_query_createts = api_client.QueryParameter(
    name="createts",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsSchema,
    explode=True,
)
request_query_description = api_client.QueryParameter(
    name="description",
    style=api_client.ParameterStyle.FORM,
    schema=DescriptionSchema,
    explode=True,
)
request_query_due_date = api_client.QueryParameter(
    name="dueDate",
    style=api_client.ParameterStyle.FORM,
    schema=DueDateSchema,
    explode=True,
)
request_query_last_edit = api_client.QueryParameter(
    name="lastEdit",
    style=api_client.ParameterStyle.FORM,
    schema=LastEditSchema,
    explode=True,
)
request_query_launchts_date = api_client.QueryParameter(
    name="launchts.date",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsDateSchema,
    explode=True,
)
request_query_launchts_day = api_client.QueryParameter(
    name="launchts.day",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsDaySchema,
    explode=True,
)
request_query_launchts_hours = api_client.QueryParameter(
    name="launchts.hours",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsHoursSchema,
    explode=True,
)
request_query_launchts_minutes = api_client.QueryParameter(
    name="launchts.minutes",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsMinutesSchema,
    explode=True,
)
request_query_launchts_month = api_client.QueryParameter(
    name="launchts.month",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsMonthSchema,
    explode=True,
)
request_query_launchts_nanos = api_client.QueryParameter(
    name="launchts.nanos",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsNanosSchema,
    explode=True,
)
request_query_launchts_seconds = api_client.QueryParameter(
    name="launchts.seconds",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsSecondsSchema,
    explode=True,
)
request_query_launchts_time = api_client.QueryParameter(
    name="launchts.time",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsTimeSchema,
    explode=True,
)
request_query_launchts_timezone_offset = api_client.QueryParameter(
    name="launchts.timezoneOffset",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsTimezoneOffsetSchema,
    explode=True,
)
request_query_launchts_year = api_client.QueryParameter(
    name="launchts.year",
    style=api_client.ParameterStyle.FORM,
    schema=LaunchtsYearSchema,
    explode=True,
)
request_query_phasename = api_client.QueryParameter(
    name="phasename",
    style=api_client.ParameterStyle.FORM,
    schema=PhasenameSchema,
    explode=True,
)
request_query_project_id = api_client.QueryParameter(
    name="projectId",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectIdSchema,
    explode=True,
)
request_query_recruit_id = api_client.QueryParameter(
    name="recruitId",
    style=api_client.ParameterStyle.FORM,
    schema=RecruitIdSchema,
    explode=True,
)
request_query_status_code = api_client.QueryParameter(
    name="statusCode",
    style=api_client.ParameterStyle.FORM,
    schema=StatusCodeSchema,
    explode=True,
)
request_query_system_task = api_client.QueryParameter(
    name="systemTask",
    style=api_client.ParameterStyle.FORM,
    schema=SystemTaskSchema,
    explode=True,
)
request_query_task_id = api_client.QueryParameter(
    name="taskId",
    style=api_client.ParameterStyle.FORM,
    schema=TaskIdSchema,
    explode=True,
)
request_query_task_uid = api_client.QueryParameter(
    name="taskUID",
    style=api_client.ParameterStyle.FORM,
    schema=TaskUIDSchema,
    explode=True,
)
request_query_title = api_client.QueryParameter(
    name="title",
    style=api_client.ParameterStyle.FORM,
    schema=TitleSchema,
    explode=True,
)
request_query_transition_name = api_client.QueryParameter(
    name="transitionName",
    style=api_client.ParameterStyle.FORM,
    schema=TransitionNameSchema,
    explode=True,
)
request_query_type = api_client.QueryParameter(
    name="type",
    style=api_client.ParameterStyle.FORM,
    schema=TypeSchema,
    explode=True,
)
# Header params
AuthorizationSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'Authorization': typing.Union[AuthorizationSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_authorization = api_client.HeaderParameter(
    name="Authorization",
    style=api_client.ParameterStyle.SIMPLE,
    schema=AuthorizationSchema,
)
SchemaFor200ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_status_task_mapped_args(
        self,
        authorization: typing.Optional[str] = None,
        appraisal_id: typing.Optional[int] = None,
        assigned_user_id: typing.Optional[int] = None,
        ci: typing.Optional[bool] = None,
        cid: typing.Optional[int] = None,
        create_user_id: typing.Optional[int] = None,
        createts: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        due_date: typing.Optional[date] = None,
        last_edit: typing.Optional[str] = None,
        launchts_date: typing.Optional[int] = None,
        launchts_day: typing.Optional[int] = None,
        launchts_hours: typing.Optional[int] = None,
        launchts_minutes: typing.Optional[int] = None,
        launchts_month: typing.Optional[int] = None,
        launchts_nanos: typing.Optional[int] = None,
        launchts_seconds: typing.Optional[int] = None,
        launchts_time: typing.Optional[int] = None,
        launchts_timezone_offset: typing.Optional[int] = None,
        launchts_year: typing.Optional[int] = None,
        phasename: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        recruit_id: typing.Optional[int] = None,
        status_code: typing.Optional[str] = None,
        system_task: typing.Optional[int] = None,
        task_id: typing.Optional[int] = None,
        task_uid: typing.Optional[int] = None,
        title: typing.Optional[str] = None,
        transition_name: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        if appraisal_id is not None:
            _query_params["appraisalId"] = appraisal_id
        if assigned_user_id is not None:
            _query_params["assignedUserId"] = assigned_user_id
        if ci is not None:
            _query_params["ci"] = ci
        if cid is not None:
            _query_params["cid"] = cid
        if create_user_id is not None:
            _query_params["createUserId"] = create_user_id
        if createts is not None:
            _query_params["createts"] = createts
        if description is not None:
            _query_params["description"] = description
        if due_date is not None:
            _query_params["dueDate"] = due_date
        if last_edit is not None:
            _query_params["lastEdit"] = last_edit
        if launchts_date is not None:
            _query_params["launchts.date"] = launchts_date
        if launchts_day is not None:
            _query_params["launchts.day"] = launchts_day
        if launchts_hours is not None:
            _query_params["launchts.hours"] = launchts_hours
        if launchts_minutes is not None:
            _query_params["launchts.minutes"] = launchts_minutes
        if launchts_month is not None:
            _query_params["launchts.month"] = launchts_month
        if launchts_nanos is not None:
            _query_params["launchts.nanos"] = launchts_nanos
        if launchts_seconds is not None:
            _query_params["launchts.seconds"] = launchts_seconds
        if launchts_time is not None:
            _query_params["launchts.time"] = launchts_time
        if launchts_timezone_offset is not None:
            _query_params["launchts.timezoneOffset"] = launchts_timezone_offset
        if launchts_year is not None:
            _query_params["launchts.year"] = launchts_year
        if phasename is not None:
            _query_params["phasename"] = phasename
        if project_id is not None:
            _query_params["projectId"] = project_id
        if recruit_id is not None:
            _query_params["recruitId"] = recruit_id
        if status_code is not None:
            _query_params["statusCode"] = status_code
        if system_task is not None:
            _query_params["systemTask"] = system_task
        if task_id is not None:
            _query_params["taskId"] = task_id
        if task_uid is not None:
            _query_params["taskUID"] = task_uid
        if title is not None:
            _query_params["title"] = title
        if transition_name is not None:
            _query_params["transitionName"] = transition_name
        if type is not None:
            _query_params["type"] = type
        if authorization is not None:
            _header_params["Authorization"] = authorization
        args.query = _query_params
        args.header = _header_params
        return args

    async def _aupdate_status_task_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update status workflow task.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_appraisal_id,
            request_query_assigned_user_id,
            request_query_ci,
            request_query_cid,
            request_query_create_user_id,
            request_query_createts,
            request_query_description,
            request_query_due_date,
            request_query_last_edit,
            request_query_launchts_date,
            request_query_launchts_day,
            request_query_launchts_hours,
            request_query_launchts_minutes,
            request_query_launchts_month,
            request_query_launchts_nanos,
            request_query_launchts_seconds,
            request_query_launchts_time,
            request_query_launchts_timezone_offset,
            request_query_launchts_year,
            request_query_phasename,
            request_query_project_id,
            request_query_recruit_id,
            request_query_status_code,
            request_query_system_task,
            request_query_task_id,
            request_query_task_uid,
            request_query_title,
            request_query_transition_name,
            request_query_type,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/task/update/status',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_status_task_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update status workflow task.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_appraisal_id,
            request_query_assigned_user_id,
            request_query_ci,
            request_query_cid,
            request_query_create_user_id,
            request_query_createts,
            request_query_description,
            request_query_due_date,
            request_query_last_edit,
            request_query_launchts_date,
            request_query_launchts_day,
            request_query_launchts_hours,
            request_query_launchts_minutes,
            request_query_launchts_month,
            request_query_launchts_nanos,
            request_query_launchts_seconds,
            request_query_launchts_time,
            request_query_launchts_timezone_offset,
            request_query_launchts_year,
            request_query_phasename,
            request_query_project_id,
            request_query_recruit_id,
            request_query_status_code,
            request_query_system_task,
            request_query_task_id,
            request_query_task_uid,
            request_query_title,
            request_query_transition_name,
            request_query_type,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_authorization,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/v3/task/update/status',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateStatusTaskRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_status_task(
        self,
        authorization: typing.Optional[str] = None,
        appraisal_id: typing.Optional[int] = None,
        assigned_user_id: typing.Optional[int] = None,
        ci: typing.Optional[bool] = None,
        cid: typing.Optional[int] = None,
        create_user_id: typing.Optional[int] = None,
        createts: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        due_date: typing.Optional[date] = None,
        last_edit: typing.Optional[str] = None,
        launchts_date: typing.Optional[int] = None,
        launchts_day: typing.Optional[int] = None,
        launchts_hours: typing.Optional[int] = None,
        launchts_minutes: typing.Optional[int] = None,
        launchts_month: typing.Optional[int] = None,
        launchts_nanos: typing.Optional[int] = None,
        launchts_seconds: typing.Optional[int] = None,
        launchts_time: typing.Optional[int] = None,
        launchts_timezone_offset: typing.Optional[int] = None,
        launchts_year: typing.Optional[int] = None,
        phasename: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        recruit_id: typing.Optional[int] = None,
        status_code: typing.Optional[str] = None,
        system_task: typing.Optional[int] = None,
        task_id: typing.Optional[int] = None,
        task_uid: typing.Optional[int] = None,
        title: typing.Optional[str] = None,
        transition_name: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_status_task_mapped_args(
            authorization=authorization,
            appraisal_id=appraisal_id,
            assigned_user_id=assigned_user_id,
            ci=ci,
            cid=cid,
            create_user_id=create_user_id,
            createts=createts,
            description=description,
            due_date=due_date,
            last_edit=last_edit,
            launchts_date=launchts_date,
            launchts_day=launchts_day,
            launchts_hours=launchts_hours,
            launchts_minutes=launchts_minutes,
            launchts_month=launchts_month,
            launchts_nanos=launchts_nanos,
            launchts_seconds=launchts_seconds,
            launchts_time=launchts_time,
            launchts_timezone_offset=launchts_timezone_offset,
            launchts_year=launchts_year,
            phasename=phasename,
            project_id=project_id,
            recruit_id=recruit_id,
            status_code=status_code,
            system_task=system_task,
            task_id=task_id,
            task_uid=task_uid,
            title=title,
            transition_name=transition_name,
            type=type,
        )
        return await self._aupdate_status_task_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def update_status_task(
        self,
        authorization: typing.Optional[str] = None,
        appraisal_id: typing.Optional[int] = None,
        assigned_user_id: typing.Optional[int] = None,
        ci: typing.Optional[bool] = None,
        cid: typing.Optional[int] = None,
        create_user_id: typing.Optional[int] = None,
        createts: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        due_date: typing.Optional[date] = None,
        last_edit: typing.Optional[str] = None,
        launchts_date: typing.Optional[int] = None,
        launchts_day: typing.Optional[int] = None,
        launchts_hours: typing.Optional[int] = None,
        launchts_minutes: typing.Optional[int] = None,
        launchts_month: typing.Optional[int] = None,
        launchts_nanos: typing.Optional[int] = None,
        launchts_seconds: typing.Optional[int] = None,
        launchts_time: typing.Optional[int] = None,
        launchts_timezone_offset: typing.Optional[int] = None,
        launchts_year: typing.Optional[int] = None,
        phasename: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        recruit_id: typing.Optional[int] = None,
        status_code: typing.Optional[str] = None,
        system_task: typing.Optional[int] = None,
        task_id: typing.Optional[int] = None,
        task_uid: typing.Optional[int] = None,
        title: typing.Optional[str] = None,
        transition_name: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_status_task_mapped_args(
            authorization=authorization,
            appraisal_id=appraisal_id,
            assigned_user_id=assigned_user_id,
            ci=ci,
            cid=cid,
            create_user_id=create_user_id,
            createts=createts,
            description=description,
            due_date=due_date,
            last_edit=last_edit,
            launchts_date=launchts_date,
            launchts_day=launchts_day,
            launchts_hours=launchts_hours,
            launchts_minutes=launchts_minutes,
            launchts_month=launchts_month,
            launchts_nanos=launchts_nanos,
            launchts_seconds=launchts_seconds,
            launchts_time=launchts_time,
            launchts_timezone_offset=launchts_timezone_offset,
            launchts_year=launchts_year,
            phasename=phasename,
            project_id=project_id,
            recruit_id=recruit_id,
            status_code=status_code,
            system_task=system_task,
            task_id=task_id,
            task_uid=task_uid,
            title=title,
            transition_name=transition_name,
            type=type,
        )
        return self._update_status_task_oapg(
            query_params=args.query,
            header_params=args.header,
        )

class UpdateStatusTask(BaseApi):

    async def aupdate_status_task(
        self,
        authorization: typing.Optional[str] = None,
        appraisal_id: typing.Optional[int] = None,
        assigned_user_id: typing.Optional[int] = None,
        ci: typing.Optional[bool] = None,
        cid: typing.Optional[int] = None,
        create_user_id: typing.Optional[int] = None,
        createts: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        due_date: typing.Optional[date] = None,
        last_edit: typing.Optional[str] = None,
        launchts_date: typing.Optional[int] = None,
        launchts_day: typing.Optional[int] = None,
        launchts_hours: typing.Optional[int] = None,
        launchts_minutes: typing.Optional[int] = None,
        launchts_month: typing.Optional[int] = None,
        launchts_nanos: typing.Optional[int] = None,
        launchts_seconds: typing.Optional[int] = None,
        launchts_time: typing.Optional[int] = None,
        launchts_timezone_offset: typing.Optional[int] = None,
        launchts_year: typing.Optional[int] = None,
        phasename: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        recruit_id: typing.Optional[int] = None,
        status_code: typing.Optional[str] = None,
        system_task: typing.Optional[int] = None,
        task_id: typing.Optional[int] = None,
        task_uid: typing.Optional[int] = None,
        title: typing.Optional[str] = None,
        transition_name: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.aupdate_status_task(
            authorization=authorization,
            appraisal_id=appraisal_id,
            assigned_user_id=assigned_user_id,
            ci=ci,
            cid=cid,
            create_user_id=create_user_id,
            createts=createts,
            description=description,
            due_date=due_date,
            last_edit=last_edit,
            launchts_date=launchts_date,
            launchts_day=launchts_day,
            launchts_hours=launchts_hours,
            launchts_minutes=launchts_minutes,
            launchts_month=launchts_month,
            launchts_nanos=launchts_nanos,
            launchts_seconds=launchts_seconds,
            launchts_time=launchts_time,
            launchts_timezone_offset=launchts_timezone_offset,
            launchts_year=launchts_year,
            phasename=phasename,
            project_id=project_id,
            recruit_id=recruit_id,
            status_code=status_code,
            system_task=system_task,
            task_id=task_id,
            task_uid=task_uid,
            title=title,
            transition_name=transition_name,
            type=type,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def update_status_task(
        self,
        authorization: typing.Optional[str] = None,
        appraisal_id: typing.Optional[int] = None,
        assigned_user_id: typing.Optional[int] = None,
        ci: typing.Optional[bool] = None,
        cid: typing.Optional[int] = None,
        create_user_id: typing.Optional[int] = None,
        createts: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        due_date: typing.Optional[date] = None,
        last_edit: typing.Optional[str] = None,
        launchts_date: typing.Optional[int] = None,
        launchts_day: typing.Optional[int] = None,
        launchts_hours: typing.Optional[int] = None,
        launchts_minutes: typing.Optional[int] = None,
        launchts_month: typing.Optional[int] = None,
        launchts_nanos: typing.Optional[int] = None,
        launchts_seconds: typing.Optional[int] = None,
        launchts_time: typing.Optional[int] = None,
        launchts_timezone_offset: typing.Optional[int] = None,
        launchts_year: typing.Optional[int] = None,
        phasename: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        recruit_id: typing.Optional[int] = None,
        status_code: typing.Optional[str] = None,
        system_task: typing.Optional[int] = None,
        task_id: typing.Optional[int] = None,
        task_uid: typing.Optional[int] = None,
        title: typing.Optional[str] = None,
        transition_name: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.update_status_task(
            authorization=authorization,
            appraisal_id=appraisal_id,
            assigned_user_id=assigned_user_id,
            ci=ci,
            cid=cid,
            create_user_id=create_user_id,
            createts=createts,
            description=description,
            due_date=due_date,
            last_edit=last_edit,
            launchts_date=launchts_date,
            launchts_day=launchts_day,
            launchts_hours=launchts_hours,
            launchts_minutes=launchts_minutes,
            launchts_month=launchts_month,
            launchts_nanos=launchts_nanos,
            launchts_seconds=launchts_seconds,
            launchts_time=launchts_time,
            launchts_timezone_offset=launchts_timezone_offset,
            launchts_year=launchts_year,
            phasename=phasename,
            project_id=project_id,
            recruit_id=recruit_id,
            status_code=status_code,
            system_task=system_task,
            task_id=task_id,
            task_uid=task_uid,
            title=title,
            transition_name=transition_name,
            type=type,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        authorization: typing.Optional[str] = None,
        appraisal_id: typing.Optional[int] = None,
        assigned_user_id: typing.Optional[int] = None,
        ci: typing.Optional[bool] = None,
        cid: typing.Optional[int] = None,
        create_user_id: typing.Optional[int] = None,
        createts: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        due_date: typing.Optional[date] = None,
        last_edit: typing.Optional[str] = None,
        launchts_date: typing.Optional[int] = None,
        launchts_day: typing.Optional[int] = None,
        launchts_hours: typing.Optional[int] = None,
        launchts_minutes: typing.Optional[int] = None,
        launchts_month: typing.Optional[int] = None,
        launchts_nanos: typing.Optional[int] = None,
        launchts_seconds: typing.Optional[int] = None,
        launchts_time: typing.Optional[int] = None,
        launchts_timezone_offset: typing.Optional[int] = None,
        launchts_year: typing.Optional[int] = None,
        phasename: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        recruit_id: typing.Optional[int] = None,
        status_code: typing.Optional[str] = None,
        system_task: typing.Optional[int] = None,
        task_id: typing.Optional[int] = None,
        task_uid: typing.Optional[int] = None,
        title: typing.Optional[str] = None,
        transition_name: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_status_task_mapped_args(
            authorization=authorization,
            appraisal_id=appraisal_id,
            assigned_user_id=assigned_user_id,
            ci=ci,
            cid=cid,
            create_user_id=create_user_id,
            createts=createts,
            description=description,
            due_date=due_date,
            last_edit=last_edit,
            launchts_date=launchts_date,
            launchts_day=launchts_day,
            launchts_hours=launchts_hours,
            launchts_minutes=launchts_minutes,
            launchts_month=launchts_month,
            launchts_nanos=launchts_nanos,
            launchts_seconds=launchts_seconds,
            launchts_time=launchts_time,
            launchts_timezone_offset=launchts_timezone_offset,
            launchts_year=launchts_year,
            phasename=phasename,
            project_id=project_id,
            recruit_id=recruit_id,
            status_code=status_code,
            system_task=system_task,
            task_id=task_id,
            task_uid=task_uid,
            title=title,
            transition_name=transition_name,
            type=type,
        )
        return await self._aupdate_status_task_oapg(
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def post(
        self,
        authorization: typing.Optional[str] = None,
        appraisal_id: typing.Optional[int] = None,
        assigned_user_id: typing.Optional[int] = None,
        ci: typing.Optional[bool] = None,
        cid: typing.Optional[int] = None,
        create_user_id: typing.Optional[int] = None,
        createts: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        due_date: typing.Optional[date] = None,
        last_edit: typing.Optional[str] = None,
        launchts_date: typing.Optional[int] = None,
        launchts_day: typing.Optional[int] = None,
        launchts_hours: typing.Optional[int] = None,
        launchts_minutes: typing.Optional[int] = None,
        launchts_month: typing.Optional[int] = None,
        launchts_nanos: typing.Optional[int] = None,
        launchts_seconds: typing.Optional[int] = None,
        launchts_time: typing.Optional[int] = None,
        launchts_timezone_offset: typing.Optional[int] = None,
        launchts_year: typing.Optional[int] = None,
        phasename: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        recruit_id: typing.Optional[int] = None,
        status_code: typing.Optional[str] = None,
        system_task: typing.Optional[int] = None,
        task_id: typing.Optional[int] = None,
        task_uid: typing.Optional[int] = None,
        title: typing.Optional[str] = None,
        transition_name: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_status_task_mapped_args(
            authorization=authorization,
            appraisal_id=appraisal_id,
            assigned_user_id=assigned_user_id,
            ci=ci,
            cid=cid,
            create_user_id=create_user_id,
            createts=createts,
            description=description,
            due_date=due_date,
            last_edit=last_edit,
            launchts_date=launchts_date,
            launchts_day=launchts_day,
            launchts_hours=launchts_hours,
            launchts_minutes=launchts_minutes,
            launchts_month=launchts_month,
            launchts_nanos=launchts_nanos,
            launchts_seconds=launchts_seconds,
            launchts_time=launchts_time,
            launchts_timezone_offset=launchts_timezone_offset,
            launchts_year=launchts_year,
            phasename=phasename,
            project_id=project_id,
            recruit_id=recruit_id,
            status_code=status_code,
            system_task=system_task,
            task_id=task_id,
            task_uid=task_uid,
            title=title,
            transition_name=transition_name,
            type=type,
        )
        return self._update_status_task_oapg(
            query_params=args.query,
            header_params=args.header,
        )


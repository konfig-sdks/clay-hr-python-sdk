# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401



from ...api_client import Dictionary

from . import path

# Query params
AdditiveSchema = schemas.Int32Schema
BegindateSchema = schemas.DateSchema
CidSchema = schemas.Int32Schema
CommentCrediteatetsSchema = schemas.StrSchema
CommentDescriptionSchema = schemas.StrSchema
CompanyGoalSchema = schemas.Int32Schema
CompletionRatioSchema = schemas.Float32Schema
CreateUserIdSchema = schemas.Int32Schema
CreatetsDateSchema = schemas.Int32Schema
CreatetsDaySchema = schemas.Int32Schema
CreatetsHoursSchema = schemas.Int32Schema
CreatetsMinutesSchema = schemas.Int32Schema
CreatetsMonthSchema = schemas.Int32Schema
CreatetsNanosSchema = schemas.Int32Schema
CreatetsSecondsSchema = schemas.Int32Schema
CreatetsTimeSchema = schemas.Int64Schema
CreatetsTimezoneOffsetSchema = schemas.Int32Schema
CreatetsYearSchema = schemas.Int32Schema
CrediteatetsSchema = schemas.DateTimeSchema
CurrentValueSchema = schemas.Float32Schema
DescriptionSchema = schemas.StrSchema
DispositionSchema = schemas.StrSchema
ElapsedTimeRatioSchema = schemas.Float32Schema
GoalIdSchema = schemas.Int32Schema
GoalValueSchema = schemas.Float32Schema
GoalWeightageSchema = schemas.Float32Schema
HasGoalApprovalPermissionSchema = schemas.BoolSchema
IdSchema = schemas.Int32Schema
InitialvalueSchema = schemas.Float32Schema
IsForwardSchema = schemas.BoolSchema
LastUpdateUserIdSchema = schemas.Int32Schema
ObjectiveIdSchema = schemas.Int32Schema
ParentGoalIdSchema = schemas.Int32Schema
ProgressRatioSchema = schemas.Float32Schema
ProjectidSchema = schemas.Int32Schema
ReviewUserIdSchema = schemas.Int32Schema
StateSchema = schemas.StrSchema
StatusSchema = schemas.StrSchema
SummarySchema = schemas.StrSchema
TargetDateSchema = schemas.DateSchema
TypecodeSchema = schemas.StrSchema
UnameSchema = schemas.StrSchema
UnitsSchema = schemas.StrSchema
VisibleToDirectReportsSchema = schemas.Int32Schema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'additive': typing.Union[AdditiveSchema, decimal.Decimal, int, ],
        'begindate': typing.Union[BegindateSchema, str, date, ],
        'cid': typing.Union[CidSchema, decimal.Decimal, int, ],
        'commentCrediteatets': typing.Union[CommentCrediteatetsSchema, str, ],
        'commentDescription': typing.Union[CommentDescriptionSchema, str, ],
        'companyGoal': typing.Union[CompanyGoalSchema, decimal.Decimal, int, ],
        'completionRatio': typing.Union[CompletionRatioSchema, decimal.Decimal, int, float, ],
        'createUserId': typing.Union[CreateUserIdSchema, decimal.Decimal, int, ],
        'createts.date': typing.Union[CreatetsDateSchema, decimal.Decimal, int, ],
        'createts.day': typing.Union[CreatetsDaySchema, decimal.Decimal, int, ],
        'createts.hours': typing.Union[CreatetsHoursSchema, decimal.Decimal, int, ],
        'createts.minutes': typing.Union[CreatetsMinutesSchema, decimal.Decimal, int, ],
        'createts.month': typing.Union[CreatetsMonthSchema, decimal.Decimal, int, ],
        'createts.nanos': typing.Union[CreatetsNanosSchema, decimal.Decimal, int, ],
        'createts.seconds': typing.Union[CreatetsSecondsSchema, decimal.Decimal, int, ],
        'createts.time': typing.Union[CreatetsTimeSchema, decimal.Decimal, int, ],
        'createts.timezoneOffset': typing.Union[CreatetsTimezoneOffsetSchema, decimal.Decimal, int, ],
        'createts.year': typing.Union[CreatetsYearSchema, decimal.Decimal, int, ],
        'crediteatets': typing.Union[CrediteatetsSchema, str, datetime, ],
        'currentValue': typing.Union[CurrentValueSchema, decimal.Decimal, int, float, ],
        'description': typing.Union[DescriptionSchema, str, ],
        'disposition': typing.Union[DispositionSchema, str, ],
        'elapsedTimeRatio': typing.Union[ElapsedTimeRatioSchema, decimal.Decimal, int, float, ],
        'goalId': typing.Union[GoalIdSchema, decimal.Decimal, int, ],
        'goalValue': typing.Union[GoalValueSchema, decimal.Decimal, int, float, ],
        'goalWeightage': typing.Union[GoalWeightageSchema, decimal.Decimal, int, float, ],
        'hasGoalApprovalPermission': typing.Union[HasGoalApprovalPermissionSchema, bool, ],
        'id': typing.Union[IdSchema, decimal.Decimal, int, ],
        'initialvalue': typing.Union[InitialvalueSchema, decimal.Decimal, int, float, ],
        'isForward': typing.Union[IsForwardSchema, bool, ],
        'lastUpdateUserId': typing.Union[LastUpdateUserIdSchema, decimal.Decimal, int, ],
        'objectiveId': typing.Union[ObjectiveIdSchema, decimal.Decimal, int, ],
        'parentGoalId': typing.Union[ParentGoalIdSchema, decimal.Decimal, int, ],
        'progressRatio': typing.Union[ProgressRatioSchema, decimal.Decimal, int, float, ],
        'projectid': typing.Union[ProjectidSchema, decimal.Decimal, int, ],
        'reviewUserId': typing.Union[ReviewUserIdSchema, decimal.Decimal, int, ],
        'state': typing.Union[StateSchema, str, ],
        'status': typing.Union[StatusSchema, str, ],
        'summary': typing.Union[SummarySchema, str, ],
        'targetDate': typing.Union[TargetDateSchema, str, date, ],
        'typecode': typing.Union[TypecodeSchema, str, ],
        'uname': typing.Union[UnameSchema, str, ],
        'units': typing.Union[UnitsSchema, str, ],
        'visibleToDirectReports': typing.Union[VisibleToDirectReportsSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_additive = api_client.QueryParameter(
    name="additive",
    style=api_client.ParameterStyle.FORM,
    schema=AdditiveSchema,
    explode=True,
)
request_query_begindate = api_client.QueryParameter(
    name="begindate",
    style=api_client.ParameterStyle.FORM,
    schema=BegindateSchema,
    explode=True,
)
request_query_cid = api_client.QueryParameter(
    name="cid",
    style=api_client.ParameterStyle.FORM,
    schema=CidSchema,
    explode=True,
)
request_query_comment_crediteatets = api_client.QueryParameter(
    name="commentCrediteatets",
    style=api_client.ParameterStyle.FORM,
    schema=CommentCrediteatetsSchema,
    explode=True,
)
request_query_comment_description = api_client.QueryParameter(
    name="commentDescription",
    style=api_client.ParameterStyle.FORM,
    schema=CommentDescriptionSchema,
    explode=True,
)
request_query_company_goal = api_client.QueryParameter(
    name="companyGoal",
    style=api_client.ParameterStyle.FORM,
    schema=CompanyGoalSchema,
    explode=True,
)
request_query_completion_ratio = api_client.QueryParameter(
    name="completionRatio",
    style=api_client.ParameterStyle.FORM,
    schema=CompletionRatioSchema,
    explode=True,
)
request_query_create_user_id = api_client.QueryParameter(
    name="createUserId",
    style=api_client.ParameterStyle.FORM,
    schema=CreateUserIdSchema,
    explode=True,
)
request_query_createts_date = api_client.QueryParameter(
    name="createts.date",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsDateSchema,
    explode=True,
)
request_query_createts_day = api_client.QueryParameter(
    name="createts.day",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsDaySchema,
    explode=True,
)
request_query_createts_hours = api_client.QueryParameter(
    name="createts.hours",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsHoursSchema,
    explode=True,
)
request_query_createts_minutes = api_client.QueryParameter(
    name="createts.minutes",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsMinutesSchema,
    explode=True,
)
request_query_createts_month = api_client.QueryParameter(
    name="createts.month",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsMonthSchema,
    explode=True,
)
request_query_createts_nanos = api_client.QueryParameter(
    name="createts.nanos",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsNanosSchema,
    explode=True,
)
request_query_createts_seconds = api_client.QueryParameter(
    name="createts.seconds",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsSecondsSchema,
    explode=True,
)
request_query_createts_time = api_client.QueryParameter(
    name="createts.time",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsTimeSchema,
    explode=True,
)
request_query_createts_timezone_offset = api_client.QueryParameter(
    name="createts.timezoneOffset",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsTimezoneOffsetSchema,
    explode=True,
)
request_query_createts_year = api_client.QueryParameter(
    name="createts.year",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsYearSchema,
    explode=True,
)
request_query_crediteatets = api_client.QueryParameter(
    name="crediteatets",
    style=api_client.ParameterStyle.FORM,
    schema=CrediteatetsSchema,
    explode=True,
)
request_query_current_value = api_client.QueryParameter(
    name="currentValue",
    style=api_client.ParameterStyle.FORM,
    schema=CurrentValueSchema,
    explode=True,
)
request_query_description = api_client.QueryParameter(
    name="description",
    style=api_client.ParameterStyle.FORM,
    schema=DescriptionSchema,
    explode=True,
)
request_query_disposition = api_client.QueryParameter(
    name="disposition",
    style=api_client.ParameterStyle.FORM,
    schema=DispositionSchema,
    explode=True,
)
request_query_elapsed_time_ratio = api_client.QueryParameter(
    name="elapsedTimeRatio",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeRatioSchema,
    explode=True,
)
request_query_goal_id = api_client.QueryParameter(
    name="goalId",
    style=api_client.ParameterStyle.FORM,
    schema=GoalIdSchema,
    explode=True,
)
request_query_goal_value = api_client.QueryParameter(
    name="goalValue",
    style=api_client.ParameterStyle.FORM,
    schema=GoalValueSchema,
    explode=True,
)
request_query_goal_weightage = api_client.QueryParameter(
    name="goalWeightage",
    style=api_client.ParameterStyle.FORM,
    schema=GoalWeightageSchema,
    explode=True,
)
request_query_has_goal_approval_permission = api_client.QueryParameter(
    name="hasGoalApprovalPermission",
    style=api_client.ParameterStyle.FORM,
    schema=HasGoalApprovalPermissionSchema,
    explode=True,
)
request_query_id = api_client.QueryParameter(
    name="id",
    style=api_client.ParameterStyle.FORM,
    schema=IdSchema,
    explode=True,
)
request_query_initialvalue = api_client.QueryParameter(
    name="initialvalue",
    style=api_client.ParameterStyle.FORM,
    schema=InitialvalueSchema,
    explode=True,
)
request_query_is_forward = api_client.QueryParameter(
    name="isForward",
    style=api_client.ParameterStyle.FORM,
    schema=IsForwardSchema,
    explode=True,
)
request_query_last_update_user_id = api_client.QueryParameter(
    name="lastUpdateUserId",
    style=api_client.ParameterStyle.FORM,
    schema=LastUpdateUserIdSchema,
    explode=True,
)
request_query_objective_id = api_client.QueryParameter(
    name="objectiveId",
    style=api_client.ParameterStyle.FORM,
    schema=ObjectiveIdSchema,
    explode=True,
)
request_query_parent_goal_id = api_client.QueryParameter(
    name="parentGoalId",
    style=api_client.ParameterStyle.FORM,
    schema=ParentGoalIdSchema,
    explode=True,
)
request_query_progress_ratio = api_client.QueryParameter(
    name="progressRatio",
    style=api_client.ParameterStyle.FORM,
    schema=ProgressRatioSchema,
    explode=True,
)
request_query_projectid = api_client.QueryParameter(
    name="projectid",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectidSchema,
    explode=True,
)
request_query_review_user_id = api_client.QueryParameter(
    name="reviewUserId",
    style=api_client.ParameterStyle.FORM,
    schema=ReviewUserIdSchema,
    explode=True,
)
request_query_state = api_client.QueryParameter(
    name="state",
    style=api_client.ParameterStyle.FORM,
    schema=StateSchema,
    explode=True,
)
request_query_status = api_client.QueryParameter(
    name="status",
    style=api_client.ParameterStyle.FORM,
    schema=StatusSchema,
    explode=True,
)
request_query_summary = api_client.QueryParameter(
    name="summary",
    style=api_client.ParameterStyle.FORM,
    schema=SummarySchema,
    explode=True,
)
request_query_target_date = api_client.QueryParameter(
    name="targetDate",
    style=api_client.ParameterStyle.FORM,
    schema=TargetDateSchema,
    explode=True,
)
request_query_typecode = api_client.QueryParameter(
    name="typecode",
    style=api_client.ParameterStyle.FORM,
    schema=TypecodeSchema,
    explode=True,
)
request_query_uname = api_client.QueryParameter(
    name="uname",
    style=api_client.ParameterStyle.FORM,
    schema=UnameSchema,
    explode=True,
)
request_query_units = api_client.QueryParameter(
    name="units",
    style=api_client.ParameterStyle.FORM,
    schema=UnitsSchema,
    explode=True,
)
request_query_visible_to_direct_reports = api_client.QueryParameter(
    name="visibleToDirectReports",
    style=api_client.ParameterStyle.FORM,
    schema=VisibleToDirectReportsSchema,
    explode=True,
)
_auth = [
    'sec0',
    'sec1',
]
SchemaFor200ResponseBody = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        '*/*': api_client.MediaType(
            schema=SchemaFor200ResponseBody),
    },
)


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
_status_code_to_response = {
    '200': _response_for_200,
    '201': _response_for_201,
    '401': _response_for_401,
    '403': _response_for_403,
    '404': _response_for_404,
}
_all_accept_content_types = (
    '*/*',
)


class BaseApi(api_client.Api):

    def _create_new_goal_mapped_args(
        self,
        additive: typing.Optional[int] = None,
        begindate: typing.Optional[date] = None,
        cid: typing.Optional[int] = None,
        comment_crediteatets: typing.Optional[str] = None,
        comment_description: typing.Optional[str] = None,
        company_goal: typing.Optional[int] = None,
        completion_ratio: typing.Optional[typing.Union[int, float]] = None,
        create_user_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        crediteatets: typing.Optional[datetime] = None,
        current_value: typing.Optional[typing.Union[int, float]] = None,
        description: typing.Optional[str] = None,
        disposition: typing.Optional[str] = None,
        elapsed_time_ratio: typing.Optional[typing.Union[int, float]] = None,
        goal_id: typing.Optional[int] = None,
        goal_value: typing.Optional[typing.Union[int, float]] = None,
        goal_weightage: typing.Optional[typing.Union[int, float]] = None,
        has_goal_approval_permission: typing.Optional[bool] = None,
        id: typing.Optional[int] = None,
        initialvalue: typing.Optional[typing.Union[int, float]] = None,
        is_forward: typing.Optional[bool] = None,
        last_update_user_id: typing.Optional[int] = None,
        objective_id: typing.Optional[int] = None,
        parent_goal_id: typing.Optional[int] = None,
        progress_ratio: typing.Optional[typing.Union[int, float]] = None,
        projectid: typing.Optional[int] = None,
        review_user_id: typing.Optional[int] = None,
        state: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        summary: typing.Optional[str] = None,
        target_date: typing.Optional[date] = None,
        typecode: typing.Optional[str] = None,
        uname: typing.Optional[str] = None,
        units: typing.Optional[str] = None,
        visible_to_direct_reports: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if additive is not None:
            _query_params["additive"] = additive
        if begindate is not None:
            _query_params["begindate"] = begindate
        if cid is not None:
            _query_params["cid"] = cid
        if comment_crediteatets is not None:
            _query_params["commentCrediteatets"] = comment_crediteatets
        if comment_description is not None:
            _query_params["commentDescription"] = comment_description
        if company_goal is not None:
            _query_params["companyGoal"] = company_goal
        if completion_ratio is not None:
            _query_params["completionRatio"] = completion_ratio
        if create_user_id is not None:
            _query_params["createUserId"] = create_user_id
        if createts_date is not None:
            _query_params["createts.date"] = createts_date
        if createts_day is not None:
            _query_params["createts.day"] = createts_day
        if createts_hours is not None:
            _query_params["createts.hours"] = createts_hours
        if createts_minutes is not None:
            _query_params["createts.minutes"] = createts_minutes
        if createts_month is not None:
            _query_params["createts.month"] = createts_month
        if createts_nanos is not None:
            _query_params["createts.nanos"] = createts_nanos
        if createts_seconds is not None:
            _query_params["createts.seconds"] = createts_seconds
        if createts_time is not None:
            _query_params["createts.time"] = createts_time
        if createts_timezone_offset is not None:
            _query_params["createts.timezoneOffset"] = createts_timezone_offset
        if createts_year is not None:
            _query_params["createts.year"] = createts_year
        if crediteatets is not None:
            _query_params["crediteatets"] = crediteatets
        if current_value is not None:
            _query_params["currentValue"] = current_value
        if description is not None:
            _query_params["description"] = description
        if disposition is not None:
            _query_params["disposition"] = disposition
        if elapsed_time_ratio is not None:
            _query_params["elapsedTimeRatio"] = elapsed_time_ratio
        if goal_id is not None:
            _query_params["goalId"] = goal_id
        if goal_value is not None:
            _query_params["goalValue"] = goal_value
        if goal_weightage is not None:
            _query_params["goalWeightage"] = goal_weightage
        if has_goal_approval_permission is not None:
            _query_params["hasGoalApprovalPermission"] = has_goal_approval_permission
        if id is not None:
            _query_params["id"] = id
        if initialvalue is not None:
            _query_params["initialvalue"] = initialvalue
        if is_forward is not None:
            _query_params["isForward"] = is_forward
        if last_update_user_id is not None:
            _query_params["lastUpdateUserId"] = last_update_user_id
        if objective_id is not None:
            _query_params["objectiveId"] = objective_id
        if parent_goal_id is not None:
            _query_params["parentGoalId"] = parent_goal_id
        if progress_ratio is not None:
            _query_params["progressRatio"] = progress_ratio
        if projectid is not None:
            _query_params["projectid"] = projectid
        if review_user_id is not None:
            _query_params["reviewUserId"] = review_user_id
        if state is not None:
            _query_params["state"] = state
        if status is not None:
            _query_params["status"] = status
        if summary is not None:
            _query_params["summary"] = summary
        if target_date is not None:
            _query_params["targetDate"] = target_date
        if typecode is not None:
            _query_params["typecode"] = typecode
        if uname is not None:
            _query_params["uname"] = uname
        if units is not None:
            _query_params["units"] = units
        if visible_to_direct_reports is not None:
            _query_params["visibleToDirectReports"] = visible_to_direct_reports
        args.query = _query_params
        return args

    async def _acreate_new_goal_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create new goal
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_additive,
            request_query_begindate,
            request_query_cid,
            request_query_comment_crediteatets,
            request_query_comment_description,
            request_query_company_goal,
            request_query_completion_ratio,
            request_query_create_user_id,
            request_query_createts_date,
            request_query_createts_day,
            request_query_createts_hours,
            request_query_createts_minutes,
            request_query_createts_month,
            request_query_createts_nanos,
            request_query_createts_seconds,
            request_query_createts_time,
            request_query_createts_timezone_offset,
            request_query_createts_year,
            request_query_crediteatets,
            request_query_current_value,
            request_query_description,
            request_query_disposition,
            request_query_elapsed_time_ratio,
            request_query_goal_id,
            request_query_goal_value,
            request_query_goal_weightage,
            request_query_has_goal_approval_permission,
            request_query_id,
            request_query_initialvalue,
            request_query_is_forward,
            request_query_last_update_user_id,
            request_query_objective_id,
            request_query_parent_goal_id,
            request_query_progress_ratio,
            request_query_projectid,
            request_query_review_user_id,
            request_query_state,
            request_query_status,
            request_query_summary,
            request_query_target_date,
            request_query_typecode,
            request_query_uname,
            request_query_units,
            request_query_visible_to_direct_reports,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/goal',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_new_goal_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create new goal
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_additive,
            request_query_begindate,
            request_query_cid,
            request_query_comment_crediteatets,
            request_query_comment_description,
            request_query_company_goal,
            request_query_completion_ratio,
            request_query_create_user_id,
            request_query_createts_date,
            request_query_createts_day,
            request_query_createts_hours,
            request_query_createts_minutes,
            request_query_createts_month,
            request_query_createts_nanos,
            request_query_createts_seconds,
            request_query_createts_time,
            request_query_createts_timezone_offset,
            request_query_createts_year,
            request_query_crediteatets,
            request_query_current_value,
            request_query_description,
            request_query_disposition,
            request_query_elapsed_time_ratio,
            request_query_goal_id,
            request_query_goal_value,
            request_query_goal_weightage,
            request_query_has_goal_approval_permission,
            request_query_id,
            request_query_initialvalue,
            request_query_is_forward,
            request_query_last_update_user_id,
            request_query_objective_id,
            request_query_parent_goal_id,
            request_query_progress_ratio,
            request_query_projectid,
            request_query_review_user_id,
            request_query_state,
            request_query_status,
            request_query_summary,
            request_query_target_date,
            request_query_typecode,
            request_query_uname,
            request_query_units,
            request_query_visible_to_direct_reports,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/goal',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateNewGoalRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_new_goal(
        self,
        additive: typing.Optional[int] = None,
        begindate: typing.Optional[date] = None,
        cid: typing.Optional[int] = None,
        comment_crediteatets: typing.Optional[str] = None,
        comment_description: typing.Optional[str] = None,
        company_goal: typing.Optional[int] = None,
        completion_ratio: typing.Optional[typing.Union[int, float]] = None,
        create_user_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        crediteatets: typing.Optional[datetime] = None,
        current_value: typing.Optional[typing.Union[int, float]] = None,
        description: typing.Optional[str] = None,
        disposition: typing.Optional[str] = None,
        elapsed_time_ratio: typing.Optional[typing.Union[int, float]] = None,
        goal_id: typing.Optional[int] = None,
        goal_value: typing.Optional[typing.Union[int, float]] = None,
        goal_weightage: typing.Optional[typing.Union[int, float]] = None,
        has_goal_approval_permission: typing.Optional[bool] = None,
        id: typing.Optional[int] = None,
        initialvalue: typing.Optional[typing.Union[int, float]] = None,
        is_forward: typing.Optional[bool] = None,
        last_update_user_id: typing.Optional[int] = None,
        objective_id: typing.Optional[int] = None,
        parent_goal_id: typing.Optional[int] = None,
        progress_ratio: typing.Optional[typing.Union[int, float]] = None,
        projectid: typing.Optional[int] = None,
        review_user_id: typing.Optional[int] = None,
        state: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        summary: typing.Optional[str] = None,
        target_date: typing.Optional[date] = None,
        typecode: typing.Optional[str] = None,
        uname: typing.Optional[str] = None,
        units: typing.Optional[str] = None,
        visible_to_direct_reports: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_goal_mapped_args(
            additive=additive,
            begindate=begindate,
            cid=cid,
            comment_crediteatets=comment_crediteatets,
            comment_description=comment_description,
            company_goal=company_goal,
            completion_ratio=completion_ratio,
            create_user_id=create_user_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            crediteatets=crediteatets,
            current_value=current_value,
            description=description,
            disposition=disposition,
            elapsed_time_ratio=elapsed_time_ratio,
            goal_id=goal_id,
            goal_value=goal_value,
            goal_weightage=goal_weightage,
            has_goal_approval_permission=has_goal_approval_permission,
            id=id,
            initialvalue=initialvalue,
            is_forward=is_forward,
            last_update_user_id=last_update_user_id,
            objective_id=objective_id,
            parent_goal_id=parent_goal_id,
            progress_ratio=progress_ratio,
            projectid=projectid,
            review_user_id=review_user_id,
            state=state,
            status=status,
            summary=summary,
            target_date=target_date,
            typecode=typecode,
            uname=uname,
            units=units,
            visible_to_direct_reports=visible_to_direct_reports,
        )
        return await self._acreate_new_goal_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def create_new_goal(
        self,
        additive: typing.Optional[int] = None,
        begindate: typing.Optional[date] = None,
        cid: typing.Optional[int] = None,
        comment_crediteatets: typing.Optional[str] = None,
        comment_description: typing.Optional[str] = None,
        company_goal: typing.Optional[int] = None,
        completion_ratio: typing.Optional[typing.Union[int, float]] = None,
        create_user_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        crediteatets: typing.Optional[datetime] = None,
        current_value: typing.Optional[typing.Union[int, float]] = None,
        description: typing.Optional[str] = None,
        disposition: typing.Optional[str] = None,
        elapsed_time_ratio: typing.Optional[typing.Union[int, float]] = None,
        goal_id: typing.Optional[int] = None,
        goal_value: typing.Optional[typing.Union[int, float]] = None,
        goal_weightage: typing.Optional[typing.Union[int, float]] = None,
        has_goal_approval_permission: typing.Optional[bool] = None,
        id: typing.Optional[int] = None,
        initialvalue: typing.Optional[typing.Union[int, float]] = None,
        is_forward: typing.Optional[bool] = None,
        last_update_user_id: typing.Optional[int] = None,
        objective_id: typing.Optional[int] = None,
        parent_goal_id: typing.Optional[int] = None,
        progress_ratio: typing.Optional[typing.Union[int, float]] = None,
        projectid: typing.Optional[int] = None,
        review_user_id: typing.Optional[int] = None,
        state: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        summary: typing.Optional[str] = None,
        target_date: typing.Optional[date] = None,
        typecode: typing.Optional[str] = None,
        uname: typing.Optional[str] = None,
        units: typing.Optional[str] = None,
        visible_to_direct_reports: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_goal_mapped_args(
            additive=additive,
            begindate=begindate,
            cid=cid,
            comment_crediteatets=comment_crediteatets,
            comment_description=comment_description,
            company_goal=company_goal,
            completion_ratio=completion_ratio,
            create_user_id=create_user_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            crediteatets=crediteatets,
            current_value=current_value,
            description=description,
            disposition=disposition,
            elapsed_time_ratio=elapsed_time_ratio,
            goal_id=goal_id,
            goal_value=goal_value,
            goal_weightage=goal_weightage,
            has_goal_approval_permission=has_goal_approval_permission,
            id=id,
            initialvalue=initialvalue,
            is_forward=is_forward,
            last_update_user_id=last_update_user_id,
            objective_id=objective_id,
            parent_goal_id=parent_goal_id,
            progress_ratio=progress_ratio,
            projectid=projectid,
            review_user_id=review_user_id,
            state=state,
            status=status,
            summary=summary,
            target_date=target_date,
            typecode=typecode,
            uname=uname,
            units=units,
            visible_to_direct_reports=visible_to_direct_reports,
        )
        return self._create_new_goal_oapg(
            query_params=args.query,
        )

class CreateNewGoal(BaseApi):

    async def acreate_new_goal(
        self,
        additive: typing.Optional[int] = None,
        begindate: typing.Optional[date] = None,
        cid: typing.Optional[int] = None,
        comment_crediteatets: typing.Optional[str] = None,
        comment_description: typing.Optional[str] = None,
        company_goal: typing.Optional[int] = None,
        completion_ratio: typing.Optional[typing.Union[int, float]] = None,
        create_user_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        crediteatets: typing.Optional[datetime] = None,
        current_value: typing.Optional[typing.Union[int, float]] = None,
        description: typing.Optional[str] = None,
        disposition: typing.Optional[str] = None,
        elapsed_time_ratio: typing.Optional[typing.Union[int, float]] = None,
        goal_id: typing.Optional[int] = None,
        goal_value: typing.Optional[typing.Union[int, float]] = None,
        goal_weightage: typing.Optional[typing.Union[int, float]] = None,
        has_goal_approval_permission: typing.Optional[bool] = None,
        id: typing.Optional[int] = None,
        initialvalue: typing.Optional[typing.Union[int, float]] = None,
        is_forward: typing.Optional[bool] = None,
        last_update_user_id: typing.Optional[int] = None,
        objective_id: typing.Optional[int] = None,
        parent_goal_id: typing.Optional[int] = None,
        progress_ratio: typing.Optional[typing.Union[int, float]] = None,
        projectid: typing.Optional[int] = None,
        review_user_id: typing.Optional[int] = None,
        state: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        summary: typing.Optional[str] = None,
        target_date: typing.Optional[date] = None,
        typecode: typing.Optional[str] = None,
        uname: typing.Optional[str] = None,
        units: typing.Optional[str] = None,
        visible_to_direct_reports: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.acreate_new_goal(
            additive=additive,
            begindate=begindate,
            cid=cid,
            comment_crediteatets=comment_crediteatets,
            comment_description=comment_description,
            company_goal=company_goal,
            completion_ratio=completion_ratio,
            create_user_id=create_user_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            crediteatets=crediteatets,
            current_value=current_value,
            description=description,
            disposition=disposition,
            elapsed_time_ratio=elapsed_time_ratio,
            goal_id=goal_id,
            goal_value=goal_value,
            goal_weightage=goal_weightage,
            has_goal_approval_permission=has_goal_approval_permission,
            id=id,
            initialvalue=initialvalue,
            is_forward=is_forward,
            last_update_user_id=last_update_user_id,
            objective_id=objective_id,
            parent_goal_id=parent_goal_id,
            progress_ratio=progress_ratio,
            projectid=projectid,
            review_user_id=review_user_id,
            state=state,
            status=status,
            summary=summary,
            target_date=target_date,
            typecode=typecode,
            uname=uname,
            units=units,
            visible_to_direct_reports=visible_to_direct_reports,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def create_new_goal(
        self,
        additive: typing.Optional[int] = None,
        begindate: typing.Optional[date] = None,
        cid: typing.Optional[int] = None,
        comment_crediteatets: typing.Optional[str] = None,
        comment_description: typing.Optional[str] = None,
        company_goal: typing.Optional[int] = None,
        completion_ratio: typing.Optional[typing.Union[int, float]] = None,
        create_user_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        crediteatets: typing.Optional[datetime] = None,
        current_value: typing.Optional[typing.Union[int, float]] = None,
        description: typing.Optional[str] = None,
        disposition: typing.Optional[str] = None,
        elapsed_time_ratio: typing.Optional[typing.Union[int, float]] = None,
        goal_id: typing.Optional[int] = None,
        goal_value: typing.Optional[typing.Union[int, float]] = None,
        goal_weightage: typing.Optional[typing.Union[int, float]] = None,
        has_goal_approval_permission: typing.Optional[bool] = None,
        id: typing.Optional[int] = None,
        initialvalue: typing.Optional[typing.Union[int, float]] = None,
        is_forward: typing.Optional[bool] = None,
        last_update_user_id: typing.Optional[int] = None,
        objective_id: typing.Optional[int] = None,
        parent_goal_id: typing.Optional[int] = None,
        progress_ratio: typing.Optional[typing.Union[int, float]] = None,
        projectid: typing.Optional[int] = None,
        review_user_id: typing.Optional[int] = None,
        state: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        summary: typing.Optional[str] = None,
        target_date: typing.Optional[date] = None,
        typecode: typing.Optional[str] = None,
        uname: typing.Optional[str] = None,
        units: typing.Optional[str] = None,
        visible_to_direct_reports: typing.Optional[int] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.create_new_goal(
            additive=additive,
            begindate=begindate,
            cid=cid,
            comment_crediteatets=comment_crediteatets,
            comment_description=comment_description,
            company_goal=company_goal,
            completion_ratio=completion_ratio,
            create_user_id=create_user_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            crediteatets=crediteatets,
            current_value=current_value,
            description=description,
            disposition=disposition,
            elapsed_time_ratio=elapsed_time_ratio,
            goal_id=goal_id,
            goal_value=goal_value,
            goal_weightage=goal_weightage,
            has_goal_approval_permission=has_goal_approval_permission,
            id=id,
            initialvalue=initialvalue,
            is_forward=is_forward,
            last_update_user_id=last_update_user_id,
            objective_id=objective_id,
            parent_goal_id=parent_goal_id,
            progress_ratio=progress_ratio,
            projectid=projectid,
            review_user_id=review_user_id,
            state=state,
            status=status,
            summary=summary,
            target_date=target_date,
            typecode=typecode,
            uname=uname,
            units=units,
            visible_to_direct_reports=visible_to_direct_reports,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        additive: typing.Optional[int] = None,
        begindate: typing.Optional[date] = None,
        cid: typing.Optional[int] = None,
        comment_crediteatets: typing.Optional[str] = None,
        comment_description: typing.Optional[str] = None,
        company_goal: typing.Optional[int] = None,
        completion_ratio: typing.Optional[typing.Union[int, float]] = None,
        create_user_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        crediteatets: typing.Optional[datetime] = None,
        current_value: typing.Optional[typing.Union[int, float]] = None,
        description: typing.Optional[str] = None,
        disposition: typing.Optional[str] = None,
        elapsed_time_ratio: typing.Optional[typing.Union[int, float]] = None,
        goal_id: typing.Optional[int] = None,
        goal_value: typing.Optional[typing.Union[int, float]] = None,
        goal_weightage: typing.Optional[typing.Union[int, float]] = None,
        has_goal_approval_permission: typing.Optional[bool] = None,
        id: typing.Optional[int] = None,
        initialvalue: typing.Optional[typing.Union[int, float]] = None,
        is_forward: typing.Optional[bool] = None,
        last_update_user_id: typing.Optional[int] = None,
        objective_id: typing.Optional[int] = None,
        parent_goal_id: typing.Optional[int] = None,
        progress_ratio: typing.Optional[typing.Union[int, float]] = None,
        projectid: typing.Optional[int] = None,
        review_user_id: typing.Optional[int] = None,
        state: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        summary: typing.Optional[str] = None,
        target_date: typing.Optional[date] = None,
        typecode: typing.Optional[str] = None,
        uname: typing.Optional[str] = None,
        units: typing.Optional[str] = None,
        visible_to_direct_reports: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_goal_mapped_args(
            additive=additive,
            begindate=begindate,
            cid=cid,
            comment_crediteatets=comment_crediteatets,
            comment_description=comment_description,
            company_goal=company_goal,
            completion_ratio=completion_ratio,
            create_user_id=create_user_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            crediteatets=crediteatets,
            current_value=current_value,
            description=description,
            disposition=disposition,
            elapsed_time_ratio=elapsed_time_ratio,
            goal_id=goal_id,
            goal_value=goal_value,
            goal_weightage=goal_weightage,
            has_goal_approval_permission=has_goal_approval_permission,
            id=id,
            initialvalue=initialvalue,
            is_forward=is_forward,
            last_update_user_id=last_update_user_id,
            objective_id=objective_id,
            parent_goal_id=parent_goal_id,
            progress_ratio=progress_ratio,
            projectid=projectid,
            review_user_id=review_user_id,
            state=state,
            status=status,
            summary=summary,
            target_date=target_date,
            typecode=typecode,
            uname=uname,
            units=units,
            visible_to_direct_reports=visible_to_direct_reports,
        )
        return await self._acreate_new_goal_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        additive: typing.Optional[int] = None,
        begindate: typing.Optional[date] = None,
        cid: typing.Optional[int] = None,
        comment_crediteatets: typing.Optional[str] = None,
        comment_description: typing.Optional[str] = None,
        company_goal: typing.Optional[int] = None,
        completion_ratio: typing.Optional[typing.Union[int, float]] = None,
        create_user_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        crediteatets: typing.Optional[datetime] = None,
        current_value: typing.Optional[typing.Union[int, float]] = None,
        description: typing.Optional[str] = None,
        disposition: typing.Optional[str] = None,
        elapsed_time_ratio: typing.Optional[typing.Union[int, float]] = None,
        goal_id: typing.Optional[int] = None,
        goal_value: typing.Optional[typing.Union[int, float]] = None,
        goal_weightage: typing.Optional[typing.Union[int, float]] = None,
        has_goal_approval_permission: typing.Optional[bool] = None,
        id: typing.Optional[int] = None,
        initialvalue: typing.Optional[typing.Union[int, float]] = None,
        is_forward: typing.Optional[bool] = None,
        last_update_user_id: typing.Optional[int] = None,
        objective_id: typing.Optional[int] = None,
        parent_goal_id: typing.Optional[int] = None,
        progress_ratio: typing.Optional[typing.Union[int, float]] = None,
        projectid: typing.Optional[int] = None,
        review_user_id: typing.Optional[int] = None,
        state: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        summary: typing.Optional[str] = None,
        target_date: typing.Optional[date] = None,
        typecode: typing.Optional[str] = None,
        uname: typing.Optional[str] = None,
        units: typing.Optional[str] = None,
        visible_to_direct_reports: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_goal_mapped_args(
            additive=additive,
            begindate=begindate,
            cid=cid,
            comment_crediteatets=comment_crediteatets,
            comment_description=comment_description,
            company_goal=company_goal,
            completion_ratio=completion_ratio,
            create_user_id=create_user_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            crediteatets=crediteatets,
            current_value=current_value,
            description=description,
            disposition=disposition,
            elapsed_time_ratio=elapsed_time_ratio,
            goal_id=goal_id,
            goal_value=goal_value,
            goal_weightage=goal_weightage,
            has_goal_approval_permission=has_goal_approval_permission,
            id=id,
            initialvalue=initialvalue,
            is_forward=is_forward,
            last_update_user_id=last_update_user_id,
            objective_id=objective_id,
            parent_goal_id=parent_goal_id,
            progress_ratio=progress_ratio,
            projectid=projectid,
            review_user_id=review_user_id,
            state=state,
            status=status,
            summary=summary,
            target_date=target_date,
            typecode=typecode,
            uname=uname,
            units=units,
            visible_to_direct_reports=visible_to_direct_reports,
        )
        return self._create_new_goal_oapg(
            query_params=args.query,
        )


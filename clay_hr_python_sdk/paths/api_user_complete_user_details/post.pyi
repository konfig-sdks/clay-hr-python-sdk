# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401

from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details401_response import PeopleAndPermissionsCreateOrUpdateUserDetails401Response as PeopleAndPermissionsCreateOrUpdateUserDetails401ResponseSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details_request_address_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details201_response import PeopleAndPermissionsCreateOrUpdateUserDetails201Response as PeopleAndPermissionsCreateOrUpdateUserDetails201ResponseSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details_request_financial_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details_request_education_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details_request import PeopleAndPermissionsCreateOrUpdateUserDetailsRequest as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details400_response import PeopleAndPermissionsCreateOrUpdateUserDetails400Response as PeopleAndPermissionsCreateOrUpdateUserDetails400ResponseSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details_request_reports_to_email import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmailSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details_request_contact_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListSchema
from clay_hr_python_sdk.model.people_and_permissions_create_or_update_user_details409_response import PeopleAndPermissionsCreateOrUpdateUserDetails409Response as PeopleAndPermissionsCreateOrUpdateUserDetails409ResponseSchema

from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details_request_education_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details409_response import PeopleAndPermissionsCreateOrUpdateUserDetails409Response
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details400_response import PeopleAndPermissionsCreateOrUpdateUserDetails400Response
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details_request_reports_to_email import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details_request import PeopleAndPermissionsCreateOrUpdateUserDetailsRequest
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details401_response import PeopleAndPermissionsCreateOrUpdateUserDetails401Response
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details_request_financial_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details_request_address_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details_request_contact_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList
from clay_hr_python_sdk.type.people_and_permissions_create_or_update_user_details201_response import PeopleAndPermissionsCreateOrUpdateUserDetails201Response

from ...api_client import Dictionary
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details_request_contact_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactListPydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details_request_reports_to_email import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmailPydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details_request_financial_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListPydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details400_response import PeopleAndPermissionsCreateOrUpdateUserDetails400Response as PeopleAndPermissionsCreateOrUpdateUserDetails400ResponsePydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details401_response import PeopleAndPermissionsCreateOrUpdateUserDetails401Response as PeopleAndPermissionsCreateOrUpdateUserDetails401ResponsePydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details201_response import PeopleAndPermissionsCreateOrUpdateUserDetails201Response as PeopleAndPermissionsCreateOrUpdateUserDetails201ResponsePydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details409_response import PeopleAndPermissionsCreateOrUpdateUserDetails409Response as PeopleAndPermissionsCreateOrUpdateUserDetails409ResponsePydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details_request import PeopleAndPermissionsCreateOrUpdateUserDetailsRequest as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestPydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details_request_address_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListPydantic
from clay_hr_python_sdk.pydantic.people_and_permissions_create_or_update_user_details_request_education_list import PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList as PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationListPydantic

# body param
SchemaForRequestBodyApplicationJson = PeopleAndPermissionsCreateOrUpdateUserDetailsRequestSchema


request_body_people_and_permissions_create_or_update_user_details_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor201ResponseBodyApplicationJson = PeopleAndPermissionsCreateOrUpdateUserDetails201ResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails201Response


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails201Response


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = PeopleAndPermissionsCreateOrUpdateUserDetails400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = PeopleAndPermissionsCreateOrUpdateUserDetails401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor409ResponseBodyApplicationJson = PeopleAndPermissionsCreateOrUpdateUserDetails409ResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails409Response


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: PeopleAndPermissionsCreateOrUpdateUserDetails409Response


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_or_update_user_details_mapped_args(
        self,
        first_name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        gender: typing.Optional[str] = None,
        guid: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        name_pronunciation: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        worker_type: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        location_name: typing.Optional[str] = None,
        user_start_date: typing.Optional[str] = None,
        reports_to_email: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail] = None,
        address_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList] = None,
        education_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList] = None,
        contact_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList] = None,
        financial_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList] = None,
        custom_field_values: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if first_name is not None:
            _body["firstName"] = first_name
        if email is not None:
            _body["email"] = email
        if last_name is not None:
            _body["lastName"] = last_name
        if emp_id is not None:
            _body["empId"] = emp_id
        if gender is not None:
            _body["gender"] = gender
        if guid is not None:
            _body["guid"] = guid
        if status is not None:
            _body["status"] = status
        if display_full_name is not None:
            _body["displayFullName"] = display_full_name
        if middle_name is not None:
            _body["middleName"] = middle_name
        if second_last_name is not None:
            _body["secondLastName"] = second_last_name
        if short_name is not None:
            _body["shortName"] = short_name
        if name_pronunciation is not None:
            _body["namePronunciation"] = name_pronunciation
        if family_suffix is not None:
            _body["familySuffix"] = family_suffix
        if worker_type is not None:
            _body["workerType"] = worker_type
        if user_date_of_birth is not None:
            _body["userDateOfBirth"] = user_date_of_birth
        if phone is not None:
            _body["phone"] = phone
        if cell_phone is not None:
            _body["cellPhone"] = cell_phone
        if position is not None:
            _body["position"] = position
        if department_id is not None:
            _body["departmentID"] = department_id
        if location_id is not None:
            _body["locationId"] = location_id
        if location_name is not None:
            _body["locationName"] = location_name
        if user_start_date is not None:
            _body["userStartDate"] = user_start_date
        if reports_to_email is not None:
            _body["reportsToEmail"] = reports_to_email
        if address_list is not None:
            _body["addressList"] = address_list
        if education_list is not None:
            _body["educationList"] = education_list
        if contact_list is not None:
            _body["contactList"] = contact_list
        if financial_list is not None:
            _body["financialList"] = financial_list
        if custom_field_values is not None:
            _body["customFieldValues"] = custom_field_values
        args.body = _body
        return args

    async def _acreate_or_update_user_details_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create or Update user
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/user/completeUserDetails',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_people_and_permissions_create_or_update_user_details_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_or_update_user_details_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create or Update user
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/user/completeUserDetails',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_people_and_permissions_create_or_update_user_details_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateOrUpdateUserDetailsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_or_update_user_details(
        self,
        first_name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        gender: typing.Optional[str] = None,
        guid: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        name_pronunciation: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        worker_type: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        location_name: typing.Optional[str] = None,
        user_start_date: typing.Optional[str] = None,
        reports_to_email: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail] = None,
        address_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList] = None,
        education_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList] = None,
        contact_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList] = None,
        financial_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList] = None,
        custom_field_values: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_or_update_user_details_mapped_args(
            first_name=first_name,
            email=email,
            last_name=last_name,
            emp_id=emp_id,
            gender=gender,
            guid=guid,
            status=status,
            display_full_name=display_full_name,
            middle_name=middle_name,
            second_last_name=second_last_name,
            short_name=short_name,
            name_pronunciation=name_pronunciation,
            family_suffix=family_suffix,
            worker_type=worker_type,
            user_date_of_birth=user_date_of_birth,
            phone=phone,
            cell_phone=cell_phone,
            position=position,
            department_id=department_id,
            location_id=location_id,
            location_name=location_name,
            user_start_date=user_start_date,
            reports_to_email=reports_to_email,
            address_list=address_list,
            education_list=education_list,
            contact_list=contact_list,
            financial_list=financial_list,
            custom_field_values=custom_field_values,
        )
        return await self._acreate_or_update_user_details_oapg(
            body=args.body,
            **kwargs,
        )
    
    def create_or_update_user_details(
        self,
        first_name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        gender: typing.Optional[str] = None,
        guid: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        name_pronunciation: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        worker_type: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        location_name: typing.Optional[str] = None,
        user_start_date: typing.Optional[str] = None,
        reports_to_email: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail] = None,
        address_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList] = None,
        education_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList] = None,
        contact_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList] = None,
        financial_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList] = None,
        custom_field_values: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_or_update_user_details_mapped_args(
            first_name=first_name,
            email=email,
            last_name=last_name,
            emp_id=emp_id,
            gender=gender,
            guid=guid,
            status=status,
            display_full_name=display_full_name,
            middle_name=middle_name,
            second_last_name=second_last_name,
            short_name=short_name,
            name_pronunciation=name_pronunciation,
            family_suffix=family_suffix,
            worker_type=worker_type,
            user_date_of_birth=user_date_of_birth,
            phone=phone,
            cell_phone=cell_phone,
            position=position,
            department_id=department_id,
            location_id=location_id,
            location_name=location_name,
            user_start_date=user_start_date,
            reports_to_email=reports_to_email,
            address_list=address_list,
            education_list=education_list,
            contact_list=contact_list,
            financial_list=financial_list,
            custom_field_values=custom_field_values,
        )
        return self._create_or_update_user_details_oapg(
            body=args.body,
        )

class CreateOrUpdateUserDetails(BaseApi):

    async def acreate_or_update_user_details(
        self,
        first_name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        gender: typing.Optional[str] = None,
        guid: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        name_pronunciation: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        worker_type: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        location_name: typing.Optional[str] = None,
        user_start_date: typing.Optional[str] = None,
        reports_to_email: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail] = None,
        address_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList] = None,
        education_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList] = None,
        contact_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList] = None,
        financial_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList] = None,
        custom_field_values: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.acreate_or_update_user_details(
            first_name=first_name,
            email=email,
            last_name=last_name,
            emp_id=emp_id,
            gender=gender,
            guid=guid,
            status=status,
            display_full_name=display_full_name,
            middle_name=middle_name,
            second_last_name=second_last_name,
            short_name=short_name,
            name_pronunciation=name_pronunciation,
            family_suffix=family_suffix,
            worker_type=worker_type,
            user_date_of_birth=user_date_of_birth,
            phone=phone,
            cell_phone=cell_phone,
            position=position,
            department_id=department_id,
            location_id=location_id,
            location_name=location_name,
            user_start_date=user_start_date,
            reports_to_email=reports_to_email,
            address_list=address_list,
            education_list=education_list,
            contact_list=contact_list,
            financial_list=financial_list,
            custom_field_values=custom_field_values,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def create_or_update_user_details(
        self,
        first_name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        gender: typing.Optional[str] = None,
        guid: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        name_pronunciation: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        worker_type: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        location_name: typing.Optional[str] = None,
        user_start_date: typing.Optional[str] = None,
        reports_to_email: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail] = None,
        address_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList] = None,
        education_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList] = None,
        contact_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList] = None,
        financial_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList] = None,
        custom_field_values: typing.Optional[str] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.create_or_update_user_details(
            first_name=first_name,
            email=email,
            last_name=last_name,
            emp_id=emp_id,
            gender=gender,
            guid=guid,
            status=status,
            display_full_name=display_full_name,
            middle_name=middle_name,
            second_last_name=second_last_name,
            short_name=short_name,
            name_pronunciation=name_pronunciation,
            family_suffix=family_suffix,
            worker_type=worker_type,
            user_date_of_birth=user_date_of_birth,
            phone=phone,
            cell_phone=cell_phone,
            position=position,
            department_id=department_id,
            location_id=location_id,
            location_name=location_name,
            user_start_date=user_start_date,
            reports_to_email=reports_to_email,
            address_list=address_list,
            education_list=education_list,
            contact_list=contact_list,
            financial_list=financial_list,
            custom_field_values=custom_field_values,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        first_name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        gender: typing.Optional[str] = None,
        guid: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        name_pronunciation: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        worker_type: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        location_name: typing.Optional[str] = None,
        user_start_date: typing.Optional[str] = None,
        reports_to_email: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail] = None,
        address_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList] = None,
        education_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList] = None,
        contact_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList] = None,
        financial_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList] = None,
        custom_field_values: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_or_update_user_details_mapped_args(
            first_name=first_name,
            email=email,
            last_name=last_name,
            emp_id=emp_id,
            gender=gender,
            guid=guid,
            status=status,
            display_full_name=display_full_name,
            middle_name=middle_name,
            second_last_name=second_last_name,
            short_name=short_name,
            name_pronunciation=name_pronunciation,
            family_suffix=family_suffix,
            worker_type=worker_type,
            user_date_of_birth=user_date_of_birth,
            phone=phone,
            cell_phone=cell_phone,
            position=position,
            department_id=department_id,
            location_id=location_id,
            location_name=location_name,
            user_start_date=user_start_date,
            reports_to_email=reports_to_email,
            address_list=address_list,
            education_list=education_list,
            contact_list=contact_list,
            financial_list=financial_list,
            custom_field_values=custom_field_values,
        )
        return await self._acreate_or_update_user_details_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        first_name: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        gender: typing.Optional[str] = None,
        guid: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        name_pronunciation: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        worker_type: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        position: typing.Optional[int] = None,
        department_id: typing.Optional[int] = None,
        location_id: typing.Optional[int] = None,
        location_name: typing.Optional[str] = None,
        user_start_date: typing.Optional[str] = None,
        reports_to_email: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestReportsToEmail] = None,
        address_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressList] = None,
        education_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestEducationList] = None,
        contact_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestContactList] = None,
        financial_list: typing.Optional[PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialList] = None,
        custom_field_values: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_or_update_user_details_mapped_args(
            first_name=first_name,
            email=email,
            last_name=last_name,
            emp_id=emp_id,
            gender=gender,
            guid=guid,
            status=status,
            display_full_name=display_full_name,
            middle_name=middle_name,
            second_last_name=second_last_name,
            short_name=short_name,
            name_pronunciation=name_pronunciation,
            family_suffix=family_suffix,
            worker_type=worker_type,
            user_date_of_birth=user_date_of_birth,
            phone=phone,
            cell_phone=cell_phone,
            position=position,
            department_id=department_id,
            location_id=location_id,
            location_name=location_name,
            user_start_date=user_start_date,
            reports_to_email=reports_to_email,
            address_list=address_list,
            education_list=education_list,
            contact_list=contact_list,
            financial_list=financial_list,
            custom_field_values=custom_field_values,
        )
        return self._create_or_update_user_details_oapg(
            body=args.body,
        )


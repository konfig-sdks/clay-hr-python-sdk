# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401



from ...api_client import Dictionary

# Query params
TemplateIdSchema = schemas.StrSchema
ReviewTypeSchema = schemas.StrSchema
StartDateSchema = schemas.StrSchema
EndDateSchema = schemas.StrSchema
ImportGoalsSchema = schemas.StrSchema
ImportJobProfileSkillsSchema = schemas.StrSchema
ImportSkillsSchema = schemas.StrSchema
UserIdListSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'templateId': typing.Union[TemplateIdSchema, str, ],
        'reviewType': typing.Union[ReviewTypeSchema, str, ],
        'startDate': typing.Union[StartDateSchema, str, ],
        'endDate': typing.Union[EndDateSchema, str, ],
        'importGoals': typing.Union[ImportGoalsSchema, str, ],
        'importJobProfileSkills': typing.Union[ImportJobProfileSkillsSchema, str, ],
        'importSkills': typing.Union[ImportSkillsSchema, str, ],
        'userIdList': typing.Union[UserIdListSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_template_id = api_client.QueryParameter(
    name="templateId",
    style=api_client.ParameterStyle.FORM,
    schema=TemplateIdSchema,
    explode=True,
)
request_query_review_type = api_client.QueryParameter(
    name="reviewType",
    style=api_client.ParameterStyle.FORM,
    schema=ReviewTypeSchema,
    explode=True,
)
request_query_start_date = api_client.QueryParameter(
    name="startDate",
    style=api_client.ParameterStyle.FORM,
    schema=StartDateSchema,
    explode=True,
)
request_query_end_date = api_client.QueryParameter(
    name="endDate",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateSchema,
    explode=True,
)
request_query_import_goals = api_client.QueryParameter(
    name="importGoals",
    style=api_client.ParameterStyle.FORM,
    schema=ImportGoalsSchema,
    explode=True,
)
request_query_import_job_profile_skills = api_client.QueryParameter(
    name="importJobProfileSkills",
    style=api_client.ParameterStyle.FORM,
    schema=ImportJobProfileSkillsSchema,
    explode=True,
)
request_query_import_skills = api_client.QueryParameter(
    name="importSkills",
    style=api_client.ParameterStyle.FORM,
    schema=ImportSkillsSchema,
    explode=True,
)
request_query_user_id_list = api_client.QueryParameter(
    name="userIdList",
    style=api_client.ParameterStyle.FORM,
    schema=UserIdListSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _launch_performance_reviews_in_bulk_mapped_args(
        self,
        template_id: typing.Optional[str] = None,
        review_type: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        import_goals: typing.Optional[str] = None,
        import_job_profile_skills: typing.Optional[str] = None,
        import_skills: typing.Optional[str] = None,
        user_id_list: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if template_id is not None:
            _query_params["templateId"] = template_id
        if review_type is not None:
            _query_params["reviewType"] = review_type
        if start_date is not None:
            _query_params["startDate"] = start_date
        if end_date is not None:
            _query_params["endDate"] = end_date
        if import_goals is not None:
            _query_params["importGoals"] = import_goals
        if import_job_profile_skills is not None:
            _query_params["importJobProfileSkills"] = import_job_profile_skills
        if import_skills is not None:
            _query_params["importSkills"] = import_skills
        if user_id_list is not None:
            _query_params["userIdList"] = user_id_list
        args.query = _query_params
        return args

    async def _alaunch_performance_reviews_in_bulk_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Launch Performance Reviews In Bulk
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_template_id,
            request_query_review_type,
            request_query_start_date,
            request_query_end_date,
            request_query_import_goals,
            request_query_import_job_profile_skills,
            request_query_import_skills,
            request_query_user_id_list,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/appraisal/bulkLaunch',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _launch_performance_reviews_in_bulk_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Launch Performance Reviews In Bulk
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_template_id,
            request_query_review_type,
            request_query_start_date,
            request_query_end_date,
            request_query_import_goals,
            request_query_import_job_profile_skills,
            request_query_import_skills,
            request_query_user_id_list,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/appraisal/bulkLaunch',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class LaunchPerformanceReviewsInBulkRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def alaunch_performance_reviews_in_bulk(
        self,
        template_id: typing.Optional[str] = None,
        review_type: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        import_goals: typing.Optional[str] = None,
        import_job_profile_skills: typing.Optional[str] = None,
        import_skills: typing.Optional[str] = None,
        user_id_list: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._launch_performance_reviews_in_bulk_mapped_args(
            template_id=template_id,
            review_type=review_type,
            start_date=start_date,
            end_date=end_date,
            import_goals=import_goals,
            import_job_profile_skills=import_job_profile_skills,
            import_skills=import_skills,
            user_id_list=user_id_list,
        )
        return await self._alaunch_performance_reviews_in_bulk_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def launch_performance_reviews_in_bulk(
        self,
        template_id: typing.Optional[str] = None,
        review_type: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        import_goals: typing.Optional[str] = None,
        import_job_profile_skills: typing.Optional[str] = None,
        import_skills: typing.Optional[str] = None,
        user_id_list: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._launch_performance_reviews_in_bulk_mapped_args(
            template_id=template_id,
            review_type=review_type,
            start_date=start_date,
            end_date=end_date,
            import_goals=import_goals,
            import_job_profile_skills=import_job_profile_skills,
            import_skills=import_skills,
            user_id_list=user_id_list,
        )
        return self._launch_performance_reviews_in_bulk_oapg(
            query_params=args.query,
        )

class LaunchPerformanceReviewsInBulk(BaseApi):

    async def alaunch_performance_reviews_in_bulk(
        self,
        template_id: typing.Optional[str] = None,
        review_type: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        import_goals: typing.Optional[str] = None,
        import_job_profile_skills: typing.Optional[str] = None,
        import_skills: typing.Optional[str] = None,
        user_id_list: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.alaunch_performance_reviews_in_bulk(
            template_id=template_id,
            review_type=review_type,
            start_date=start_date,
            end_date=end_date,
            import_goals=import_goals,
            import_job_profile_skills=import_job_profile_skills,
            import_skills=import_skills,
            user_id_list=user_id_list,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def launch_performance_reviews_in_bulk(
        self,
        template_id: typing.Optional[str] = None,
        review_type: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        import_goals: typing.Optional[str] = None,
        import_job_profile_skills: typing.Optional[str] = None,
        import_skills: typing.Optional[str] = None,
        user_id_list: typing.Optional[str] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.launch_performance_reviews_in_bulk(
            template_id=template_id,
            review_type=review_type,
            start_date=start_date,
            end_date=end_date,
            import_goals=import_goals,
            import_job_profile_skills=import_job_profile_skills,
            import_skills=import_skills,
            user_id_list=user_id_list,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        template_id: typing.Optional[str] = None,
        review_type: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        import_goals: typing.Optional[str] = None,
        import_job_profile_skills: typing.Optional[str] = None,
        import_skills: typing.Optional[str] = None,
        user_id_list: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._launch_performance_reviews_in_bulk_mapped_args(
            template_id=template_id,
            review_type=review_type,
            start_date=start_date,
            end_date=end_date,
            import_goals=import_goals,
            import_job_profile_skills=import_job_profile_skills,
            import_skills=import_skills,
            user_id_list=user_id_list,
        )
        return await self._alaunch_performance_reviews_in_bulk_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        template_id: typing.Optional[str] = None,
        review_type: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        import_goals: typing.Optional[str] = None,
        import_job_profile_skills: typing.Optional[str] = None,
        import_skills: typing.Optional[str] = None,
        user_id_list: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._launch_performance_reviews_in_bulk_mapped_args(
            template_id=template_id,
            review_type=review_type,
            start_date=start_date,
            end_date=end_date,
            import_goals=import_goals,
            import_job_profile_skills=import_job_profile_skills,
            import_skills=import_skills,
            user_id_list=user_id_list,
        )
        return self._launch_performance_reviews_in_bulk_oapg(
            query_params=args.query,
        )


# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401



from ...api_client import Dictionary

# Query params
GuidSchema = schemas.StrSchema
EmailSchema = schemas.StrSchema
EmpIdSchema = schemas.StrSchema
FirstNameSchema = schemas.StrSchema
MiddleNameSchema = schemas.StrSchema
LastNameSchema = schemas.StrSchema
SecondLastNameSchema = schemas.StrSchema
DisplayFullNameSchema = schemas.StrSchema
CellPhoneSchema = schemas.StrSchema
PhoneSchema = schemas.StrSchema
FamilySuffixSchema = schemas.StrSchema
UserDateOfBirthSchema = schemas.DateSchema
JobGradeSchema = schemas.StrSchema
UserStartDateSchema = schemas.DateSchema
UserEndDateSchema = schemas.DateSchema
GenderSchema = schemas.StrSchema
PositionSchema = schemas.StrSchema
ProfileIdSchema = schemas.StrSchema
ShortNameSchema = schemas.StrSchema


class StatusSchema(
    schemas.EnumBase,
    schemas.StrSchema
):
    
    @schemas.classproperty
    def A(cls):
        return cls("A")
    
    @schemas.classproperty
    def I(cls):
        return cls("I")
    
    @schemas.classproperty
    def F(cls):
        return cls("F")
LocationNameSchema = schemas.StrSchema
LocationIdSchema = schemas.StrSchema
NotesSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'guid': typing.Union[GuidSchema, str, ],
        'email': typing.Union[EmailSchema, str, ],
        'empId': typing.Union[EmpIdSchema, str, ],
        'firstName': typing.Union[FirstNameSchema, str, ],
        'middleName': typing.Union[MiddleNameSchema, str, ],
        'lastName': typing.Union[LastNameSchema, str, ],
        'secondLastName': typing.Union[SecondLastNameSchema, str, ],
        'displayFullName': typing.Union[DisplayFullNameSchema, str, ],
        'cellPhone': typing.Union[CellPhoneSchema, str, ],
        'phone': typing.Union[PhoneSchema, str, ],
        'familySuffix': typing.Union[FamilySuffixSchema, str, ],
        'userDateOfBirth': typing.Union[UserDateOfBirthSchema, str, date, ],
        'jobGrade': typing.Union[JobGradeSchema, str, ],
        'userStartDate': typing.Union[UserStartDateSchema, str, date, ],
        'userEndDate': typing.Union[UserEndDateSchema, str, date, ],
        'gender': typing.Union[GenderSchema, str, ],
        'position': typing.Union[PositionSchema, str, ],
        'profileId': typing.Union[ProfileIdSchema, str, ],
        'shortName': typing.Union[ShortNameSchema, str, ],
        'status': typing.Union[StatusSchema, str, ],
        'locationName': typing.Union[LocationNameSchema, str, ],
        'locationId': typing.Union[LocationIdSchema, str, ],
        'notes': typing.Union[NotesSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_guid = api_client.QueryParameter(
    name="guid",
    style=api_client.ParameterStyle.FORM,
    schema=GuidSchema,
    explode=True,
)
request_query_email = api_client.QueryParameter(
    name="email",
    style=api_client.ParameterStyle.FORM,
    schema=EmailSchema,
    explode=True,
)
request_query_emp_id = api_client.QueryParameter(
    name="empId",
    style=api_client.ParameterStyle.FORM,
    schema=EmpIdSchema,
    explode=True,
)
request_query_first_name = api_client.QueryParameter(
    name="firstName",
    style=api_client.ParameterStyle.FORM,
    schema=FirstNameSchema,
    explode=True,
)
request_query_middle_name = api_client.QueryParameter(
    name="middleName",
    style=api_client.ParameterStyle.FORM,
    schema=MiddleNameSchema,
    explode=True,
)
request_query_last_name = api_client.QueryParameter(
    name="lastName",
    style=api_client.ParameterStyle.FORM,
    schema=LastNameSchema,
    explode=True,
)
request_query_second_last_name = api_client.QueryParameter(
    name="secondLastName",
    style=api_client.ParameterStyle.FORM,
    schema=SecondLastNameSchema,
    explode=True,
)
request_query_display_full_name = api_client.QueryParameter(
    name="displayFullName",
    style=api_client.ParameterStyle.FORM,
    schema=DisplayFullNameSchema,
    explode=True,
)
request_query_cell_phone = api_client.QueryParameter(
    name="cellPhone",
    style=api_client.ParameterStyle.FORM,
    schema=CellPhoneSchema,
    explode=True,
)
request_query_phone = api_client.QueryParameter(
    name="phone",
    style=api_client.ParameterStyle.FORM,
    schema=PhoneSchema,
    explode=True,
)
request_query_family_suffix = api_client.QueryParameter(
    name="familySuffix",
    style=api_client.ParameterStyle.FORM,
    schema=FamilySuffixSchema,
    explode=True,
)
request_query_user_date_of_birth = api_client.QueryParameter(
    name="userDateOfBirth",
    style=api_client.ParameterStyle.FORM,
    schema=UserDateOfBirthSchema,
    explode=True,
)
request_query_job_grade = api_client.QueryParameter(
    name="jobGrade",
    style=api_client.ParameterStyle.FORM,
    schema=JobGradeSchema,
    explode=True,
)
request_query_user_start_date = api_client.QueryParameter(
    name="userStartDate",
    style=api_client.ParameterStyle.FORM,
    schema=UserStartDateSchema,
    explode=True,
)
request_query_user_end_date = api_client.QueryParameter(
    name="userEndDate",
    style=api_client.ParameterStyle.FORM,
    schema=UserEndDateSchema,
    explode=True,
)
request_query_gender = api_client.QueryParameter(
    name="gender",
    style=api_client.ParameterStyle.FORM,
    schema=GenderSchema,
    explode=True,
)
request_query_position = api_client.QueryParameter(
    name="position",
    style=api_client.ParameterStyle.FORM,
    schema=PositionSchema,
    explode=True,
)
request_query_profile_id = api_client.QueryParameter(
    name="profileId",
    style=api_client.ParameterStyle.FORM,
    schema=ProfileIdSchema,
    explode=True,
)
request_query_short_name = api_client.QueryParameter(
    name="shortName",
    style=api_client.ParameterStyle.FORM,
    schema=ShortNameSchema,
    explode=True,
)
request_query_status = api_client.QueryParameter(
    name="status",
    style=api_client.ParameterStyle.FORM,
    schema=StatusSchema,
    explode=True,
)
request_query_location_name = api_client.QueryParameter(
    name="locationName",
    style=api_client.ParameterStyle.FORM,
    schema=LocationNameSchema,
    explode=True,
)
request_query_location_id = api_client.QueryParameter(
    name="locationId",
    style=api_client.ParameterStyle.FORM,
    schema=LocationIdSchema,
    explode=True,
)
request_query_notes = api_client.QueryParameter(
    name="notes",
    style=api_client.ParameterStyle.FORM,
    schema=NotesSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = schemas.DictSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_user_mapped_args(
        self,
        guid: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        job_grade: typing.Optional[str] = None,
        user_start_date: typing.Optional[date] = None,
        user_end_date: typing.Optional[date] = None,
        gender: typing.Optional[str] = None,
        position: typing.Optional[str] = None,
        profile_id: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        location_name: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if guid is not None:
            _query_params["guid"] = guid
        if email is not None:
            _query_params["email"] = email
        if emp_id is not None:
            _query_params["empId"] = emp_id
        if first_name is not None:
            _query_params["firstName"] = first_name
        if middle_name is not None:
            _query_params["middleName"] = middle_name
        if last_name is not None:
            _query_params["lastName"] = last_name
        if second_last_name is not None:
            _query_params["secondLastName"] = second_last_name
        if display_full_name is not None:
            _query_params["displayFullName"] = display_full_name
        if cell_phone is not None:
            _query_params["cellPhone"] = cell_phone
        if phone is not None:
            _query_params["phone"] = phone
        if family_suffix is not None:
            _query_params["familySuffix"] = family_suffix
        if user_date_of_birth is not None:
            _query_params["userDateOfBirth"] = user_date_of_birth
        if job_grade is not None:
            _query_params["jobGrade"] = job_grade
        if user_start_date is not None:
            _query_params["userStartDate"] = user_start_date
        if user_end_date is not None:
            _query_params["userEndDate"] = user_end_date
        if gender is not None:
            _query_params["gender"] = gender
        if position is not None:
            _query_params["position"] = position
        if profile_id is not None:
            _query_params["profileId"] = profile_id
        if short_name is not None:
            _query_params["shortName"] = short_name
        if status is not None:
            _query_params["status"] = status
        if location_name is not None:
            _query_params["locationName"] = location_name
        if location_id is not None:
            _query_params["locationId"] = location_id
        if notes is not None:
            _query_params["notes"] = notes
        args.query = _query_params
        return args

    async def _aupdate_user_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update user
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_guid,
            request_query_email,
            request_query_emp_id,
            request_query_first_name,
            request_query_middle_name,
            request_query_last_name,
            request_query_second_last_name,
            request_query_display_full_name,
            request_query_cell_phone,
            request_query_phone,
            request_query_family_suffix,
            request_query_user_date_of_birth,
            request_query_job_grade,
            request_query_user_start_date,
            request_query_user_end_date,
            request_query_gender,
            request_query_position,
            request_query_profile_id,
            request_query_short_name,
            request_query_status,
            request_query_location_name,
            request_query_location_id,
            request_query_notes,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/user/update',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_user_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update user
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_guid,
            request_query_email,
            request_query_emp_id,
            request_query_first_name,
            request_query_middle_name,
            request_query_last_name,
            request_query_second_last_name,
            request_query_display_full_name,
            request_query_cell_phone,
            request_query_phone,
            request_query_family_suffix,
            request_query_user_date_of_birth,
            request_query_job_grade,
            request_query_user_start_date,
            request_query_user_end_date,
            request_query_gender,
            request_query_position,
            request_query_profile_id,
            request_query_short_name,
            request_query_status,
            request_query_location_name,
            request_query_location_id,
            request_query_notes,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/user/update',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateUserRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_user(
        self,
        guid: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        job_grade: typing.Optional[str] = None,
        user_start_date: typing.Optional[date] = None,
        user_end_date: typing.Optional[date] = None,
        gender: typing.Optional[str] = None,
        position: typing.Optional[str] = None,
        profile_id: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        location_name: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_user_mapped_args(
            guid=guid,
            email=email,
            emp_id=emp_id,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            second_last_name=second_last_name,
            display_full_name=display_full_name,
            cell_phone=cell_phone,
            phone=phone,
            family_suffix=family_suffix,
            user_date_of_birth=user_date_of_birth,
            job_grade=job_grade,
            user_start_date=user_start_date,
            user_end_date=user_end_date,
            gender=gender,
            position=position,
            profile_id=profile_id,
            short_name=short_name,
            status=status,
            location_name=location_name,
            location_id=location_id,
            notes=notes,
        )
        return await self._aupdate_user_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def update_user(
        self,
        guid: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        job_grade: typing.Optional[str] = None,
        user_start_date: typing.Optional[date] = None,
        user_end_date: typing.Optional[date] = None,
        gender: typing.Optional[str] = None,
        position: typing.Optional[str] = None,
        profile_id: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        location_name: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_user_mapped_args(
            guid=guid,
            email=email,
            emp_id=emp_id,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            second_last_name=second_last_name,
            display_full_name=display_full_name,
            cell_phone=cell_phone,
            phone=phone,
            family_suffix=family_suffix,
            user_date_of_birth=user_date_of_birth,
            job_grade=job_grade,
            user_start_date=user_start_date,
            user_end_date=user_end_date,
            gender=gender,
            position=position,
            profile_id=profile_id,
            short_name=short_name,
            status=status,
            location_name=location_name,
            location_id=location_id,
            notes=notes,
        )
        return self._update_user_oapg(
            query_params=args.query,
        )

class UpdateUser(BaseApi):

    async def aupdate_user(
        self,
        guid: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        job_grade: typing.Optional[str] = None,
        user_start_date: typing.Optional[date] = None,
        user_end_date: typing.Optional[date] = None,
        gender: typing.Optional[str] = None,
        position: typing.Optional[str] = None,
        profile_id: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        location_name: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.aupdate_user(
            guid=guid,
            email=email,
            emp_id=emp_id,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            second_last_name=second_last_name,
            display_full_name=display_full_name,
            cell_phone=cell_phone,
            phone=phone,
            family_suffix=family_suffix,
            user_date_of_birth=user_date_of_birth,
            job_grade=job_grade,
            user_start_date=user_start_date,
            user_end_date=user_end_date,
            gender=gender,
            position=position,
            profile_id=profile_id,
            short_name=short_name,
            status=status,
            location_name=location_name,
            location_id=location_id,
            notes=notes,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def update_user(
        self,
        guid: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        job_grade: typing.Optional[str] = None,
        user_start_date: typing.Optional[date] = None,
        user_end_date: typing.Optional[date] = None,
        gender: typing.Optional[str] = None,
        position: typing.Optional[str] = None,
        profile_id: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        location_name: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.update_user(
            guid=guid,
            email=email,
            emp_id=emp_id,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            second_last_name=second_last_name,
            display_full_name=display_full_name,
            cell_phone=cell_phone,
            phone=phone,
            family_suffix=family_suffix,
            user_date_of_birth=user_date_of_birth,
            job_grade=job_grade,
            user_start_date=user_start_date,
            user_end_date=user_end_date,
            gender=gender,
            position=position,
            profile_id=profile_id,
            short_name=short_name,
            status=status,
            location_name=location_name,
            location_id=location_id,
            notes=notes,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        guid: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        job_grade: typing.Optional[str] = None,
        user_start_date: typing.Optional[date] = None,
        user_end_date: typing.Optional[date] = None,
        gender: typing.Optional[str] = None,
        position: typing.Optional[str] = None,
        profile_id: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        location_name: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_user_mapped_args(
            guid=guid,
            email=email,
            emp_id=emp_id,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            second_last_name=second_last_name,
            display_full_name=display_full_name,
            cell_phone=cell_phone,
            phone=phone,
            family_suffix=family_suffix,
            user_date_of_birth=user_date_of_birth,
            job_grade=job_grade,
            user_start_date=user_start_date,
            user_end_date=user_end_date,
            gender=gender,
            position=position,
            profile_id=profile_id,
            short_name=short_name,
            status=status,
            location_name=location_name,
            location_id=location_id,
            notes=notes,
        )
        return await self._aupdate_user_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        guid: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        emp_id: typing.Optional[str] = None,
        first_name: typing.Optional[str] = None,
        middle_name: typing.Optional[str] = None,
        last_name: typing.Optional[str] = None,
        second_last_name: typing.Optional[str] = None,
        display_full_name: typing.Optional[str] = None,
        cell_phone: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        family_suffix: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        job_grade: typing.Optional[str] = None,
        user_start_date: typing.Optional[date] = None,
        user_end_date: typing.Optional[date] = None,
        gender: typing.Optional[str] = None,
        position: typing.Optional[str] = None,
        profile_id: typing.Optional[str] = None,
        short_name: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        location_name: typing.Optional[str] = None,
        location_id: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_user_mapped_args(
            guid=guid,
            email=email,
            emp_id=emp_id,
            first_name=first_name,
            middle_name=middle_name,
            last_name=last_name,
            second_last_name=second_last_name,
            display_full_name=display_full_name,
            cell_phone=cell_phone,
            phone=phone,
            family_suffix=family_suffix,
            user_date_of_birth=user_date_of_birth,
            job_grade=job_grade,
            user_start_date=user_start_date,
            user_end_date=user_end_date,
            gender=gender,
            position=position,
            profile_id=profile_id,
            short_name=short_name,
            status=status,
            location_name=location_name,
            location_id=location_id,
            notes=notes,
        )
        return self._update_user_oapg(
            query_params=args.query,
        )


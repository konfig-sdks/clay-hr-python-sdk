# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401



from ...api_client import Dictionary

# Query params
AdpAssociateOIDSchema = schemas.StrSchema
AllocationSchema = schemas.Float64Schema
AppleUserIdentifierSchema = schemas.StrSchema
AssignmentsSchema = schemas.StrSchema
AuthTokenSchema = schemas.StrSchema
CalWeekPrefSchema = schemas.StrSchema
CalendarIdSchema = schemas.Int32Schema
CandidateIdSchema = schemas.Int32Schema
CareerPathwayIdSchema = schemas.Int32Schema
CellPhoneSchema = schemas.StrSchema
CidSchema = schemas.Int32Schema
CountryIdSchema = schemas.Int32Schema
CreatetsDateSchema = schemas.Int32Schema
CreatetsDaySchema = schemas.Int32Schema
CreatetsHoursSchema = schemas.Int32Schema
CreatetsMinutesSchema = schemas.Int32Schema
CreatetsMonthSchema = schemas.Int32Schema
CreatetsNanosSchema = schemas.Int32Schema
CreatetsSecondsSchema = schemas.Int32Schema
CreatetsTimeSchema = schemas.Int64Schema
CreatetsTimezoneOffsetSchema = schemas.Int32Schema
CreatetsYearSchema = schemas.Int32Schema
CreateuseridSchema = schemas.Int32Schema
ThumbnailSchema = schemas.StrSchema
TimecardPeriodPrefSchema = schemas.StrSchema
TimezoneSchema = schemas.StrSchema
TosVersionSchema = schemas.StrSchema
UserCountrySchema = schemas.StrSchema
UserDateFormatSchema = schemas.StrSchema
UserDateOfBirthSchema = schemas.DateSchema
UserDisplayNameSchema = schemas.StrSchema
UserEndDateSchema = schemas.DateSchema
UserNameSchema = schemas.StrSchema
UserNameFormatSchema = schemas.StrSchema
UserTypeSchema = schemas.StrSchema
ViewSchema = schemas.BoolSchema
WorkerTypeSchema = schemas.StrSchema
WorkingDaysSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'adpAssociateOID': typing.Union[AdpAssociateOIDSchema, str, ],
        'allocation': typing.Union[AllocationSchema, decimal.Decimal, int, float, ],
        'appleUserIdentifier': typing.Union[AppleUserIdentifierSchema, str, ],
        'assignments': typing.Union[AssignmentsSchema, str, ],
        'authToken': typing.Union[AuthTokenSchema, str, ],
        'calWeekPref': typing.Union[CalWeekPrefSchema, str, ],
        'calendarId': typing.Union[CalendarIdSchema, decimal.Decimal, int, ],
        'candidateId': typing.Union[CandidateIdSchema, decimal.Decimal, int, ],
        'careerPathwayId': typing.Union[CareerPathwayIdSchema, decimal.Decimal, int, ],
        'cellPhone': typing.Union[CellPhoneSchema, str, ],
        'cid': typing.Union[CidSchema, decimal.Decimal, int, ],
        'countryId': typing.Union[CountryIdSchema, decimal.Decimal, int, ],
        'createts.date': typing.Union[CreatetsDateSchema, decimal.Decimal, int, ],
        'createts.day': typing.Union[CreatetsDaySchema, decimal.Decimal, int, ],
        'createts.hours': typing.Union[CreatetsHoursSchema, decimal.Decimal, int, ],
        'createts.minutes': typing.Union[CreatetsMinutesSchema, decimal.Decimal, int, ],
        'createts.month': typing.Union[CreatetsMonthSchema, decimal.Decimal, int, ],
        'createts.nanos': typing.Union[CreatetsNanosSchema, decimal.Decimal, int, ],
        'createts.seconds': typing.Union[CreatetsSecondsSchema, decimal.Decimal, int, ],
        'createts.time': typing.Union[CreatetsTimeSchema, decimal.Decimal, int, ],
        'createts.timezoneOffset': typing.Union[CreatetsTimezoneOffsetSchema, decimal.Decimal, int, ],
        'createts.year': typing.Union[CreatetsYearSchema, decimal.Decimal, int, ],
        'createuserid': typing.Union[CreateuseridSchema, decimal.Decimal, int, ],
        'thumbnail': typing.Union[ThumbnailSchema, str, ],
        'timecardPeriodPref': typing.Union[TimecardPeriodPrefSchema, str, ],
        'timezone': typing.Union[TimezoneSchema, str, ],
        'tosVersion': typing.Union[TosVersionSchema, str, ],
        'userCountry': typing.Union[UserCountrySchema, str, ],
        'userDateFormat': typing.Union[UserDateFormatSchema, str, ],
        'userDateOfBirth': typing.Union[UserDateOfBirthSchema, str, date, ],
        'userDisplayName': typing.Union[UserDisplayNameSchema, str, ],
        'userEndDate': typing.Union[UserEndDateSchema, str, date, ],
        'userName': typing.Union[UserNameSchema, str, ],
        'userNameFormat': typing.Union[UserNameFormatSchema, str, ],
        'userType': typing.Union[UserTypeSchema, str, ],
        'view': typing.Union[ViewSchema, bool, ],
        'workerType': typing.Union[WorkerTypeSchema, str, ],
        'workingDays': typing.Union[WorkingDaysSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_adp_associate_oid = api_client.QueryParameter(
    name="adpAssociateOID",
    style=api_client.ParameterStyle.FORM,
    schema=AdpAssociateOIDSchema,
    explode=True,
)
request_query_allocation = api_client.QueryParameter(
    name="allocation",
    style=api_client.ParameterStyle.FORM,
    schema=AllocationSchema,
    explode=True,
)
request_query_apple_user_identifier = api_client.QueryParameter(
    name="appleUserIdentifier",
    style=api_client.ParameterStyle.FORM,
    schema=AppleUserIdentifierSchema,
    explode=True,
)
request_query_assignments = api_client.QueryParameter(
    name="assignments",
    style=api_client.ParameterStyle.FORM,
    schema=AssignmentsSchema,
    explode=True,
)
request_query_auth_token = api_client.QueryParameter(
    name="authToken",
    style=api_client.ParameterStyle.FORM,
    schema=AuthTokenSchema,
    explode=True,
)
request_query_cal_week_pref = api_client.QueryParameter(
    name="calWeekPref",
    style=api_client.ParameterStyle.FORM,
    schema=CalWeekPrefSchema,
    explode=True,
)
request_query_calendar_id = api_client.QueryParameter(
    name="calendarId",
    style=api_client.ParameterStyle.FORM,
    schema=CalendarIdSchema,
    explode=True,
)
request_query_candidate_id = api_client.QueryParameter(
    name="candidateId",
    style=api_client.ParameterStyle.FORM,
    schema=CandidateIdSchema,
    explode=True,
)
request_query_career_pathway_id = api_client.QueryParameter(
    name="careerPathwayId",
    style=api_client.ParameterStyle.FORM,
    schema=CareerPathwayIdSchema,
    explode=True,
)
request_query_cell_phone = api_client.QueryParameter(
    name="cellPhone",
    style=api_client.ParameterStyle.FORM,
    schema=CellPhoneSchema,
    explode=True,
)
request_query_cid = api_client.QueryParameter(
    name="cid",
    style=api_client.ParameterStyle.FORM,
    schema=CidSchema,
    explode=True,
)
request_query_country_id = api_client.QueryParameter(
    name="countryId",
    style=api_client.ParameterStyle.FORM,
    schema=CountryIdSchema,
    explode=True,
)
request_query_createts_date = api_client.QueryParameter(
    name="createts.date",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsDateSchema,
    explode=True,
)
request_query_createts_day = api_client.QueryParameter(
    name="createts.day",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsDaySchema,
    explode=True,
)
request_query_createts_hours = api_client.QueryParameter(
    name="createts.hours",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsHoursSchema,
    explode=True,
)
request_query_createts_minutes = api_client.QueryParameter(
    name="createts.minutes",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsMinutesSchema,
    explode=True,
)
request_query_createts_month = api_client.QueryParameter(
    name="createts.month",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsMonthSchema,
    explode=True,
)
request_query_createts_nanos = api_client.QueryParameter(
    name="createts.nanos",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsNanosSchema,
    explode=True,
)
request_query_createts_seconds = api_client.QueryParameter(
    name="createts.seconds",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsSecondsSchema,
    explode=True,
)
request_query_createts_time = api_client.QueryParameter(
    name="createts.time",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsTimeSchema,
    explode=True,
)
request_query_createts_timezone_offset = api_client.QueryParameter(
    name="createts.timezoneOffset",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsTimezoneOffsetSchema,
    explode=True,
)
request_query_createts_year = api_client.QueryParameter(
    name="createts.year",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsYearSchema,
    explode=True,
)
request_query_createuserid = api_client.QueryParameter(
    name="createuserid",
    style=api_client.ParameterStyle.FORM,
    schema=CreateuseridSchema,
    explode=True,
)
request_query_thumbnail = api_client.QueryParameter(
    name="thumbnail",
    style=api_client.ParameterStyle.FORM,
    schema=ThumbnailSchema,
    explode=True,
)
request_query_timecard_period_pref = api_client.QueryParameter(
    name="timecardPeriodPref",
    style=api_client.ParameterStyle.FORM,
    schema=TimecardPeriodPrefSchema,
    explode=True,
)
request_query_timezone = api_client.QueryParameter(
    name="timezone",
    style=api_client.ParameterStyle.FORM,
    schema=TimezoneSchema,
    explode=True,
)
request_query_tos_version = api_client.QueryParameter(
    name="tosVersion",
    style=api_client.ParameterStyle.FORM,
    schema=TosVersionSchema,
    explode=True,
)
request_query_user_country = api_client.QueryParameter(
    name="userCountry",
    style=api_client.ParameterStyle.FORM,
    schema=UserCountrySchema,
    explode=True,
)
request_query_user_date_format = api_client.QueryParameter(
    name="userDateFormat",
    style=api_client.ParameterStyle.FORM,
    schema=UserDateFormatSchema,
    explode=True,
)
request_query_user_date_of_birth = api_client.QueryParameter(
    name="userDateOfBirth",
    style=api_client.ParameterStyle.FORM,
    schema=UserDateOfBirthSchema,
    explode=True,
)
request_query_user_display_name = api_client.QueryParameter(
    name="userDisplayName",
    style=api_client.ParameterStyle.FORM,
    schema=UserDisplayNameSchema,
    explode=True,
)
request_query_user_end_date = api_client.QueryParameter(
    name="userEndDate",
    style=api_client.ParameterStyle.FORM,
    schema=UserEndDateSchema,
    explode=True,
)
request_query_user_name = api_client.QueryParameter(
    name="userName",
    style=api_client.ParameterStyle.FORM,
    schema=UserNameSchema,
    explode=True,
)
request_query_user_name_format = api_client.QueryParameter(
    name="userNameFormat",
    style=api_client.ParameterStyle.FORM,
    schema=UserNameFormatSchema,
    explode=True,
)
request_query_user_type = api_client.QueryParameter(
    name="userType",
    style=api_client.ParameterStyle.FORM,
    schema=UserTypeSchema,
    explode=True,
)
request_query_view = api_client.QueryParameter(
    name="view",
    style=api_client.ParameterStyle.FORM,
    schema=ViewSchema,
    explode=True,
)
request_query_worker_type = api_client.QueryParameter(
    name="workerType",
    style=api_client.ParameterStyle.FORM,
    schema=WorkerTypeSchema,
    explode=True,
)
request_query_working_days = api_client.QueryParameter(
    name="workingDays",
    style=api_client.ParameterStyle.FORM,
    schema=WorkingDaysSchema,
    explode=True,
)
SchemaFor200ResponseBody = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        '*/*': api_client.MediaType(
            schema=SchemaFor200ResponseBody),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
_all_accept_content_types = (
    '*/*',
)


class BaseApi(api_client.Api):

    def _verify_user_with_userid_mapped_args(
        self,
        adp_associate_oid: typing.Optional[str] = None,
        allocation: typing.Optional[typing.Union[int, float]] = None,
        apple_user_identifier: typing.Optional[str] = None,
        assignments: typing.Optional[str] = None,
        auth_token: typing.Optional[str] = None,
        cal_week_pref: typing.Optional[str] = None,
        calendar_id: typing.Optional[int] = None,
        candidate_id: typing.Optional[int] = None,
        career_pathway_id: typing.Optional[int] = None,
        cell_phone: typing.Optional[str] = None,
        cid: typing.Optional[int] = None,
        country_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        createuserid: typing.Optional[int] = None,
        thumbnail: typing.Optional[str] = None,
        timecard_period_pref: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        tos_version: typing.Optional[str] = None,
        user_country: typing.Optional[str] = None,
        user_date_format: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        user_display_name: typing.Optional[str] = None,
        user_end_date: typing.Optional[date] = None,
        user_name: typing.Optional[str] = None,
        user_name_format: typing.Optional[str] = None,
        user_type: typing.Optional[str] = None,
        view: typing.Optional[bool] = None,
        worker_type: typing.Optional[str] = None,
        working_days: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if adp_associate_oid is not None:
            _query_params["adpAssociateOID"] = adp_associate_oid
        if allocation is not None:
            _query_params["allocation"] = allocation
        if apple_user_identifier is not None:
            _query_params["appleUserIdentifier"] = apple_user_identifier
        if assignments is not None:
            _query_params["assignments"] = assignments
        if auth_token is not None:
            _query_params["authToken"] = auth_token
        if cal_week_pref is not None:
            _query_params["calWeekPref"] = cal_week_pref
        if calendar_id is not None:
            _query_params["calendarId"] = calendar_id
        if candidate_id is not None:
            _query_params["candidateId"] = candidate_id
        if career_pathway_id is not None:
            _query_params["careerPathwayId"] = career_pathway_id
        if cell_phone is not None:
            _query_params["cellPhone"] = cell_phone
        if cid is not None:
            _query_params["cid"] = cid
        if country_id is not None:
            _query_params["countryId"] = country_id
        if createts_date is not None:
            _query_params["createts.date"] = createts_date
        if createts_day is not None:
            _query_params["createts.day"] = createts_day
        if createts_hours is not None:
            _query_params["createts.hours"] = createts_hours
        if createts_minutes is not None:
            _query_params["createts.minutes"] = createts_minutes
        if createts_month is not None:
            _query_params["createts.month"] = createts_month
        if createts_nanos is not None:
            _query_params["createts.nanos"] = createts_nanos
        if createts_seconds is not None:
            _query_params["createts.seconds"] = createts_seconds
        if createts_time is not None:
            _query_params["createts.time"] = createts_time
        if createts_timezone_offset is not None:
            _query_params["createts.timezoneOffset"] = createts_timezone_offset
        if createts_year is not None:
            _query_params["createts.year"] = createts_year
        if createuserid is not None:
            _query_params["createuserid"] = createuserid
        if thumbnail is not None:
            _query_params["thumbnail"] = thumbnail
        if timecard_period_pref is not None:
            _query_params["timecardPeriodPref"] = timecard_period_pref
        if timezone is not None:
            _query_params["timezone"] = timezone
        if tos_version is not None:
            _query_params["tosVersion"] = tos_version
        if user_country is not None:
            _query_params["userCountry"] = user_country
        if user_date_format is not None:
            _query_params["userDateFormat"] = user_date_format
        if user_date_of_birth is not None:
            _query_params["userDateOfBirth"] = user_date_of_birth
        if user_display_name is not None:
            _query_params["userDisplayName"] = user_display_name
        if user_end_date is not None:
            _query_params["userEndDate"] = user_end_date
        if user_name is not None:
            _query_params["userName"] = user_name
        if user_name_format is not None:
            _query_params["userNameFormat"] = user_name_format
        if user_type is not None:
            _query_params["userType"] = user_type
        if view is not None:
            _query_params["view"] = view
        if worker_type is not None:
            _query_params["workerType"] = worker_type
        if working_days is not None:
            _query_params["workingDays"] = working_days
        args.query = _query_params
        return args

    async def _averify_user_with_userid_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        User verification with userid.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_adp_associate_oid,
            request_query_allocation,
            request_query_apple_user_identifier,
            request_query_assignments,
            request_query_auth_token,
            request_query_cal_week_pref,
            request_query_calendar_id,
            request_query_candidate_id,
            request_query_career_pathway_id,
            request_query_cell_phone,
            request_query_cid,
            request_query_country_id,
            request_query_createts_date,
            request_query_createts_day,
            request_query_createts_hours,
            request_query_createts_minutes,
            request_query_createts_month,
            request_query_createts_nanos,
            request_query_createts_seconds,
            request_query_createts_time,
            request_query_createts_timezone_offset,
            request_query_createts_year,
            request_query_createuserid,
            request_query_thumbnail,
            request_query_timecard_period_pref,
            request_query_timezone,
            request_query_tos_version,
            request_query_user_country,
            request_query_user_date_format,
            request_query_user_date_of_birth,
            request_query_user_display_name,
            request_query_user_end_date,
            request_query_user_name,
            request_query_user_name_format,
            request_query_user_type,
            request_query_view,
            request_query_worker_type,
            request_query_working_days,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/verify/user',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _verify_user_with_userid_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        User verification with userid.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_adp_associate_oid,
            request_query_allocation,
            request_query_apple_user_identifier,
            request_query_assignments,
            request_query_auth_token,
            request_query_cal_week_pref,
            request_query_calendar_id,
            request_query_candidate_id,
            request_query_career_pathway_id,
            request_query_cell_phone,
            request_query_cid,
            request_query_country_id,
            request_query_createts_date,
            request_query_createts_day,
            request_query_createts_hours,
            request_query_createts_minutes,
            request_query_createts_month,
            request_query_createts_nanos,
            request_query_createts_seconds,
            request_query_createts_time,
            request_query_createts_timezone_offset,
            request_query_createts_year,
            request_query_createuserid,
            request_query_thumbnail,
            request_query_timecard_period_pref,
            request_query_timezone,
            request_query_tos_version,
            request_query_user_country,
            request_query_user_date_format,
            request_query_user_date_of_birth,
            request_query_user_display_name,
            request_query_user_end_date,
            request_query_user_name,
            request_query_user_name_format,
            request_query_user_type,
            request_query_view,
            request_query_worker_type,
            request_query_working_days,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/verify/user',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class VerifyUserWithUseridRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def averify_user_with_userid(
        self,
        adp_associate_oid: typing.Optional[str] = None,
        allocation: typing.Optional[typing.Union[int, float]] = None,
        apple_user_identifier: typing.Optional[str] = None,
        assignments: typing.Optional[str] = None,
        auth_token: typing.Optional[str] = None,
        cal_week_pref: typing.Optional[str] = None,
        calendar_id: typing.Optional[int] = None,
        candidate_id: typing.Optional[int] = None,
        career_pathway_id: typing.Optional[int] = None,
        cell_phone: typing.Optional[str] = None,
        cid: typing.Optional[int] = None,
        country_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        createuserid: typing.Optional[int] = None,
        thumbnail: typing.Optional[str] = None,
        timecard_period_pref: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        tos_version: typing.Optional[str] = None,
        user_country: typing.Optional[str] = None,
        user_date_format: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        user_display_name: typing.Optional[str] = None,
        user_end_date: typing.Optional[date] = None,
        user_name: typing.Optional[str] = None,
        user_name_format: typing.Optional[str] = None,
        user_type: typing.Optional[str] = None,
        view: typing.Optional[bool] = None,
        worker_type: typing.Optional[str] = None,
        working_days: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._verify_user_with_userid_mapped_args(
            adp_associate_oid=adp_associate_oid,
            allocation=allocation,
            apple_user_identifier=apple_user_identifier,
            assignments=assignments,
            auth_token=auth_token,
            cal_week_pref=cal_week_pref,
            calendar_id=calendar_id,
            candidate_id=candidate_id,
            career_pathway_id=career_pathway_id,
            cell_phone=cell_phone,
            cid=cid,
            country_id=country_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            createuserid=createuserid,
            thumbnail=thumbnail,
            timecard_period_pref=timecard_period_pref,
            timezone=timezone,
            tos_version=tos_version,
            user_country=user_country,
            user_date_format=user_date_format,
            user_date_of_birth=user_date_of_birth,
            user_display_name=user_display_name,
            user_end_date=user_end_date,
            user_name=user_name,
            user_name_format=user_name_format,
            user_type=user_type,
            view=view,
            worker_type=worker_type,
            working_days=working_days,
        )
        return await self._averify_user_with_userid_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def verify_user_with_userid(
        self,
        adp_associate_oid: typing.Optional[str] = None,
        allocation: typing.Optional[typing.Union[int, float]] = None,
        apple_user_identifier: typing.Optional[str] = None,
        assignments: typing.Optional[str] = None,
        auth_token: typing.Optional[str] = None,
        cal_week_pref: typing.Optional[str] = None,
        calendar_id: typing.Optional[int] = None,
        candidate_id: typing.Optional[int] = None,
        career_pathway_id: typing.Optional[int] = None,
        cell_phone: typing.Optional[str] = None,
        cid: typing.Optional[int] = None,
        country_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        createuserid: typing.Optional[int] = None,
        thumbnail: typing.Optional[str] = None,
        timecard_period_pref: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        tos_version: typing.Optional[str] = None,
        user_country: typing.Optional[str] = None,
        user_date_format: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        user_display_name: typing.Optional[str] = None,
        user_end_date: typing.Optional[date] = None,
        user_name: typing.Optional[str] = None,
        user_name_format: typing.Optional[str] = None,
        user_type: typing.Optional[str] = None,
        view: typing.Optional[bool] = None,
        worker_type: typing.Optional[str] = None,
        working_days: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._verify_user_with_userid_mapped_args(
            adp_associate_oid=adp_associate_oid,
            allocation=allocation,
            apple_user_identifier=apple_user_identifier,
            assignments=assignments,
            auth_token=auth_token,
            cal_week_pref=cal_week_pref,
            calendar_id=calendar_id,
            candidate_id=candidate_id,
            career_pathway_id=career_pathway_id,
            cell_phone=cell_phone,
            cid=cid,
            country_id=country_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            createuserid=createuserid,
            thumbnail=thumbnail,
            timecard_period_pref=timecard_period_pref,
            timezone=timezone,
            tos_version=tos_version,
            user_country=user_country,
            user_date_format=user_date_format,
            user_date_of_birth=user_date_of_birth,
            user_display_name=user_display_name,
            user_end_date=user_end_date,
            user_name=user_name,
            user_name_format=user_name_format,
            user_type=user_type,
            view=view,
            worker_type=worker_type,
            working_days=working_days,
        )
        return self._verify_user_with_userid_oapg(
            query_params=args.query,
        )

class VerifyUserWithUserid(BaseApi):

    async def averify_user_with_userid(
        self,
        adp_associate_oid: typing.Optional[str] = None,
        allocation: typing.Optional[typing.Union[int, float]] = None,
        apple_user_identifier: typing.Optional[str] = None,
        assignments: typing.Optional[str] = None,
        auth_token: typing.Optional[str] = None,
        cal_week_pref: typing.Optional[str] = None,
        calendar_id: typing.Optional[int] = None,
        candidate_id: typing.Optional[int] = None,
        career_pathway_id: typing.Optional[int] = None,
        cell_phone: typing.Optional[str] = None,
        cid: typing.Optional[int] = None,
        country_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        createuserid: typing.Optional[int] = None,
        thumbnail: typing.Optional[str] = None,
        timecard_period_pref: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        tos_version: typing.Optional[str] = None,
        user_country: typing.Optional[str] = None,
        user_date_format: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        user_display_name: typing.Optional[str] = None,
        user_end_date: typing.Optional[date] = None,
        user_name: typing.Optional[str] = None,
        user_name_format: typing.Optional[str] = None,
        user_type: typing.Optional[str] = None,
        view: typing.Optional[bool] = None,
        worker_type: typing.Optional[str] = None,
        working_days: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.averify_user_with_userid(
            adp_associate_oid=adp_associate_oid,
            allocation=allocation,
            apple_user_identifier=apple_user_identifier,
            assignments=assignments,
            auth_token=auth_token,
            cal_week_pref=cal_week_pref,
            calendar_id=calendar_id,
            candidate_id=candidate_id,
            career_pathway_id=career_pathway_id,
            cell_phone=cell_phone,
            cid=cid,
            country_id=country_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            createuserid=createuserid,
            thumbnail=thumbnail,
            timecard_period_pref=timecard_period_pref,
            timezone=timezone,
            tos_version=tos_version,
            user_country=user_country,
            user_date_format=user_date_format,
            user_date_of_birth=user_date_of_birth,
            user_display_name=user_display_name,
            user_end_date=user_end_date,
            user_name=user_name,
            user_name_format=user_name_format,
            user_type=user_type,
            view=view,
            worker_type=worker_type,
            working_days=working_days,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def verify_user_with_userid(
        self,
        adp_associate_oid: typing.Optional[str] = None,
        allocation: typing.Optional[typing.Union[int, float]] = None,
        apple_user_identifier: typing.Optional[str] = None,
        assignments: typing.Optional[str] = None,
        auth_token: typing.Optional[str] = None,
        cal_week_pref: typing.Optional[str] = None,
        calendar_id: typing.Optional[int] = None,
        candidate_id: typing.Optional[int] = None,
        career_pathway_id: typing.Optional[int] = None,
        cell_phone: typing.Optional[str] = None,
        cid: typing.Optional[int] = None,
        country_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        createuserid: typing.Optional[int] = None,
        thumbnail: typing.Optional[str] = None,
        timecard_period_pref: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        tos_version: typing.Optional[str] = None,
        user_country: typing.Optional[str] = None,
        user_date_format: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        user_display_name: typing.Optional[str] = None,
        user_end_date: typing.Optional[date] = None,
        user_name: typing.Optional[str] = None,
        user_name_format: typing.Optional[str] = None,
        user_type: typing.Optional[str] = None,
        view: typing.Optional[bool] = None,
        worker_type: typing.Optional[str] = None,
        working_days: typing.Optional[str] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.verify_user_with_userid(
            adp_associate_oid=adp_associate_oid,
            allocation=allocation,
            apple_user_identifier=apple_user_identifier,
            assignments=assignments,
            auth_token=auth_token,
            cal_week_pref=cal_week_pref,
            calendar_id=calendar_id,
            candidate_id=candidate_id,
            career_pathway_id=career_pathway_id,
            cell_phone=cell_phone,
            cid=cid,
            country_id=country_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            createuserid=createuserid,
            thumbnail=thumbnail,
            timecard_period_pref=timecard_period_pref,
            timezone=timezone,
            tos_version=tos_version,
            user_country=user_country,
            user_date_format=user_date_format,
            user_date_of_birth=user_date_of_birth,
            user_display_name=user_display_name,
            user_end_date=user_end_date,
            user_name=user_name,
            user_name_format=user_name_format,
            user_type=user_type,
            view=view,
            worker_type=worker_type,
            working_days=working_days,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        adp_associate_oid: typing.Optional[str] = None,
        allocation: typing.Optional[typing.Union[int, float]] = None,
        apple_user_identifier: typing.Optional[str] = None,
        assignments: typing.Optional[str] = None,
        auth_token: typing.Optional[str] = None,
        cal_week_pref: typing.Optional[str] = None,
        calendar_id: typing.Optional[int] = None,
        candidate_id: typing.Optional[int] = None,
        career_pathway_id: typing.Optional[int] = None,
        cell_phone: typing.Optional[str] = None,
        cid: typing.Optional[int] = None,
        country_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        createuserid: typing.Optional[int] = None,
        thumbnail: typing.Optional[str] = None,
        timecard_period_pref: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        tos_version: typing.Optional[str] = None,
        user_country: typing.Optional[str] = None,
        user_date_format: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        user_display_name: typing.Optional[str] = None,
        user_end_date: typing.Optional[date] = None,
        user_name: typing.Optional[str] = None,
        user_name_format: typing.Optional[str] = None,
        user_type: typing.Optional[str] = None,
        view: typing.Optional[bool] = None,
        worker_type: typing.Optional[str] = None,
        working_days: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._verify_user_with_userid_mapped_args(
            adp_associate_oid=adp_associate_oid,
            allocation=allocation,
            apple_user_identifier=apple_user_identifier,
            assignments=assignments,
            auth_token=auth_token,
            cal_week_pref=cal_week_pref,
            calendar_id=calendar_id,
            candidate_id=candidate_id,
            career_pathway_id=career_pathway_id,
            cell_phone=cell_phone,
            cid=cid,
            country_id=country_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            createuserid=createuserid,
            thumbnail=thumbnail,
            timecard_period_pref=timecard_period_pref,
            timezone=timezone,
            tos_version=tos_version,
            user_country=user_country,
            user_date_format=user_date_format,
            user_date_of_birth=user_date_of_birth,
            user_display_name=user_display_name,
            user_end_date=user_end_date,
            user_name=user_name,
            user_name_format=user_name_format,
            user_type=user_type,
            view=view,
            worker_type=worker_type,
            working_days=working_days,
        )
        return await self._averify_user_with_userid_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        adp_associate_oid: typing.Optional[str] = None,
        allocation: typing.Optional[typing.Union[int, float]] = None,
        apple_user_identifier: typing.Optional[str] = None,
        assignments: typing.Optional[str] = None,
        auth_token: typing.Optional[str] = None,
        cal_week_pref: typing.Optional[str] = None,
        calendar_id: typing.Optional[int] = None,
        candidate_id: typing.Optional[int] = None,
        career_pathway_id: typing.Optional[int] = None,
        cell_phone: typing.Optional[str] = None,
        cid: typing.Optional[int] = None,
        country_id: typing.Optional[int] = None,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        createuserid: typing.Optional[int] = None,
        thumbnail: typing.Optional[str] = None,
        timecard_period_pref: typing.Optional[str] = None,
        timezone: typing.Optional[str] = None,
        tos_version: typing.Optional[str] = None,
        user_country: typing.Optional[str] = None,
        user_date_format: typing.Optional[str] = None,
        user_date_of_birth: typing.Optional[date] = None,
        user_display_name: typing.Optional[str] = None,
        user_end_date: typing.Optional[date] = None,
        user_name: typing.Optional[str] = None,
        user_name_format: typing.Optional[str] = None,
        user_type: typing.Optional[str] = None,
        view: typing.Optional[bool] = None,
        worker_type: typing.Optional[str] = None,
        working_days: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._verify_user_with_userid_mapped_args(
            adp_associate_oid=adp_associate_oid,
            allocation=allocation,
            apple_user_identifier=apple_user_identifier,
            assignments=assignments,
            auth_token=auth_token,
            cal_week_pref=cal_week_pref,
            calendar_id=calendar_id,
            candidate_id=candidate_id,
            career_pathway_id=career_pathway_id,
            cell_phone=cell_phone,
            cid=cid,
            country_id=country_id,
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            createuserid=createuserid,
            thumbnail=thumbnail,
            timecard_period_pref=timecard_period_pref,
            timezone=timezone,
            tos_version=tos_version,
            user_country=user_country,
            user_date_format=user_date_format,
            user_date_of_birth=user_date_of_birth,
            user_display_name=user_display_name,
            user_end_date=user_end_date,
            user_name=user_name,
            user_name_format=user_name_format,
            user_type=user_type,
            view=view,
            worker_type=worker_type,
            working_days=working_days,
        )
        return self._verify_user_with_userid_oapg(
            query_params=args.query,
        )


# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401



from ...api_client import Dictionary

# Query params
CreatetsDateSchema = schemas.Int32Schema
CreatetsDaySchema = schemas.Int32Schema
CreatetsHoursSchema = schemas.Int32Schema
CreatetsMinutesSchema = schemas.Int32Schema
CreatetsMonthSchema = schemas.Int32Schema
CreatetsNanosSchema = schemas.Int32Schema
CreatetsSecondsSchema = schemas.Int32Schema
CreatetsTimeSchema = schemas.Int64Schema
CreatetsTimezoneOffsetSchema = schemas.Int32Schema
CreatetsYearSchema = schemas.Int32Schema
CustomHoursSchema = schemas.StrSchema
DateSchema = schemas.DateSchema
DescriptionSchema = schemas.StrSchema
ElapsedTimeDateSchema = schemas.Int32Schema
ElapsedTimeDaySchema = schemas.Int32Schema
ElapsedTimeHoursSchema = schemas.Int32Schema
ElapsedTimeMinutesSchema = schemas.Int32Schema
ElapsedTimeMonthSchema = schemas.Int32Schema
ElapsedTimeSecondsSchema = schemas.Int32Schema
ElapsedTimeTimeSchema = schemas.Int64Schema
ElapsedTimeTimezoneOffsetSchema = schemas.Int32Schema
ElapsedTimeYearSchema = schemas.Int32Schema
EndDateTimeDateSchema = schemas.Int32Schema
EndDateTimeDaySchema = schemas.Int32Schema
EndDateTimeHoursSchema = schemas.Int32Schema
EndDateTimeMinutesSchema = schemas.Int32Schema
EndDateTimeMonthSchema = schemas.Int32Schema
EndDateTimeNanosSchema = schemas.Int32Schema
EndDateTimeSecondsSchema = schemas.Int32Schema
EndDateTimeTimeSchema = schemas.Int64Schema
EndDateTimeTimezoneOffsetSchema = schemas.Int32Schema
EndDateTimeYearSchema = schemas.Int32Schema
EndDateTimeStrSchema = schemas.StrSchema
IdSchema = schemas.Int32Schema
InvoiceIdSchema = schemas.Int32Schema
NotesSchema = schemas.StrSchema
NumberOfDaysSchema = schemas.Int32Schema
PaymentDateSchema = schemas.DateSchema
ProjectIdSchema = schemas.Int32Schema
ProjectManagerSchema = schemas.StrSchema
ProjectModelAccountSchema = schemas.Int32Schema
TimesheetIdSchema = schemas.Int32Schema
TimezoneSchema = schemas.StrSchema
UsedTimeSchema = schemas.Int64Schema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'createts.date': typing.Union[CreatetsDateSchema, decimal.Decimal, int, ],
        'createts.day': typing.Union[CreatetsDaySchema, decimal.Decimal, int, ],
        'createts.hours': typing.Union[CreatetsHoursSchema, decimal.Decimal, int, ],
        'createts.minutes': typing.Union[CreatetsMinutesSchema, decimal.Decimal, int, ],
        'createts.month': typing.Union[CreatetsMonthSchema, decimal.Decimal, int, ],
        'createts.nanos': typing.Union[CreatetsNanosSchema, decimal.Decimal, int, ],
        'createts.seconds': typing.Union[CreatetsSecondsSchema, decimal.Decimal, int, ],
        'createts.time': typing.Union[CreatetsTimeSchema, decimal.Decimal, int, ],
        'createts.timezoneOffset': typing.Union[CreatetsTimezoneOffsetSchema, decimal.Decimal, int, ],
        'createts.year': typing.Union[CreatetsYearSchema, decimal.Decimal, int, ],
        'customHours': typing.Union[CustomHoursSchema, str, ],
        'date': typing.Union[DateSchema, str, date, ],
        'description': typing.Union[DescriptionSchema, str, ],
        'elapsedTime.date': typing.Union[ElapsedTimeDateSchema, decimal.Decimal, int, ],
        'elapsedTime.day': typing.Union[ElapsedTimeDaySchema, decimal.Decimal, int, ],
        'elapsedTime.hours': typing.Union[ElapsedTimeHoursSchema, decimal.Decimal, int, ],
        'elapsedTime.minutes': typing.Union[ElapsedTimeMinutesSchema, decimal.Decimal, int, ],
        'elapsedTime.month': typing.Union[ElapsedTimeMonthSchema, decimal.Decimal, int, ],
        'elapsedTime.seconds': typing.Union[ElapsedTimeSecondsSchema, decimal.Decimal, int, ],
        'elapsedTime.time': typing.Union[ElapsedTimeTimeSchema, decimal.Decimal, int, ],
        'elapsedTime.timezoneOffset': typing.Union[ElapsedTimeTimezoneOffsetSchema, decimal.Decimal, int, ],
        'elapsedTime.year': typing.Union[ElapsedTimeYearSchema, decimal.Decimal, int, ],
        'endDateTime.date': typing.Union[EndDateTimeDateSchema, decimal.Decimal, int, ],
        'endDateTime.day': typing.Union[EndDateTimeDaySchema, decimal.Decimal, int, ],
        'endDateTime.hours': typing.Union[EndDateTimeHoursSchema, decimal.Decimal, int, ],
        'endDateTime.minutes': typing.Union[EndDateTimeMinutesSchema, decimal.Decimal, int, ],
        'endDateTime.month': typing.Union[EndDateTimeMonthSchema, decimal.Decimal, int, ],
        'endDateTime.nanos': typing.Union[EndDateTimeNanosSchema, decimal.Decimal, int, ],
        'endDateTime.seconds': typing.Union[EndDateTimeSecondsSchema, decimal.Decimal, int, ],
        'endDateTime.time': typing.Union[EndDateTimeTimeSchema, decimal.Decimal, int, ],
        'endDateTime.timezoneOffset': typing.Union[EndDateTimeTimezoneOffsetSchema, decimal.Decimal, int, ],
        'endDateTime.year': typing.Union[EndDateTimeYearSchema, decimal.Decimal, int, ],
        'endDateTimeStr': typing.Union[EndDateTimeStrSchema, str, ],
        'id': typing.Union[IdSchema, decimal.Decimal, int, ],
        'invoiceId': typing.Union[InvoiceIdSchema, decimal.Decimal, int, ],
        'notes': typing.Union[NotesSchema, str, ],
        'numberOfDays': typing.Union[NumberOfDaysSchema, decimal.Decimal, int, ],
        'paymentDate': typing.Union[PaymentDateSchema, str, date, ],
        'projectId': typing.Union[ProjectIdSchema, decimal.Decimal, int, ],
        'projectManager': typing.Union[ProjectManagerSchema, str, ],
        'projectModel.account': typing.Union[ProjectModelAccountSchema, decimal.Decimal, int, ],
        'timesheetId': typing.Union[TimesheetIdSchema, decimal.Decimal, int, ],
        'timezone': typing.Union[TimezoneSchema, str, ],
        'usedTime': typing.Union[UsedTimeSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_createts_date = api_client.QueryParameter(
    name="createts.date",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsDateSchema,
    explode=True,
)
request_query_createts_day = api_client.QueryParameter(
    name="createts.day",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsDaySchema,
    explode=True,
)
request_query_createts_hours = api_client.QueryParameter(
    name="createts.hours",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsHoursSchema,
    explode=True,
)
request_query_createts_minutes = api_client.QueryParameter(
    name="createts.minutes",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsMinutesSchema,
    explode=True,
)
request_query_createts_month = api_client.QueryParameter(
    name="createts.month",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsMonthSchema,
    explode=True,
)
request_query_createts_nanos = api_client.QueryParameter(
    name="createts.nanos",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsNanosSchema,
    explode=True,
)
request_query_createts_seconds = api_client.QueryParameter(
    name="createts.seconds",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsSecondsSchema,
    explode=True,
)
request_query_createts_time = api_client.QueryParameter(
    name="createts.time",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsTimeSchema,
    explode=True,
)
request_query_createts_timezone_offset = api_client.QueryParameter(
    name="createts.timezoneOffset",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsTimezoneOffsetSchema,
    explode=True,
)
request_query_createts_year = api_client.QueryParameter(
    name="createts.year",
    style=api_client.ParameterStyle.FORM,
    schema=CreatetsYearSchema,
    explode=True,
)
request_query_custom_hours = api_client.QueryParameter(
    name="customHours",
    style=api_client.ParameterStyle.FORM,
    schema=CustomHoursSchema,
    explode=True,
)
request_query_date = api_client.QueryParameter(
    name="date",
    style=api_client.ParameterStyle.FORM,
    schema=DateSchema,
    explode=True,
)
request_query_description = api_client.QueryParameter(
    name="description",
    style=api_client.ParameterStyle.FORM,
    schema=DescriptionSchema,
    explode=True,
)
request_query_elapsed_time_date = api_client.QueryParameter(
    name="elapsedTime.date",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeDateSchema,
    explode=True,
)
request_query_elapsed_time_day = api_client.QueryParameter(
    name="elapsedTime.day",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeDaySchema,
    explode=True,
)
request_query_elapsed_time_hours = api_client.QueryParameter(
    name="elapsedTime.hours",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeHoursSchema,
    explode=True,
)
request_query_elapsed_time_minutes = api_client.QueryParameter(
    name="elapsedTime.minutes",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeMinutesSchema,
    explode=True,
)
request_query_elapsed_time_month = api_client.QueryParameter(
    name="elapsedTime.month",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeMonthSchema,
    explode=True,
)
request_query_elapsed_time_seconds = api_client.QueryParameter(
    name="elapsedTime.seconds",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeSecondsSchema,
    explode=True,
)
request_query_elapsed_time_time = api_client.QueryParameter(
    name="elapsedTime.time",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeTimeSchema,
    explode=True,
)
request_query_elapsed_time_timezone_offset = api_client.QueryParameter(
    name="elapsedTime.timezoneOffset",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeTimezoneOffsetSchema,
    explode=True,
)
request_query_elapsed_time_year = api_client.QueryParameter(
    name="elapsedTime.year",
    style=api_client.ParameterStyle.FORM,
    schema=ElapsedTimeYearSchema,
    explode=True,
)
request_query_end_date_time_date = api_client.QueryParameter(
    name="endDateTime.date",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeDateSchema,
    explode=True,
)
request_query_end_date_time_day = api_client.QueryParameter(
    name="endDateTime.day",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeDaySchema,
    explode=True,
)
request_query_end_date_time_hours = api_client.QueryParameter(
    name="endDateTime.hours",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeHoursSchema,
    explode=True,
)
request_query_end_date_time_minutes = api_client.QueryParameter(
    name="endDateTime.minutes",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeMinutesSchema,
    explode=True,
)
request_query_end_date_time_month = api_client.QueryParameter(
    name="endDateTime.month",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeMonthSchema,
    explode=True,
)
request_query_end_date_time_nanos = api_client.QueryParameter(
    name="endDateTime.nanos",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeNanosSchema,
    explode=True,
)
request_query_end_date_time_seconds = api_client.QueryParameter(
    name="endDateTime.seconds",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeSecondsSchema,
    explode=True,
)
request_query_end_date_time_time = api_client.QueryParameter(
    name="endDateTime.time",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeTimeSchema,
    explode=True,
)
request_query_end_date_time_timezone_offset = api_client.QueryParameter(
    name="endDateTime.timezoneOffset",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeTimezoneOffsetSchema,
    explode=True,
)
request_query_end_date_time_year = api_client.QueryParameter(
    name="endDateTime.year",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeYearSchema,
    explode=True,
)
request_query_end_date_time_str = api_client.QueryParameter(
    name="endDateTimeStr",
    style=api_client.ParameterStyle.FORM,
    schema=EndDateTimeStrSchema,
    explode=True,
)
request_query_id = api_client.QueryParameter(
    name="id",
    style=api_client.ParameterStyle.FORM,
    schema=IdSchema,
    explode=True,
)
request_query_invoice_id = api_client.QueryParameter(
    name="invoiceId",
    style=api_client.ParameterStyle.FORM,
    schema=InvoiceIdSchema,
    explode=True,
)
request_query_notes = api_client.QueryParameter(
    name="notes",
    style=api_client.ParameterStyle.FORM,
    schema=NotesSchema,
    explode=True,
)
request_query_number_of_days = api_client.QueryParameter(
    name="numberOfDays",
    style=api_client.ParameterStyle.FORM,
    schema=NumberOfDaysSchema,
    explode=True,
)
request_query_payment_date = api_client.QueryParameter(
    name="paymentDate",
    style=api_client.ParameterStyle.FORM,
    schema=PaymentDateSchema,
    explode=True,
)
request_query_project_id = api_client.QueryParameter(
    name="projectId",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectIdSchema,
    explode=True,
)
request_query_project_manager = api_client.QueryParameter(
    name="projectManager",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectManagerSchema,
    explode=True,
)
request_query_project_model_account = api_client.QueryParameter(
    name="projectModel.account",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectModelAccountSchema,
    explode=True,
)
request_query_timesheet_id = api_client.QueryParameter(
    name="timesheetId",
    style=api_client.ParameterStyle.FORM,
    schema=TimesheetIdSchema,
    explode=True,
)
request_query_timezone = api_client.QueryParameter(
    name="timezone",
    style=api_client.ParameterStyle.FORM,
    schema=TimezoneSchema,
    explode=True,
)
request_query_used_time = api_client.QueryParameter(
    name="usedTime",
    style=api_client.ParameterStyle.FORM,
    schema=UsedTimeSchema,
    explode=True,
)
SchemaFor200ResponseBody = schemas.DictSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        '*/*': api_client.MediaType(
            schema=SchemaFor200ResponseBody),
    },
)


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor404(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor404Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_404 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor404,
    response_cls_async=ApiResponseFor404Async,
)
_all_accept_content_types = (
    '*/*',
)


class BaseApi(api_client.Api):

    def _create_timecard_mapped_args(
        self,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        custom_hours: typing.Optional[str] = None,
        date: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        elapsed_time_date: typing.Optional[int] = None,
        elapsed_time_day: typing.Optional[int] = None,
        elapsed_time_hours: typing.Optional[int] = None,
        elapsed_time_minutes: typing.Optional[int] = None,
        elapsed_time_month: typing.Optional[int] = None,
        elapsed_time_seconds: typing.Optional[int] = None,
        elapsed_time_time: typing.Optional[int] = None,
        elapsed_time_timezone_offset: typing.Optional[int] = None,
        elapsed_time_year: typing.Optional[int] = None,
        end_date_time_date: typing.Optional[int] = None,
        end_date_time_day: typing.Optional[int] = None,
        end_date_time_hours: typing.Optional[int] = None,
        end_date_time_minutes: typing.Optional[int] = None,
        end_date_time_month: typing.Optional[int] = None,
        end_date_time_nanos: typing.Optional[int] = None,
        end_date_time_seconds: typing.Optional[int] = None,
        end_date_time_time: typing.Optional[int] = None,
        end_date_time_timezone_offset: typing.Optional[int] = None,
        end_date_time_year: typing.Optional[int] = None,
        end_date_time_str: typing.Optional[str] = None,
        id: typing.Optional[int] = None,
        invoice_id: typing.Optional[int] = None,
        notes: typing.Optional[str] = None,
        number_of_days: typing.Optional[int] = None,
        payment_date: typing.Optional[date] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        project_model_account: typing.Optional[int] = None,
        timesheet_id: typing.Optional[int] = None,
        timezone: typing.Optional[str] = None,
        used_time: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if createts_date is not None:
            _query_params["createts.date"] = createts_date
        if createts_day is not None:
            _query_params["createts.day"] = createts_day
        if createts_hours is not None:
            _query_params["createts.hours"] = createts_hours
        if createts_minutes is not None:
            _query_params["createts.minutes"] = createts_minutes
        if createts_month is not None:
            _query_params["createts.month"] = createts_month
        if createts_nanos is not None:
            _query_params["createts.nanos"] = createts_nanos
        if createts_seconds is not None:
            _query_params["createts.seconds"] = createts_seconds
        if createts_time is not None:
            _query_params["createts.time"] = createts_time
        if createts_timezone_offset is not None:
            _query_params["createts.timezoneOffset"] = createts_timezone_offset
        if createts_year is not None:
            _query_params["createts.year"] = createts_year
        if custom_hours is not None:
            _query_params["customHours"] = custom_hours
        if date is not None:
            _query_params["date"] = date
        if description is not None:
            _query_params["description"] = description
        if elapsed_time_date is not None:
            _query_params["elapsedTime.date"] = elapsed_time_date
        if elapsed_time_day is not None:
            _query_params["elapsedTime.day"] = elapsed_time_day
        if elapsed_time_hours is not None:
            _query_params["elapsedTime.hours"] = elapsed_time_hours
        if elapsed_time_minutes is not None:
            _query_params["elapsedTime.minutes"] = elapsed_time_minutes
        if elapsed_time_month is not None:
            _query_params["elapsedTime.month"] = elapsed_time_month
        if elapsed_time_seconds is not None:
            _query_params["elapsedTime.seconds"] = elapsed_time_seconds
        if elapsed_time_time is not None:
            _query_params["elapsedTime.time"] = elapsed_time_time
        if elapsed_time_timezone_offset is not None:
            _query_params["elapsedTime.timezoneOffset"] = elapsed_time_timezone_offset
        if elapsed_time_year is not None:
            _query_params["elapsedTime.year"] = elapsed_time_year
        if end_date_time_date is not None:
            _query_params["endDateTime.date"] = end_date_time_date
        if end_date_time_day is not None:
            _query_params["endDateTime.day"] = end_date_time_day
        if end_date_time_hours is not None:
            _query_params["endDateTime.hours"] = end_date_time_hours
        if end_date_time_minutes is not None:
            _query_params["endDateTime.minutes"] = end_date_time_minutes
        if end_date_time_month is not None:
            _query_params["endDateTime.month"] = end_date_time_month
        if end_date_time_nanos is not None:
            _query_params["endDateTime.nanos"] = end_date_time_nanos
        if end_date_time_seconds is not None:
            _query_params["endDateTime.seconds"] = end_date_time_seconds
        if end_date_time_time is not None:
            _query_params["endDateTime.time"] = end_date_time_time
        if end_date_time_timezone_offset is not None:
            _query_params["endDateTime.timezoneOffset"] = end_date_time_timezone_offset
        if end_date_time_year is not None:
            _query_params["endDateTime.year"] = end_date_time_year
        if end_date_time_str is not None:
            _query_params["endDateTimeStr"] = end_date_time_str
        if id is not None:
            _query_params["id"] = id
        if invoice_id is not None:
            _query_params["invoiceId"] = invoice_id
        if notes is not None:
            _query_params["notes"] = notes
        if number_of_days is not None:
            _query_params["numberOfDays"] = number_of_days
        if payment_date is not None:
            _query_params["paymentDate"] = payment_date
        if project_id is not None:
            _query_params["projectId"] = project_id
        if project_manager is not None:
            _query_params["projectManager"] = project_manager
        if project_model_account is not None:
            _query_params["projectModel.account"] = project_model_account
        if timesheet_id is not None:
            _query_params["timesheetId"] = timesheet_id
        if timezone is not None:
            _query_params["timezone"] = timezone
        if used_time is not None:
            _query_params["usedTime"] = used_time
        args.query = _query_params
        return args

    async def _acreate_timecard_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create a new timecard.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_createts_date,
            request_query_createts_day,
            request_query_createts_hours,
            request_query_createts_minutes,
            request_query_createts_month,
            request_query_createts_nanos,
            request_query_createts_seconds,
            request_query_createts_time,
            request_query_createts_timezone_offset,
            request_query_createts_year,
            request_query_custom_hours,
            request_query_date,
            request_query_description,
            request_query_elapsed_time_date,
            request_query_elapsed_time_day,
            request_query_elapsed_time_hours,
            request_query_elapsed_time_minutes,
            request_query_elapsed_time_month,
            request_query_elapsed_time_seconds,
            request_query_elapsed_time_time,
            request_query_elapsed_time_timezone_offset,
            request_query_elapsed_time_year,
            request_query_end_date_time_date,
            request_query_end_date_time_day,
            request_query_end_date_time_hours,
            request_query_end_date_time_minutes,
            request_query_end_date_time_month,
            request_query_end_date_time_nanos,
            request_query_end_date_time_seconds,
            request_query_end_date_time_time,
            request_query_end_date_time_timezone_offset,
            request_query_end_date_time_year,
            request_query_end_date_time_str,
            request_query_id,
            request_query_invoice_id,
            request_query_notes,
            request_query_number_of_days,
            request_query_payment_date,
            request_query_project_id,
            request_query_project_manager,
            request_query_project_model_account,
            request_query_timesheet_id,
            request_query_timezone,
            request_query_used_time,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/timecard/addtimecard',
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_timecard_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create a new timecard.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_createts_date,
            request_query_createts_day,
            request_query_createts_hours,
            request_query_createts_minutes,
            request_query_createts_month,
            request_query_createts_nanos,
            request_query_createts_seconds,
            request_query_createts_time,
            request_query_createts_timezone_offset,
            request_query_createts_year,
            request_query_custom_hours,
            request_query_date,
            request_query_description,
            request_query_elapsed_time_date,
            request_query_elapsed_time_day,
            request_query_elapsed_time_hours,
            request_query_elapsed_time_minutes,
            request_query_elapsed_time_month,
            request_query_elapsed_time_seconds,
            request_query_elapsed_time_time,
            request_query_elapsed_time_timezone_offset,
            request_query_elapsed_time_year,
            request_query_end_date_time_date,
            request_query_end_date_time_day,
            request_query_end_date_time_hours,
            request_query_end_date_time_minutes,
            request_query_end_date_time_month,
            request_query_end_date_time_nanos,
            request_query_end_date_time_seconds,
            request_query_end_date_time_time,
            request_query_end_date_time_timezone_offset,
            request_query_end_date_time_year,
            request_query_end_date_time_str,
            request_query_id,
            request_query_invoice_id,
            request_query_notes,
            request_query_number_of_days,
            request_query_payment_date,
            request_query_project_id,
            request_query_project_manager,
            request_query_project_model_account,
            request_query_timesheet_id,
            request_query_timezone,
            request_query_used_time,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/timecard/addtimecard',
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateTimecardRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_timecard(
        self,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        custom_hours: typing.Optional[str] = None,
        date: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        elapsed_time_date: typing.Optional[int] = None,
        elapsed_time_day: typing.Optional[int] = None,
        elapsed_time_hours: typing.Optional[int] = None,
        elapsed_time_minutes: typing.Optional[int] = None,
        elapsed_time_month: typing.Optional[int] = None,
        elapsed_time_seconds: typing.Optional[int] = None,
        elapsed_time_time: typing.Optional[int] = None,
        elapsed_time_timezone_offset: typing.Optional[int] = None,
        elapsed_time_year: typing.Optional[int] = None,
        end_date_time_date: typing.Optional[int] = None,
        end_date_time_day: typing.Optional[int] = None,
        end_date_time_hours: typing.Optional[int] = None,
        end_date_time_minutes: typing.Optional[int] = None,
        end_date_time_month: typing.Optional[int] = None,
        end_date_time_nanos: typing.Optional[int] = None,
        end_date_time_seconds: typing.Optional[int] = None,
        end_date_time_time: typing.Optional[int] = None,
        end_date_time_timezone_offset: typing.Optional[int] = None,
        end_date_time_year: typing.Optional[int] = None,
        end_date_time_str: typing.Optional[str] = None,
        id: typing.Optional[int] = None,
        invoice_id: typing.Optional[int] = None,
        notes: typing.Optional[str] = None,
        number_of_days: typing.Optional[int] = None,
        payment_date: typing.Optional[date] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        project_model_account: typing.Optional[int] = None,
        timesheet_id: typing.Optional[int] = None,
        timezone: typing.Optional[str] = None,
        used_time: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_timecard_mapped_args(
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            custom_hours=custom_hours,
            date=date,
            description=description,
            elapsed_time_date=elapsed_time_date,
            elapsed_time_day=elapsed_time_day,
            elapsed_time_hours=elapsed_time_hours,
            elapsed_time_minutes=elapsed_time_minutes,
            elapsed_time_month=elapsed_time_month,
            elapsed_time_seconds=elapsed_time_seconds,
            elapsed_time_time=elapsed_time_time,
            elapsed_time_timezone_offset=elapsed_time_timezone_offset,
            elapsed_time_year=elapsed_time_year,
            end_date_time_date=end_date_time_date,
            end_date_time_day=end_date_time_day,
            end_date_time_hours=end_date_time_hours,
            end_date_time_minutes=end_date_time_minutes,
            end_date_time_month=end_date_time_month,
            end_date_time_nanos=end_date_time_nanos,
            end_date_time_seconds=end_date_time_seconds,
            end_date_time_time=end_date_time_time,
            end_date_time_timezone_offset=end_date_time_timezone_offset,
            end_date_time_year=end_date_time_year,
            end_date_time_str=end_date_time_str,
            id=id,
            invoice_id=invoice_id,
            notes=notes,
            number_of_days=number_of_days,
            payment_date=payment_date,
            project_id=project_id,
            project_manager=project_manager,
            project_model_account=project_model_account,
            timesheet_id=timesheet_id,
            timezone=timezone,
            used_time=used_time,
        )
        return await self._acreate_timecard_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def create_timecard(
        self,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        custom_hours: typing.Optional[str] = None,
        date: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        elapsed_time_date: typing.Optional[int] = None,
        elapsed_time_day: typing.Optional[int] = None,
        elapsed_time_hours: typing.Optional[int] = None,
        elapsed_time_minutes: typing.Optional[int] = None,
        elapsed_time_month: typing.Optional[int] = None,
        elapsed_time_seconds: typing.Optional[int] = None,
        elapsed_time_time: typing.Optional[int] = None,
        elapsed_time_timezone_offset: typing.Optional[int] = None,
        elapsed_time_year: typing.Optional[int] = None,
        end_date_time_date: typing.Optional[int] = None,
        end_date_time_day: typing.Optional[int] = None,
        end_date_time_hours: typing.Optional[int] = None,
        end_date_time_minutes: typing.Optional[int] = None,
        end_date_time_month: typing.Optional[int] = None,
        end_date_time_nanos: typing.Optional[int] = None,
        end_date_time_seconds: typing.Optional[int] = None,
        end_date_time_time: typing.Optional[int] = None,
        end_date_time_timezone_offset: typing.Optional[int] = None,
        end_date_time_year: typing.Optional[int] = None,
        end_date_time_str: typing.Optional[str] = None,
        id: typing.Optional[int] = None,
        invoice_id: typing.Optional[int] = None,
        notes: typing.Optional[str] = None,
        number_of_days: typing.Optional[int] = None,
        payment_date: typing.Optional[date] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        project_model_account: typing.Optional[int] = None,
        timesheet_id: typing.Optional[int] = None,
        timezone: typing.Optional[str] = None,
        used_time: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_timecard_mapped_args(
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            custom_hours=custom_hours,
            date=date,
            description=description,
            elapsed_time_date=elapsed_time_date,
            elapsed_time_day=elapsed_time_day,
            elapsed_time_hours=elapsed_time_hours,
            elapsed_time_minutes=elapsed_time_minutes,
            elapsed_time_month=elapsed_time_month,
            elapsed_time_seconds=elapsed_time_seconds,
            elapsed_time_time=elapsed_time_time,
            elapsed_time_timezone_offset=elapsed_time_timezone_offset,
            elapsed_time_year=elapsed_time_year,
            end_date_time_date=end_date_time_date,
            end_date_time_day=end_date_time_day,
            end_date_time_hours=end_date_time_hours,
            end_date_time_minutes=end_date_time_minutes,
            end_date_time_month=end_date_time_month,
            end_date_time_nanos=end_date_time_nanos,
            end_date_time_seconds=end_date_time_seconds,
            end_date_time_time=end_date_time_time,
            end_date_time_timezone_offset=end_date_time_timezone_offset,
            end_date_time_year=end_date_time_year,
            end_date_time_str=end_date_time_str,
            id=id,
            invoice_id=invoice_id,
            notes=notes,
            number_of_days=number_of_days,
            payment_date=payment_date,
            project_id=project_id,
            project_manager=project_manager,
            project_model_account=project_model_account,
            timesheet_id=timesheet_id,
            timezone=timezone,
            used_time=used_time,
        )
        return self._create_timecard_oapg(
            query_params=args.query,
        )

class CreateTimecard(BaseApi):

    async def acreate_timecard(
        self,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        custom_hours: typing.Optional[str] = None,
        date: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        elapsed_time_date: typing.Optional[int] = None,
        elapsed_time_day: typing.Optional[int] = None,
        elapsed_time_hours: typing.Optional[int] = None,
        elapsed_time_minutes: typing.Optional[int] = None,
        elapsed_time_month: typing.Optional[int] = None,
        elapsed_time_seconds: typing.Optional[int] = None,
        elapsed_time_time: typing.Optional[int] = None,
        elapsed_time_timezone_offset: typing.Optional[int] = None,
        elapsed_time_year: typing.Optional[int] = None,
        end_date_time_date: typing.Optional[int] = None,
        end_date_time_day: typing.Optional[int] = None,
        end_date_time_hours: typing.Optional[int] = None,
        end_date_time_minutes: typing.Optional[int] = None,
        end_date_time_month: typing.Optional[int] = None,
        end_date_time_nanos: typing.Optional[int] = None,
        end_date_time_seconds: typing.Optional[int] = None,
        end_date_time_time: typing.Optional[int] = None,
        end_date_time_timezone_offset: typing.Optional[int] = None,
        end_date_time_year: typing.Optional[int] = None,
        end_date_time_str: typing.Optional[str] = None,
        id: typing.Optional[int] = None,
        invoice_id: typing.Optional[int] = None,
        notes: typing.Optional[str] = None,
        number_of_days: typing.Optional[int] = None,
        payment_date: typing.Optional[date] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        project_model_account: typing.Optional[int] = None,
        timesheet_id: typing.Optional[int] = None,
        timezone: typing.Optional[str] = None,
        used_time: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> Dictionary:
        raw_response = await self.raw.acreate_timecard(
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            custom_hours=custom_hours,
            date=date,
            description=description,
            elapsed_time_date=elapsed_time_date,
            elapsed_time_day=elapsed_time_day,
            elapsed_time_hours=elapsed_time_hours,
            elapsed_time_minutes=elapsed_time_minutes,
            elapsed_time_month=elapsed_time_month,
            elapsed_time_seconds=elapsed_time_seconds,
            elapsed_time_time=elapsed_time_time,
            elapsed_time_timezone_offset=elapsed_time_timezone_offset,
            elapsed_time_year=elapsed_time_year,
            end_date_time_date=end_date_time_date,
            end_date_time_day=end_date_time_day,
            end_date_time_hours=end_date_time_hours,
            end_date_time_minutes=end_date_time_minutes,
            end_date_time_month=end_date_time_month,
            end_date_time_nanos=end_date_time_nanos,
            end_date_time_seconds=end_date_time_seconds,
            end_date_time_time=end_date_time_time,
            end_date_time_timezone_offset=end_date_time_timezone_offset,
            end_date_time_year=end_date_time_year,
            end_date_time_str=end_date_time_str,
            id=id,
            invoice_id=invoice_id,
            notes=notes,
            number_of_days=number_of_days,
            payment_date=payment_date,
            project_id=project_id,
            project_manager=project_manager,
            project_model_account=project_model_account,
            timesheet_id=timesheet_id,
            timezone=timezone,
            used_time=used_time,
            **kwargs,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)
    
    
    def create_timecard(
        self,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        custom_hours: typing.Optional[str] = None,
        date: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        elapsed_time_date: typing.Optional[int] = None,
        elapsed_time_day: typing.Optional[int] = None,
        elapsed_time_hours: typing.Optional[int] = None,
        elapsed_time_minutes: typing.Optional[int] = None,
        elapsed_time_month: typing.Optional[int] = None,
        elapsed_time_seconds: typing.Optional[int] = None,
        elapsed_time_time: typing.Optional[int] = None,
        elapsed_time_timezone_offset: typing.Optional[int] = None,
        elapsed_time_year: typing.Optional[int] = None,
        end_date_time_date: typing.Optional[int] = None,
        end_date_time_day: typing.Optional[int] = None,
        end_date_time_hours: typing.Optional[int] = None,
        end_date_time_minutes: typing.Optional[int] = None,
        end_date_time_month: typing.Optional[int] = None,
        end_date_time_nanos: typing.Optional[int] = None,
        end_date_time_seconds: typing.Optional[int] = None,
        end_date_time_time: typing.Optional[int] = None,
        end_date_time_timezone_offset: typing.Optional[int] = None,
        end_date_time_year: typing.Optional[int] = None,
        end_date_time_str: typing.Optional[str] = None,
        id: typing.Optional[int] = None,
        invoice_id: typing.Optional[int] = None,
        notes: typing.Optional[str] = None,
        number_of_days: typing.Optional[int] = None,
        payment_date: typing.Optional[date] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        project_model_account: typing.Optional[int] = None,
        timesheet_id: typing.Optional[int] = None,
        timezone: typing.Optional[str] = None,
        used_time: typing.Optional[int] = None,
        validate: bool = False,
    ) -> Dictionary:
        raw_response = self.raw.create_timecard(
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            custom_hours=custom_hours,
            date=date,
            description=description,
            elapsed_time_date=elapsed_time_date,
            elapsed_time_day=elapsed_time_day,
            elapsed_time_hours=elapsed_time_hours,
            elapsed_time_minutes=elapsed_time_minutes,
            elapsed_time_month=elapsed_time_month,
            elapsed_time_seconds=elapsed_time_seconds,
            elapsed_time_time=elapsed_time_time,
            elapsed_time_timezone_offset=elapsed_time_timezone_offset,
            elapsed_time_year=elapsed_time_year,
            end_date_time_date=end_date_time_date,
            end_date_time_day=end_date_time_day,
            end_date_time_hours=end_date_time_hours,
            end_date_time_minutes=end_date_time_minutes,
            end_date_time_month=end_date_time_month,
            end_date_time_nanos=end_date_time_nanos,
            end_date_time_seconds=end_date_time_seconds,
            end_date_time_time=end_date_time_time,
            end_date_time_timezone_offset=end_date_time_timezone_offset,
            end_date_time_year=end_date_time_year,
            end_date_time_str=end_date_time_str,
            id=id,
            invoice_id=invoice_id,
            notes=notes,
            number_of_days=number_of_days,
            payment_date=payment_date,
            project_id=project_id,
            project_manager=project_manager,
            project_model_account=project_model_account,
            timesheet_id=timesheet_id,
            timezone=timezone,
            used_time=used_time,
        )
        if validate:
            return Dictionary(**raw_response.body)
        return api_client.construct_model_instance(Dictionary, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        custom_hours: typing.Optional[str] = None,
        date: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        elapsed_time_date: typing.Optional[int] = None,
        elapsed_time_day: typing.Optional[int] = None,
        elapsed_time_hours: typing.Optional[int] = None,
        elapsed_time_minutes: typing.Optional[int] = None,
        elapsed_time_month: typing.Optional[int] = None,
        elapsed_time_seconds: typing.Optional[int] = None,
        elapsed_time_time: typing.Optional[int] = None,
        elapsed_time_timezone_offset: typing.Optional[int] = None,
        elapsed_time_year: typing.Optional[int] = None,
        end_date_time_date: typing.Optional[int] = None,
        end_date_time_day: typing.Optional[int] = None,
        end_date_time_hours: typing.Optional[int] = None,
        end_date_time_minutes: typing.Optional[int] = None,
        end_date_time_month: typing.Optional[int] = None,
        end_date_time_nanos: typing.Optional[int] = None,
        end_date_time_seconds: typing.Optional[int] = None,
        end_date_time_time: typing.Optional[int] = None,
        end_date_time_timezone_offset: typing.Optional[int] = None,
        end_date_time_year: typing.Optional[int] = None,
        end_date_time_str: typing.Optional[str] = None,
        id: typing.Optional[int] = None,
        invoice_id: typing.Optional[int] = None,
        notes: typing.Optional[str] = None,
        number_of_days: typing.Optional[int] = None,
        payment_date: typing.Optional[date] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        project_model_account: typing.Optional[int] = None,
        timesheet_id: typing.Optional[int] = None,
        timezone: typing.Optional[str] = None,
        used_time: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_timecard_mapped_args(
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            custom_hours=custom_hours,
            date=date,
            description=description,
            elapsed_time_date=elapsed_time_date,
            elapsed_time_day=elapsed_time_day,
            elapsed_time_hours=elapsed_time_hours,
            elapsed_time_minutes=elapsed_time_minutes,
            elapsed_time_month=elapsed_time_month,
            elapsed_time_seconds=elapsed_time_seconds,
            elapsed_time_time=elapsed_time_time,
            elapsed_time_timezone_offset=elapsed_time_timezone_offset,
            elapsed_time_year=elapsed_time_year,
            end_date_time_date=end_date_time_date,
            end_date_time_day=end_date_time_day,
            end_date_time_hours=end_date_time_hours,
            end_date_time_minutes=end_date_time_minutes,
            end_date_time_month=end_date_time_month,
            end_date_time_nanos=end_date_time_nanos,
            end_date_time_seconds=end_date_time_seconds,
            end_date_time_time=end_date_time_time,
            end_date_time_timezone_offset=end_date_time_timezone_offset,
            end_date_time_year=end_date_time_year,
            end_date_time_str=end_date_time_str,
            id=id,
            invoice_id=invoice_id,
            notes=notes,
            number_of_days=number_of_days,
            payment_date=payment_date,
            project_id=project_id,
            project_manager=project_manager,
            project_model_account=project_model_account,
            timesheet_id=timesheet_id,
            timezone=timezone,
            used_time=used_time,
        )
        return await self._acreate_timecard_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        createts_date: typing.Optional[int] = None,
        createts_day: typing.Optional[int] = None,
        createts_hours: typing.Optional[int] = None,
        createts_minutes: typing.Optional[int] = None,
        createts_month: typing.Optional[int] = None,
        createts_nanos: typing.Optional[int] = None,
        createts_seconds: typing.Optional[int] = None,
        createts_time: typing.Optional[int] = None,
        createts_timezone_offset: typing.Optional[int] = None,
        createts_year: typing.Optional[int] = None,
        custom_hours: typing.Optional[str] = None,
        date: typing.Optional[date] = None,
        description: typing.Optional[str] = None,
        elapsed_time_date: typing.Optional[int] = None,
        elapsed_time_day: typing.Optional[int] = None,
        elapsed_time_hours: typing.Optional[int] = None,
        elapsed_time_minutes: typing.Optional[int] = None,
        elapsed_time_month: typing.Optional[int] = None,
        elapsed_time_seconds: typing.Optional[int] = None,
        elapsed_time_time: typing.Optional[int] = None,
        elapsed_time_timezone_offset: typing.Optional[int] = None,
        elapsed_time_year: typing.Optional[int] = None,
        end_date_time_date: typing.Optional[int] = None,
        end_date_time_day: typing.Optional[int] = None,
        end_date_time_hours: typing.Optional[int] = None,
        end_date_time_minutes: typing.Optional[int] = None,
        end_date_time_month: typing.Optional[int] = None,
        end_date_time_nanos: typing.Optional[int] = None,
        end_date_time_seconds: typing.Optional[int] = None,
        end_date_time_time: typing.Optional[int] = None,
        end_date_time_timezone_offset: typing.Optional[int] = None,
        end_date_time_year: typing.Optional[int] = None,
        end_date_time_str: typing.Optional[str] = None,
        id: typing.Optional[int] = None,
        invoice_id: typing.Optional[int] = None,
        notes: typing.Optional[str] = None,
        number_of_days: typing.Optional[int] = None,
        payment_date: typing.Optional[date] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        project_model_account: typing.Optional[int] = None,
        timesheet_id: typing.Optional[int] = None,
        timezone: typing.Optional[str] = None,
        used_time: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_timecard_mapped_args(
            createts_date=createts_date,
            createts_day=createts_day,
            createts_hours=createts_hours,
            createts_minutes=createts_minutes,
            createts_month=createts_month,
            createts_nanos=createts_nanos,
            createts_seconds=createts_seconds,
            createts_time=createts_time,
            createts_timezone_offset=createts_timezone_offset,
            createts_year=createts_year,
            custom_hours=custom_hours,
            date=date,
            description=description,
            elapsed_time_date=elapsed_time_date,
            elapsed_time_day=elapsed_time_day,
            elapsed_time_hours=elapsed_time_hours,
            elapsed_time_minutes=elapsed_time_minutes,
            elapsed_time_month=elapsed_time_month,
            elapsed_time_seconds=elapsed_time_seconds,
            elapsed_time_time=elapsed_time_time,
            elapsed_time_timezone_offset=elapsed_time_timezone_offset,
            elapsed_time_year=elapsed_time_year,
            end_date_time_date=end_date_time_date,
            end_date_time_day=end_date_time_day,
            end_date_time_hours=end_date_time_hours,
            end_date_time_minutes=end_date_time_minutes,
            end_date_time_month=end_date_time_month,
            end_date_time_nanos=end_date_time_nanos,
            end_date_time_seconds=end_date_time_seconds,
            end_date_time_time=end_date_time_time,
            end_date_time_timezone_offset=end_date_time_timezone_offset,
            end_date_time_year=end_date_time_year,
            end_date_time_str=end_date_time_str,
            id=id,
            invoice_id=invoice_id,
            notes=notes,
            number_of_days=number_of_days,
            payment_date=payment_date,
            project_id=project_id,
            project_manager=project_manager,
            project_model_account=project_model_account,
            timesheet_id=timesheet_id,
            timezone=timezone,
            used_time=used_time,
        )
        return self._create_timecard_oapg(
            query_params=args.query,
        )


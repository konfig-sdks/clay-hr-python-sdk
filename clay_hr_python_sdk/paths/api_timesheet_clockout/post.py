# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from clay_hr_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from clay_hr_python_sdk.api_response import AsyncGeneratorResponse
from clay_hr_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401

from clay_hr_python_sdk.model.timesheets_clock_out409_response import TimesheetsClockOut409Response as TimesheetsClockOut409ResponseSchema
from clay_hr_python_sdk.model.timesheets_clock_out401_response import TimesheetsClockOut401Response as TimesheetsClockOut401ResponseSchema
from clay_hr_python_sdk.model.timesheets_clock_out_response import TimesheetsClockOutResponse as TimesheetsClockOutResponseSchema

from clay_hr_python_sdk.type.timesheets_clock_out_response import TimesheetsClockOutResponse
from clay_hr_python_sdk.type.timesheets_clock_out409_response import TimesheetsClockOut409Response
from clay_hr_python_sdk.type.timesheets_clock_out401_response import TimesheetsClockOut401Response

from ...api_client import Dictionary
from clay_hr_python_sdk.pydantic.timesheets_clock_out_response import TimesheetsClockOutResponse as TimesheetsClockOutResponsePydantic
from clay_hr_python_sdk.pydantic.timesheets_clock_out409_response import TimesheetsClockOut409Response as TimesheetsClockOut409ResponsePydantic
from clay_hr_python_sdk.pydantic.timesheets_clock_out401_response import TimesheetsClockOut401Response as TimesheetsClockOut401ResponsePydantic

from . import path

# Query params
ProceedOutsideGeoFenceSchema = schemas.Int32Schema
DescriptionSchema = schemas.StrSchema
ProjectIdSchema = schemas.Int32Schema
ProjectManagerSchema = schemas.StrSchema


class CategoryCodeSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "RG": "RG",
            "OT": "OT",
        }
    
    @schemas.classproperty
    def RG(cls):
        return cls("RG")
    
    @schemas.classproperty
    def OT(cls):
        return cls("OT")
NotesSchema = schemas.StrSchema


class BillableSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "Y": "Y",
            "N": "N",
        }
    
    @schemas.classproperty
    def Y(cls):
        return cls("Y")
    
    @schemas.classproperty
    def N(cls):
        return cls("N")
ActivitySchema = schemas.StrSchema
ApprovalRejectionReasonSchema = schemas.StrSchema
ClockInLongitudeSchema = schemas.Float64Schema
ClockInLatitudeSchema = schemas.Float64Schema
ClockOutLongitudeSchema = schemas.Float64Schema
ClockOutLatitudeSchema = schemas.Float64Schema
ProjectAreaIdSchema = schemas.Int32Schema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'proceedOutsideGeoFence': typing.Union[ProceedOutsideGeoFenceSchema, decimal.Decimal, int, ],
        'description': typing.Union[DescriptionSchema, str, ],
        'projectId': typing.Union[ProjectIdSchema, decimal.Decimal, int, ],
        'projectManager': typing.Union[ProjectManagerSchema, str, ],
        'categoryCode': typing.Union[CategoryCodeSchema, str, ],
        'notes': typing.Union[NotesSchema, str, ],
        'billable': typing.Union[BillableSchema, str, ],
        'activity': typing.Union[ActivitySchema, str, ],
        'approvalRejectionReason': typing.Union[ApprovalRejectionReasonSchema, str, ],
        'clockInLongitude': typing.Union[ClockInLongitudeSchema, decimal.Decimal, int, float, ],
        'clockInLatitude': typing.Union[ClockInLatitudeSchema, decimal.Decimal, int, float, ],
        'clockOutLongitude': typing.Union[ClockOutLongitudeSchema, decimal.Decimal, int, float, ],
        'clockOutLatitude': typing.Union[ClockOutLatitudeSchema, decimal.Decimal, int, float, ],
        'projectAreaId': typing.Union[ProjectAreaIdSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_proceed_outside_geo_fence = api_client.QueryParameter(
    name="proceedOutsideGeoFence",
    style=api_client.ParameterStyle.FORM,
    schema=ProceedOutsideGeoFenceSchema,
    explode=True,
)
request_query_description = api_client.QueryParameter(
    name="description",
    style=api_client.ParameterStyle.FORM,
    schema=DescriptionSchema,
    explode=True,
)
request_query_project_id = api_client.QueryParameter(
    name="projectId",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectIdSchema,
    explode=True,
)
request_query_project_manager = api_client.QueryParameter(
    name="projectManager",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectManagerSchema,
    explode=True,
)
request_query_category_code = api_client.QueryParameter(
    name="categoryCode",
    style=api_client.ParameterStyle.FORM,
    schema=CategoryCodeSchema,
    explode=True,
)
request_query_notes = api_client.QueryParameter(
    name="notes",
    style=api_client.ParameterStyle.FORM,
    schema=NotesSchema,
    explode=True,
)
request_query_billable = api_client.QueryParameter(
    name="billable",
    style=api_client.ParameterStyle.FORM,
    schema=BillableSchema,
    explode=True,
)
request_query_activity = api_client.QueryParameter(
    name="activity",
    style=api_client.ParameterStyle.FORM,
    schema=ActivitySchema,
    explode=True,
)
request_query_approval_rejection_reason = api_client.QueryParameter(
    name="approvalRejectionReason",
    style=api_client.ParameterStyle.FORM,
    schema=ApprovalRejectionReasonSchema,
    explode=True,
)
request_query_clock_in_longitude = api_client.QueryParameter(
    name="clockInLongitude",
    style=api_client.ParameterStyle.FORM,
    schema=ClockInLongitudeSchema,
    explode=True,
)
request_query_clock_in_latitude = api_client.QueryParameter(
    name="clockInLatitude",
    style=api_client.ParameterStyle.FORM,
    schema=ClockInLatitudeSchema,
    explode=True,
)
request_query_clock_out_longitude = api_client.QueryParameter(
    name="clockOutLongitude",
    style=api_client.ParameterStyle.FORM,
    schema=ClockOutLongitudeSchema,
    explode=True,
)
request_query_clock_out_latitude = api_client.QueryParameter(
    name="clockOutLatitude",
    style=api_client.ParameterStyle.FORM,
    schema=ClockOutLatitudeSchema,
    explode=True,
)
request_query_project_area_id = api_client.QueryParameter(
    name="projectAreaId",
    style=api_client.ParameterStyle.FORM,
    schema=ProjectAreaIdSchema,
    explode=True,
)
_auth = [
    'sec0',
    'sec1',
]
SchemaFor200ResponseBodyApplicationJson = TimesheetsClockOutResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: TimesheetsClockOutResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: TimesheetsClockOutResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor401ResponseBodyApplicationJson = TimesheetsClockOut401ResponseSchema


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: TimesheetsClockOut401Response


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: TimesheetsClockOut401Response


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor409ResponseBodyApplicationJson = TimesheetsClockOut409ResponseSchema


@dataclass
class ApiResponseFor409(api_client.ApiResponse):
    body: TimesheetsClockOut409Response


@dataclass
class ApiResponseFor409Async(api_client.AsyncApiResponse):
    body: TimesheetsClockOut409Response


_response_for_409 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor409,
    response_cls_async=ApiResponseFor409Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor409ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '401': _response_for_401,
    '409': _response_for_409,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _clock_out_mapped_args(
        self,
        proceed_outside_geo_fence: typing.Optional[int] = None,
        description: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        category_code: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        billable: typing.Optional[str] = None,
        activity: typing.Optional[str] = None,
        approval_rejection_reason: typing.Optional[str] = None,
        clock_in_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_in_latitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_latitude: typing.Optional[typing.Union[int, float]] = None,
        project_area_id: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if proceed_outside_geo_fence is not None:
            _query_params["proceedOutsideGeoFence"] = proceed_outside_geo_fence
        if description is not None:
            _query_params["description"] = description
        if project_id is not None:
            _query_params["projectId"] = project_id
        if project_manager is not None:
            _query_params["projectManager"] = project_manager
        if category_code is not None:
            _query_params["categoryCode"] = category_code
        if notes is not None:
            _query_params["notes"] = notes
        if billable is not None:
            _query_params["billable"] = billable
        if activity is not None:
            _query_params["activity"] = activity
        if approval_rejection_reason is not None:
            _query_params["approvalRejectionReason"] = approval_rejection_reason
        if clock_in_longitude is not None:
            _query_params["clockInLongitude"] = clock_in_longitude
        if clock_in_latitude is not None:
            _query_params["clockInLatitude"] = clock_in_latitude
        if clock_out_longitude is not None:
            _query_params["clockOutLongitude"] = clock_out_longitude
        if clock_out_latitude is not None:
            _query_params["clockOutLatitude"] = clock_out_latitude
        if project_area_id is not None:
            _query_params["projectAreaId"] = project_area_id
        args.query = _query_params
        return args

    async def _aclock_out_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Clock out.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_proceed_outside_geo_fence,
            request_query_description,
            request_query_project_id,
            request_query_project_manager,
            request_query_category_code,
            request_query_notes,
            request_query_billable,
            request_query_activity,
            request_query_approval_rejection_reason,
            request_query_clock_in_longitude,
            request_query_clock_in_latitude,
            request_query_clock_out_longitude,
            request_query_clock_out_latitude,
            request_query_project_area_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/timesheet/clockout',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _clock_out_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Clock out.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_proceed_outside_geo_fence,
            request_query_description,
            request_query_project_id,
            request_query_project_manager,
            request_query_category_code,
            request_query_notes,
            request_query_billable,
            request_query_activity,
            request_query_approval_rejection_reason,
            request_query_clock_in_longitude,
            request_query_clock_in_latitude,
            request_query_clock_out_longitude,
            request_query_clock_out_latitude,
            request_query_project_area_id,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/api/timesheet/clockout',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ClockOutRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aclock_out(
        self,
        proceed_outside_geo_fence: typing.Optional[int] = None,
        description: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        category_code: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        billable: typing.Optional[str] = None,
        activity: typing.Optional[str] = None,
        approval_rejection_reason: typing.Optional[str] = None,
        clock_in_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_in_latitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_latitude: typing.Optional[typing.Union[int, float]] = None,
        project_area_id: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._clock_out_mapped_args(
            proceed_outside_geo_fence=proceed_outside_geo_fence,
            description=description,
            project_id=project_id,
            project_manager=project_manager,
            category_code=category_code,
            notes=notes,
            billable=billable,
            activity=activity,
            approval_rejection_reason=approval_rejection_reason,
            clock_in_longitude=clock_in_longitude,
            clock_in_latitude=clock_in_latitude,
            clock_out_longitude=clock_out_longitude,
            clock_out_latitude=clock_out_latitude,
            project_area_id=project_area_id,
        )
        return await self._aclock_out_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def clock_out(
        self,
        proceed_outside_geo_fence: typing.Optional[int] = None,
        description: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        category_code: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        billable: typing.Optional[str] = None,
        activity: typing.Optional[str] = None,
        approval_rejection_reason: typing.Optional[str] = None,
        clock_in_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_in_latitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_latitude: typing.Optional[typing.Union[int, float]] = None,
        project_area_id: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._clock_out_mapped_args(
            proceed_outside_geo_fence=proceed_outside_geo_fence,
            description=description,
            project_id=project_id,
            project_manager=project_manager,
            category_code=category_code,
            notes=notes,
            billable=billable,
            activity=activity,
            approval_rejection_reason=approval_rejection_reason,
            clock_in_longitude=clock_in_longitude,
            clock_in_latitude=clock_in_latitude,
            clock_out_longitude=clock_out_longitude,
            clock_out_latitude=clock_out_latitude,
            project_area_id=project_area_id,
        )
        return self._clock_out_oapg(
            query_params=args.query,
        )

class ClockOut(BaseApi):

    async def aclock_out(
        self,
        proceed_outside_geo_fence: typing.Optional[int] = None,
        description: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        category_code: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        billable: typing.Optional[str] = None,
        activity: typing.Optional[str] = None,
        approval_rejection_reason: typing.Optional[str] = None,
        clock_in_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_in_latitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_latitude: typing.Optional[typing.Union[int, float]] = None,
        project_area_id: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> TimesheetsClockOutResponsePydantic:
        raw_response = await self.raw.aclock_out(
            proceed_outside_geo_fence=proceed_outside_geo_fence,
            description=description,
            project_id=project_id,
            project_manager=project_manager,
            category_code=category_code,
            notes=notes,
            billable=billable,
            activity=activity,
            approval_rejection_reason=approval_rejection_reason,
            clock_in_longitude=clock_in_longitude,
            clock_in_latitude=clock_in_latitude,
            clock_out_longitude=clock_out_longitude,
            clock_out_latitude=clock_out_latitude,
            project_area_id=project_area_id,
            **kwargs,
        )
        if validate:
            return TimesheetsClockOutResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(TimesheetsClockOutResponsePydantic, raw_response.body)
    
    
    def clock_out(
        self,
        proceed_outside_geo_fence: typing.Optional[int] = None,
        description: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        category_code: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        billable: typing.Optional[str] = None,
        activity: typing.Optional[str] = None,
        approval_rejection_reason: typing.Optional[str] = None,
        clock_in_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_in_latitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_latitude: typing.Optional[typing.Union[int, float]] = None,
        project_area_id: typing.Optional[int] = None,
        validate: bool = False,
    ) -> TimesheetsClockOutResponsePydantic:
        raw_response = self.raw.clock_out(
            proceed_outside_geo_fence=proceed_outside_geo_fence,
            description=description,
            project_id=project_id,
            project_manager=project_manager,
            category_code=category_code,
            notes=notes,
            billable=billable,
            activity=activity,
            approval_rejection_reason=approval_rejection_reason,
            clock_in_longitude=clock_in_longitude,
            clock_in_latitude=clock_in_latitude,
            clock_out_longitude=clock_out_longitude,
            clock_out_latitude=clock_out_latitude,
            project_area_id=project_area_id,
        )
        if validate:
            return TimesheetsClockOutResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(TimesheetsClockOutResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        proceed_outside_geo_fence: typing.Optional[int] = None,
        description: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        category_code: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        billable: typing.Optional[str] = None,
        activity: typing.Optional[str] = None,
        approval_rejection_reason: typing.Optional[str] = None,
        clock_in_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_in_latitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_latitude: typing.Optional[typing.Union[int, float]] = None,
        project_area_id: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._clock_out_mapped_args(
            proceed_outside_geo_fence=proceed_outside_geo_fence,
            description=description,
            project_id=project_id,
            project_manager=project_manager,
            category_code=category_code,
            notes=notes,
            billable=billable,
            activity=activity,
            approval_rejection_reason=approval_rejection_reason,
            clock_in_longitude=clock_in_longitude,
            clock_in_latitude=clock_in_latitude,
            clock_out_longitude=clock_out_longitude,
            clock_out_latitude=clock_out_latitude,
            project_area_id=project_area_id,
        )
        return await self._aclock_out_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def post(
        self,
        proceed_outside_geo_fence: typing.Optional[int] = None,
        description: typing.Optional[str] = None,
        project_id: typing.Optional[int] = None,
        project_manager: typing.Optional[str] = None,
        category_code: typing.Optional[str] = None,
        notes: typing.Optional[str] = None,
        billable: typing.Optional[str] = None,
        activity: typing.Optional[str] = None,
        approval_rejection_reason: typing.Optional[str] = None,
        clock_in_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_in_latitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_longitude: typing.Optional[typing.Union[int, float]] = None,
        clock_out_latitude: typing.Optional[typing.Union[int, float]] = None,
        project_area_id: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._clock_out_mapped_args(
            proceed_outside_geo_fence=proceed_outside_geo_fence,
            description=description,
            project_id=project_id,
            project_manager=project_manager,
            category_code=category_code,
            notes=notes,
            billable=billable,
            activity=activity,
            approval_rejection_reason=approval_rejection_reason,
            clock_in_longitude=clock_in_longitude,
            clock_in_latitude=clock_in_latitude,
            clock_out_longitude=clock_out_longitude,
            clock_out_latitude=clock_out_latitude,
            project_area_id=project_area_id,
        )
        return self._clock_out_oapg(
            query_params=args.query,
        )


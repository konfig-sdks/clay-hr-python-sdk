# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class GoalsGetGoalResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            summary = schemas.StrSchema
            description = schemas.StrSchema
            goalId = schemas.StrSchema
            additive = schemas.StrSchema
            visibleToDirectReports = schemas.StrSchema
            freezeGoal = schemas.StrSchema
            isForward = schemas.StrSchema
            companyGoal = schemas.StrSchema
            elapsedTimeRatio = schemas.StrSchema
            completionRatio = schemas.StrSchema
            progressRatio = schemas.StrSchema
            typecode = schemas.StrSchema
            status = schemas.StrSchema
            state = schemas.StrSchema
            predictiveIndex = schemas.StrSchema
            objectiveId = schemas.StrSchema
            cid = schemas.StrSchema
            disposition = schemas.StrSchema
            units = schemas.StrSchema
        
            @staticmethod
            def assignedUserModel() -> typing.Type['GoalsGetGoalResponseAssignedUserModel']:
                return GoalsGetGoalResponseAssignedUserModel
        
            @staticmethod
            def reviewerUserModel() -> typing.Type['GoalsGetGoalResponseReviewerUserModel']:
                return GoalsGetGoalResponseReviewerUserModel
        
            @staticmethod
            def goalCollaborationModel() -> typing.Type['GoalsGetGoalResponseGoalCollaborationModel']:
                return GoalsGetGoalResponseGoalCollaborationModel
            crediteatets = schemas.StrSchema
            commentCrediteatets = schemas.StrSchema
            commentDescription = schemas.StrSchema
            uname = schemas.StrSchema
            hasGoalApprovalPermission = schemas.StrSchema
            begindate = schemas.StrSchema
            goalWeightage = schemas.StrSchema
            createuserid = schemas.StrSchema
            createts = schemas.IntSchema
        
            @staticmethod
            def projectModel() -> typing.Type['GoalsGetGoalResponseProjectModel']:
                return GoalsGetGoalResponseProjectModel
        
            @staticmethod
            def goalTypeModel() -> typing.Type['GoalsGetGoalResponseGoalTypeModel']:
                return GoalsGetGoalResponseGoalTypeModel
            parentGoalId = schemas.StrSchema
            id = schemas.StrSchema
            createUserId = schemas.StrSchema
            lastUpdateUserId = schemas.StrSchema
            projectid = schemas.StrSchema
            targetdate = schemas.StrSchema
            initialvalue = schemas.StrSchema
            currentvalue = schemas.StrSchema
            goalvalue = schemas.StrSchema
            __annotations__ = {
                "summary": summary,
                "description": description,
                "goalId": goalId,
                "additive": additive,
                "visibleToDirectReports": visibleToDirectReports,
                "freezeGoal": freezeGoal,
                "isForward": isForward,
                "companyGoal": companyGoal,
                "elapsedTimeRatio": elapsedTimeRatio,
                "completionRatio": completionRatio,
                "progressRatio": progressRatio,
                "typecode": typecode,
                "status": status,
                "state": state,
                "predictiveIndex": predictiveIndex,
                "objectiveId": objectiveId,
                "cid": cid,
                "disposition": disposition,
                "units": units,
                "assignedUserModel": assignedUserModel,
                "reviewerUserModel": reviewerUserModel,
                "goalCollaborationModel": goalCollaborationModel,
                "crediteatets": crediteatets,
                "commentCrediteatets": commentCrediteatets,
                "commentDescription": commentDescription,
                "uname": uname,
                "hasGoalApprovalPermission": hasGoalApprovalPermission,
                "begindate": begindate,
                "goalWeightage": goalWeightage,
                "createuserid": createuserid,
                "createts": createts,
                "projectModel": projectModel,
                "goalTypeModel": goalTypeModel,
                "parentGoalId": parentGoalId,
                "id": id,
                "createUserId": createUserId,
                "lastUpdateUserId": lastUpdateUserId,
                "projectid": projectid,
                "targetdate": targetdate,
                "initialvalue": initialvalue,
                "currentvalue": currentvalue,
                "goalvalue": goalvalue,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> MetaOapg.properties.summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalId"]) -> MetaOapg.properties.goalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additive"]) -> MetaOapg.properties.additive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibleToDirectReports"]) -> MetaOapg.properties.visibleToDirectReports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freezeGoal"]) -> MetaOapg.properties.freezeGoal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isForward"]) -> MetaOapg.properties.isForward: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyGoal"]) -> MetaOapg.properties.companyGoal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elapsedTimeRatio"]) -> MetaOapg.properties.elapsedTimeRatio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionRatio"]) -> MetaOapg.properties.completionRatio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progressRatio"]) -> MetaOapg.properties.progressRatio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typecode"]) -> MetaOapg.properties.typecode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predictiveIndex"]) -> MetaOapg.properties.predictiveIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectiveId"]) -> MetaOapg.properties.objectiveId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disposition"]) -> MetaOapg.properties.disposition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedUserModel"]) -> 'GoalsGetGoalResponseAssignedUserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewerUserModel"]) -> 'GoalsGetGoalResponseReviewerUserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalCollaborationModel"]) -> 'GoalsGetGoalResponseGoalCollaborationModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crediteatets"]) -> MetaOapg.properties.crediteatets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commentCrediteatets"]) -> MetaOapg.properties.commentCrediteatets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commentDescription"]) -> MetaOapg.properties.commentDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uname"]) -> MetaOapg.properties.uname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasGoalApprovalPermission"]) -> MetaOapg.properties.hasGoalApprovalPermission: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["begindate"]) -> MetaOapg.properties.begindate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalWeightage"]) -> MetaOapg.properties.goalWeightage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createuserid"]) -> MetaOapg.properties.createuserid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectModel"]) -> 'GoalsGetGoalResponseProjectModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalTypeModel"]) -> 'GoalsGetGoalResponseGoalTypeModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentGoalId"]) -> MetaOapg.properties.parentGoalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdateUserId"]) -> MetaOapg.properties.lastUpdateUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectid"]) -> MetaOapg.properties.projectid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetdate"]) -> MetaOapg.properties.targetdate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initialvalue"]) -> MetaOapg.properties.initialvalue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentvalue"]) -> MetaOapg.properties.currentvalue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalvalue"]) -> MetaOapg.properties.goalvalue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "description", "goalId", "additive", "visibleToDirectReports", "freezeGoal", "isForward", "companyGoal", "elapsedTimeRatio", "completionRatio", "progressRatio", "typecode", "status", "state", "predictiveIndex", "objectiveId", "cid", "disposition", "units", "assignedUserModel", "reviewerUserModel", "goalCollaborationModel", "crediteatets", "commentCrediteatets", "commentDescription", "uname", "hasGoalApprovalPermission", "begindate", "goalWeightage", "createuserid", "createts", "projectModel", "goalTypeModel", "parentGoalId", "id", "createUserId", "lastUpdateUserId", "projectid", "targetdate", "initialvalue", "currentvalue", "goalvalue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union[MetaOapg.properties.summary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalId"]) -> typing.Union[MetaOapg.properties.goalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additive"]) -> typing.Union[MetaOapg.properties.additive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibleToDirectReports"]) -> typing.Union[MetaOapg.properties.visibleToDirectReports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freezeGoal"]) -> typing.Union[MetaOapg.properties.freezeGoal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isForward"]) -> typing.Union[MetaOapg.properties.isForward, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyGoal"]) -> typing.Union[MetaOapg.properties.companyGoal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elapsedTimeRatio"]) -> typing.Union[MetaOapg.properties.elapsedTimeRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionRatio"]) -> typing.Union[MetaOapg.properties.completionRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progressRatio"]) -> typing.Union[MetaOapg.properties.progressRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typecode"]) -> typing.Union[MetaOapg.properties.typecode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predictiveIndex"]) -> typing.Union[MetaOapg.properties.predictiveIndex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectiveId"]) -> typing.Union[MetaOapg.properties.objectiveId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disposition"]) -> typing.Union[MetaOapg.properties.disposition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedUserModel"]) -> typing.Union['GoalsGetGoalResponseAssignedUserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewerUserModel"]) -> typing.Union['GoalsGetGoalResponseReviewerUserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalCollaborationModel"]) -> typing.Union['GoalsGetGoalResponseGoalCollaborationModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crediteatets"]) -> typing.Union[MetaOapg.properties.crediteatets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commentCrediteatets"]) -> typing.Union[MetaOapg.properties.commentCrediteatets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commentDescription"]) -> typing.Union[MetaOapg.properties.commentDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uname"]) -> typing.Union[MetaOapg.properties.uname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasGoalApprovalPermission"]) -> typing.Union[MetaOapg.properties.hasGoalApprovalPermission, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["begindate"]) -> typing.Union[MetaOapg.properties.begindate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalWeightage"]) -> typing.Union[MetaOapg.properties.goalWeightage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createuserid"]) -> typing.Union[MetaOapg.properties.createuserid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectModel"]) -> typing.Union['GoalsGetGoalResponseProjectModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalTypeModel"]) -> typing.Union['GoalsGetGoalResponseGoalTypeModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentGoalId"]) -> typing.Union[MetaOapg.properties.parentGoalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdateUserId"]) -> typing.Union[MetaOapg.properties.lastUpdateUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectid"]) -> typing.Union[MetaOapg.properties.projectid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetdate"]) -> typing.Union[MetaOapg.properties.targetdate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initialvalue"]) -> typing.Union[MetaOapg.properties.initialvalue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentvalue"]) -> typing.Union[MetaOapg.properties.currentvalue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalvalue"]) -> typing.Union[MetaOapg.properties.goalvalue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "description", "goalId", "additive", "visibleToDirectReports", "freezeGoal", "isForward", "companyGoal", "elapsedTimeRatio", "completionRatio", "progressRatio", "typecode", "status", "state", "predictiveIndex", "objectiveId", "cid", "disposition", "units", "assignedUserModel", "reviewerUserModel", "goalCollaborationModel", "crediteatets", "commentCrediteatets", "commentDescription", "uname", "hasGoalApprovalPermission", "begindate", "goalWeightage", "createuserid", "createts", "projectModel", "goalTypeModel", "parentGoalId", "id", "createUserId", "lastUpdateUserId", "projectid", "targetdate", "initialvalue", "currentvalue", "goalvalue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        summary: typing.Union[MetaOapg.properties.summary, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        goalId: typing.Union[MetaOapg.properties.goalId, str, schemas.Unset] = schemas.unset,
        additive: typing.Union[MetaOapg.properties.additive, str, schemas.Unset] = schemas.unset,
        visibleToDirectReports: typing.Union[MetaOapg.properties.visibleToDirectReports, str, schemas.Unset] = schemas.unset,
        freezeGoal: typing.Union[MetaOapg.properties.freezeGoal, str, schemas.Unset] = schemas.unset,
        isForward: typing.Union[MetaOapg.properties.isForward, str, schemas.Unset] = schemas.unset,
        companyGoal: typing.Union[MetaOapg.properties.companyGoal, str, schemas.Unset] = schemas.unset,
        elapsedTimeRatio: typing.Union[MetaOapg.properties.elapsedTimeRatio, str, schemas.Unset] = schemas.unset,
        completionRatio: typing.Union[MetaOapg.properties.completionRatio, str, schemas.Unset] = schemas.unset,
        progressRatio: typing.Union[MetaOapg.properties.progressRatio, str, schemas.Unset] = schemas.unset,
        typecode: typing.Union[MetaOapg.properties.typecode, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        predictiveIndex: typing.Union[MetaOapg.properties.predictiveIndex, str, schemas.Unset] = schemas.unset,
        objectiveId: typing.Union[MetaOapg.properties.objectiveId, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        disposition: typing.Union[MetaOapg.properties.disposition, str, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, str, schemas.Unset] = schemas.unset,
        assignedUserModel: typing.Union['GoalsGetGoalResponseAssignedUserModel', schemas.Unset] = schemas.unset,
        reviewerUserModel: typing.Union['GoalsGetGoalResponseReviewerUserModel', schemas.Unset] = schemas.unset,
        goalCollaborationModel: typing.Union['GoalsGetGoalResponseGoalCollaborationModel', schemas.Unset] = schemas.unset,
        crediteatets: typing.Union[MetaOapg.properties.crediteatets, str, schemas.Unset] = schemas.unset,
        commentCrediteatets: typing.Union[MetaOapg.properties.commentCrediteatets, str, schemas.Unset] = schemas.unset,
        commentDescription: typing.Union[MetaOapg.properties.commentDescription, str, schemas.Unset] = schemas.unset,
        uname: typing.Union[MetaOapg.properties.uname, str, schemas.Unset] = schemas.unset,
        hasGoalApprovalPermission: typing.Union[MetaOapg.properties.hasGoalApprovalPermission, str, schemas.Unset] = schemas.unset,
        begindate: typing.Union[MetaOapg.properties.begindate, str, schemas.Unset] = schemas.unset,
        goalWeightage: typing.Union[MetaOapg.properties.goalWeightage, str, schemas.Unset] = schemas.unset,
        createuserid: typing.Union[MetaOapg.properties.createuserid, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        projectModel: typing.Union['GoalsGetGoalResponseProjectModel', schemas.Unset] = schemas.unset,
        goalTypeModel: typing.Union['GoalsGetGoalResponseGoalTypeModel', schemas.Unset] = schemas.unset,
        parentGoalId: typing.Union[MetaOapg.properties.parentGoalId, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, str, schemas.Unset] = schemas.unset,
        lastUpdateUserId: typing.Union[MetaOapg.properties.lastUpdateUserId, str, schemas.Unset] = schemas.unset,
        projectid: typing.Union[MetaOapg.properties.projectid, str, schemas.Unset] = schemas.unset,
        targetdate: typing.Union[MetaOapg.properties.targetdate, str, schemas.Unset] = schemas.unset,
        initialvalue: typing.Union[MetaOapg.properties.initialvalue, str, schemas.Unset] = schemas.unset,
        currentvalue: typing.Union[MetaOapg.properties.currentvalue, str, schemas.Unset] = schemas.unset,
        goalvalue: typing.Union[MetaOapg.properties.goalvalue, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GoalsGetGoalResponse':
        return super().__new__(
            cls,
            *args,
            summary=summary,
            description=description,
            goalId=goalId,
            additive=additive,
            visibleToDirectReports=visibleToDirectReports,
            freezeGoal=freezeGoal,
            isForward=isForward,
            companyGoal=companyGoal,
            elapsedTimeRatio=elapsedTimeRatio,
            completionRatio=completionRatio,
            progressRatio=progressRatio,
            typecode=typecode,
            status=status,
            state=state,
            predictiveIndex=predictiveIndex,
            objectiveId=objectiveId,
            cid=cid,
            disposition=disposition,
            units=units,
            assignedUserModel=assignedUserModel,
            reviewerUserModel=reviewerUserModel,
            goalCollaborationModel=goalCollaborationModel,
            crediteatets=crediteatets,
            commentCrediteatets=commentCrediteatets,
            commentDescription=commentDescription,
            uname=uname,
            hasGoalApprovalPermission=hasGoalApprovalPermission,
            begindate=begindate,
            goalWeightage=goalWeightage,
            createuserid=createuserid,
            createts=createts,
            projectModel=projectModel,
            goalTypeModel=goalTypeModel,
            parentGoalId=parentGoalId,
            id=id,
            createUserId=createUserId,
            lastUpdateUserId=lastUpdateUserId,
            projectid=projectid,
            targetdate=targetdate,
            initialvalue=initialvalue,
            currentvalue=currentvalue,
            goalvalue=goalvalue,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.goals_get_goal_response_assigned_user_model import GoalsGetGoalResponseAssignedUserModel
from clay_hr_python_sdk.model.goals_get_goal_response_goal_collaboration_model import GoalsGetGoalResponseGoalCollaborationModel
from clay_hr_python_sdk.model.goals_get_goal_response_goal_type_model import GoalsGetGoalResponseGoalTypeModel
from clay_hr_python_sdk.model.goals_get_goal_response_project_model import GoalsGetGoalResponseProjectModel
from clay_hr_python_sdk.model.goals_get_goal_response_reviewer_user_model import GoalsGetGoalResponseReviewerUserModel

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CustomFields(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            customField1 = schemas.StrSchema
            customField2 = schemas.StrSchema
            customField3 = schemas.StrSchema
            __annotations__ = {
                "customField1": customField1,
                "customField2": customField2,
                "customField3": customField3,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customField1"]) -> MetaOapg.properties.customField1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customField2"]) -> MetaOapg.properties.customField2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customField3"]) -> MetaOapg.properties.customField3: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customField1", "customField2", "customField3", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customField1"]) -> typing.Union[MetaOapg.properties.customField1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customField2"]) -> typing.Union[MetaOapg.properties.customField2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customField3"]) -> typing.Union[MetaOapg.properties.customField3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customField1", "customField2", "customField3", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        customField1: typing.Union[MetaOapg.properties.customField1, str, schemas.Unset] = schemas.unset,
        customField2: typing.Union[MetaOapg.properties.customField2, str, schemas.Unset] = schemas.unset,
        customField3: typing.Union[MetaOapg.properties.customField3, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFields':
        return super().__new__(
            cls,
            *args,
            customField1=customField1,
            customField2=customField2,
            customField3=customField3,
            _configuration=_configuration,
            **kwargs,
        )

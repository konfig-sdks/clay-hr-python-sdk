# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class EmploymentModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            SOCCode = schemas.StrSchema
            cid = schemas.Int32Schema
            city = schemas.StrSchema
            countryId = schemas.Int32Schema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            custAppId = schemas.Int32Schema
            
            
            class customFieldModelList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFieldModel']:
                        return CustomFieldModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomFieldModel'], typing.List['CustomFieldModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customFieldModelList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFieldModel':
                    return super().__getitem__(i)
            department = schemas.StrSchema
            duties = schemas.StrSchema
            empId = schemas.Int32Schema
            employerName = schemas.StrSchema
            employerTypeBus = schemas.StrSchema
            employmentType = schemas.StrSchema
            endDate = schemas.DateSchema
            naicscode = schemas.StrSchema
            position = schemas.StrSchema
            recruitid = schemas.Int32Schema
            soccode = schemas.StrSchema
            startDate = schemas.DateSchema
            state = schemas.StrSchema
            userId = schemas.Int32Schema
            __annotations__ = {
                "SOCCode": SOCCode,
                "cid": cid,
                "city": city,
                "countryId": countryId,
                "createts": createts,
                "custAppId": custAppId,
                "customFieldModelList": customFieldModelList,
                "department": department,
                "duties": duties,
                "empId": empId,
                "employerName": employerName,
                "employerTypeBus": employerTypeBus,
                "employmentType": employmentType,
                "endDate": endDate,
                "naicscode": naicscode,
                "position": position,
                "recruitid": recruitid,
                "soccode": soccode,
                "startDate": startDate,
                "state": state,
                "userId": userId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SOCCode"]) -> MetaOapg.properties.SOCCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryId"]) -> MetaOapg.properties.countryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custAppId"]) -> MetaOapg.properties.custAppId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldModelList"]) -> MetaOapg.properties.customFieldModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> MetaOapg.properties.department: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duties"]) -> MetaOapg.properties.duties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empId"]) -> MetaOapg.properties.empId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerName"]) -> MetaOapg.properties.employerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employerTypeBus"]) -> MetaOapg.properties.employerTypeBus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentType"]) -> MetaOapg.properties.employmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naicscode"]) -> MetaOapg.properties.naicscode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruitid"]) -> MetaOapg.properties.recruitid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["soccode"]) -> MetaOapg.properties.soccode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SOCCode", "cid", "city", "countryId", "createts", "custAppId", "customFieldModelList", "department", "duties", "empId", "employerName", "employerTypeBus", "employmentType", "endDate", "naicscode", "position", "recruitid", "soccode", "startDate", "state", "userId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SOCCode"]) -> typing.Union[MetaOapg.properties.SOCCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryId"]) -> typing.Union[MetaOapg.properties.countryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custAppId"]) -> typing.Union[MetaOapg.properties.custAppId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldModelList"]) -> typing.Union[MetaOapg.properties.customFieldModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union[MetaOapg.properties.department, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duties"]) -> typing.Union[MetaOapg.properties.duties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empId"]) -> typing.Union[MetaOapg.properties.empId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerName"]) -> typing.Union[MetaOapg.properties.employerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employerTypeBus"]) -> typing.Union[MetaOapg.properties.employerTypeBus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentType"]) -> typing.Union[MetaOapg.properties.employmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naicscode"]) -> typing.Union[MetaOapg.properties.naicscode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruitid"]) -> typing.Union[MetaOapg.properties.recruitid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["soccode"]) -> typing.Union[MetaOapg.properties.soccode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SOCCode", "cid", "city", "countryId", "createts", "custAppId", "customFieldModelList", "department", "duties", "empId", "employerName", "employerTypeBus", "employmentType", "endDate", "naicscode", "position", "recruitid", "soccode", "startDate", "state", "userId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        SOCCode: typing.Union[MetaOapg.properties.SOCCode, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        countryId: typing.Union[MetaOapg.properties.countryId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        custAppId: typing.Union[MetaOapg.properties.custAppId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customFieldModelList: typing.Union[MetaOapg.properties.customFieldModelList, list, tuple, schemas.Unset] = schemas.unset,
        department: typing.Union[MetaOapg.properties.department, str, schemas.Unset] = schemas.unset,
        duties: typing.Union[MetaOapg.properties.duties, str, schemas.Unset] = schemas.unset,
        empId: typing.Union[MetaOapg.properties.empId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        employerName: typing.Union[MetaOapg.properties.employerName, str, schemas.Unset] = schemas.unset,
        employerTypeBus: typing.Union[MetaOapg.properties.employerTypeBus, str, schemas.Unset] = schemas.unset,
        employmentType: typing.Union[MetaOapg.properties.employmentType, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        naicscode: typing.Union[MetaOapg.properties.naicscode, str, schemas.Unset] = schemas.unset,
        position: typing.Union[MetaOapg.properties.position, str, schemas.Unset] = schemas.unset,
        recruitid: typing.Union[MetaOapg.properties.recruitid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        soccode: typing.Union[MetaOapg.properties.soccode, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmploymentModel':
        return super().__new__(
            cls,
            *args,
            SOCCode=SOCCode,
            cid=cid,
            city=city,
            countryId=countryId,
            createts=createts,
            custAppId=custAppId,
            customFieldModelList=customFieldModelList,
            department=department,
            duties=duties,
            empId=empId,
            employerName=employerName,
            employerTypeBus=employerTypeBus,
            employmentType=employmentType,
            endDate=endDate,
            naicscode=naicscode,
            position=position,
            recruitid=recruitid,
            soccode=soccode,
            startDate=startDate,
            state=state,
            userId=userId,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.custom_field_model import CustomFieldModel
from clay_hr_python_sdk.model.timestamp import Timestamp

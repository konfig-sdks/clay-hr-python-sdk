# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            addressId = schemas.StrSchema
            addressLine1 = schemas.StrSchema
            addressLine2 = schemas.StrSchema
            city = schemas.StrSchema
            currentStatus = schemas.StrSchema
            state = schemas.StrSchema
            zipCode = schemas.StrSchema
            createts = schemas.IntSchema
            cid = schemas.StrSchema
            userId = schemas.StrSchema
            candidateId = schemas.StrSchema
            addressType = schemas.StrSchema
            locationId = schemas.StrSchema
            contactId = schemas.StrSchema
            countryId = schemas.StrSchema
        
            @staticmethod
            def countryModel() -> typing.Type['GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItemCountryModel']:
                return GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItemCountryModel
            status = schemas.StrSchema
            verificationStatus = schemas.StrSchema
            custId = schemas.StrSchema
            mapUrl = schemas.StrSchema
            createUserId = schemas.StrSchema
            extAppUID = schemas.StrSchema
            countryid = schemas.StrSchema
            __annotations__ = {
                "addressId": addressId,
                "addressLine1": addressLine1,
                "addressLine2": addressLine2,
                "city": city,
                "currentStatus": currentStatus,
                "state": state,
                "zipCode": zipCode,
                "createts": createts,
                "cid": cid,
                "userId": userId,
                "candidateId": candidateId,
                "addressType": addressType,
                "locationId": locationId,
                "contactId": contactId,
                "countryId": countryId,
                "countryModel": countryModel,
                "status": status,
                "verificationStatus": verificationStatus,
                "custId": custId,
                "mapUrl": mapUrl,
                "createUserId": createUserId,
                "extAppUID": extAppUID,
                "countryid": countryid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressId"]) -> MetaOapg.properties.addressId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentStatus"]) -> MetaOapg.properties.currentStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipCode"]) -> MetaOapg.properties.zipCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidateId"]) -> MetaOapg.properties.candidateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressType"]) -> MetaOapg.properties.addressType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactId"]) -> MetaOapg.properties.contactId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryId"]) -> MetaOapg.properties.countryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryModel"]) -> 'GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItemCountryModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verificationStatus"]) -> MetaOapg.properties.verificationStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custId"]) -> MetaOapg.properties.custId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mapUrl"]) -> MetaOapg.properties.mapUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extAppUID"]) -> MetaOapg.properties.extAppUID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryid"]) -> MetaOapg.properties.countryid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addressId", "addressLine1", "addressLine2", "city", "currentStatus", "state", "zipCode", "createts", "cid", "userId", "candidateId", "addressType", "locationId", "contactId", "countryId", "countryModel", "status", "verificationStatus", "custId", "mapUrl", "createUserId", "extAppUID", "countryid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressId"]) -> typing.Union[MetaOapg.properties.addressId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentStatus"]) -> typing.Union[MetaOapg.properties.currentStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipCode"]) -> typing.Union[MetaOapg.properties.zipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidateId"]) -> typing.Union[MetaOapg.properties.candidateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressType"]) -> typing.Union[MetaOapg.properties.addressType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationId"]) -> typing.Union[MetaOapg.properties.locationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactId"]) -> typing.Union[MetaOapg.properties.contactId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryId"]) -> typing.Union[MetaOapg.properties.countryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryModel"]) -> typing.Union['GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItemCountryModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verificationStatus"]) -> typing.Union[MetaOapg.properties.verificationStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custId"]) -> typing.Union[MetaOapg.properties.custId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mapUrl"]) -> typing.Union[MetaOapg.properties.mapUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extAppUID"]) -> typing.Union[MetaOapg.properties.extAppUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryid"]) -> typing.Union[MetaOapg.properties.countryid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addressId", "addressLine1", "addressLine2", "city", "currentStatus", "state", "zipCode", "createts", "cid", "userId", "candidateId", "addressType", "locationId", "contactId", "countryId", "countryModel", "status", "verificationStatus", "custId", "mapUrl", "createUserId", "extAppUID", "countryid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        addressId: typing.Union[MetaOapg.properties.addressId, str, schemas.Unset] = schemas.unset,
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        currentStatus: typing.Union[MetaOapg.properties.currentStatus, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        zipCode: typing.Union[MetaOapg.properties.zipCode, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        candidateId: typing.Union[MetaOapg.properties.candidateId, str, schemas.Unset] = schemas.unset,
        addressType: typing.Union[MetaOapg.properties.addressType, str, schemas.Unset] = schemas.unset,
        locationId: typing.Union[MetaOapg.properties.locationId, str, schemas.Unset] = schemas.unset,
        contactId: typing.Union[MetaOapg.properties.contactId, str, schemas.Unset] = schemas.unset,
        countryId: typing.Union[MetaOapg.properties.countryId, str, schemas.Unset] = schemas.unset,
        countryModel: typing.Union['GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItemCountryModel', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        verificationStatus: typing.Union[MetaOapg.properties.verificationStatus, str, schemas.Unset] = schemas.unset,
        custId: typing.Union[MetaOapg.properties.custId, str, schemas.Unset] = schemas.unset,
        mapUrl: typing.Union[MetaOapg.properties.mapUrl, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, str, schemas.Unset] = schemas.unset,
        extAppUID: typing.Union[MetaOapg.properties.extAppUID, str, schemas.Unset] = schemas.unset,
        countryid: typing.Union[MetaOapg.properties.countryid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItem':
        return super().__new__(
            cls,
            *args,
            addressId=addressId,
            addressLine1=addressLine1,
            addressLine2=addressLine2,
            city=city,
            currentStatus=currentStatus,
            state=state,
            zipCode=zipCode,
            createts=createts,
            cid=cid,
            userId=userId,
            candidateId=candidateId,
            addressType=addressType,
            locationId=locationId,
            contactId=contactId,
            countryId=countryId,
            countryModel=countryModel,
            status=status,
            verificationStatus=verificationStatus,
            custId=custId,
            mapUrl=mapUrl,
            createUserId=createUserId,
            extAppUID=extAppUID,
            countryid=countryid,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.goals_get_goal_response_reviewer_user_model_location_model_address_model_list_item_country_model import GoalsGetGoalResponseReviewerUserModelLocationModelAddressModelListItemCountryModel

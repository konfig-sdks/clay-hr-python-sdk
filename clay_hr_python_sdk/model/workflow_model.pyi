# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class WorkflowModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            cid = schemas.Int32Schema
            createUser = schemas.Int32Schema
        
            @staticmethod
            def createUserModel() -> typing.Type['UserViewModel']:
                return UserViewModel
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            duration = schemas.StrSchema
            objectType = schemas.StrSchema
            shortcut = schemas.BoolSchema
            status = schemas.StrSchema
            visibility = schemas.StrSchema
            workflowId = schemas.Int32Schema
            workflowName = schemas.StrSchema
            workflowType = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "cid": cid,
                "createUser": createUser,
                "createUserModel": createUserModel,
                "createts": createts,
                "duration": duration,
                "objectType": objectType,
                "shortcut": shortcut,
                "status": status,
                "visibility": visibility,
                "workflowId": workflowId,
                "workflowName": workflowName,
                "workflowType": workflowType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUser"]) -> MetaOapg.properties.createUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectType"]) -> MetaOapg.properties.objectType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortcut"]) -> MetaOapg.properties.shortcut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> MetaOapg.properties.visibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowId"]) -> MetaOapg.properties.workflowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowName"]) -> MetaOapg.properties.workflowName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowType"]) -> MetaOapg.properties.workflowType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "cid", "createUser", "createUserModel", "createts", "duration", "objectType", "shortcut", "status", "visibility", "workflowId", "workflowName", "workflowType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUser"]) -> typing.Union[MetaOapg.properties.createUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectType"]) -> typing.Union[MetaOapg.properties.objectType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortcut"]) -> typing.Union[MetaOapg.properties.shortcut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union[MetaOapg.properties.visibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowId"]) -> typing.Union[MetaOapg.properties.workflowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowName"]) -> typing.Union[MetaOapg.properties.workflowName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowType"]) -> typing.Union[MetaOapg.properties.workflowType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "cid", "createUser", "createUserModel", "createts", "duration", "objectType", "shortcut", "status", "visibility", "workflowId", "workflowName", "workflowType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createUser: typing.Union[MetaOapg.properties.createUser, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createUserModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, str, schemas.Unset] = schemas.unset,
        objectType: typing.Union[MetaOapg.properties.objectType, str, schemas.Unset] = schemas.unset,
        shortcut: typing.Union[MetaOapg.properties.shortcut, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        visibility: typing.Union[MetaOapg.properties.visibility, str, schemas.Unset] = schemas.unset,
        workflowId: typing.Union[MetaOapg.properties.workflowId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        workflowName: typing.Union[MetaOapg.properties.workflowName, str, schemas.Unset] = schemas.unset,
        workflowType: typing.Union[MetaOapg.properties.workflowType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            cid=cid,
            createUser=createUser,
            createUserModel=createUserModel,
            createts=createts,
            duration=duration,
            objectType=objectType,
            shortcut=shortcut,
            status=status,
            visibility=visibility,
            workflowId=workflowId,
            workflowName=workflowName,
            workflowType=workflowType,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_view_model import UserViewModel

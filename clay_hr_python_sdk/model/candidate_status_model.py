# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CandidateStatusModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            cid = schemas.Int32Schema
            colorCode = schemas.StrSchema
            internalCode = schemas.StrSchema
            noOfCandidates = schemas.StrSchema
            sequence = schemas.Int32Schema
            shareStatus = schemas.StrSchema
            statusId = schemas.Int32Schema
            statusValue = schemas.StrSchema
            totalCandidates = schemas.StrSchema
            __annotations__ = {
                "cid": cid,
                "colorCode": colorCode,
                "internalCode": internalCode,
                "noOfCandidates": noOfCandidates,
                "sequence": sequence,
                "shareStatus": shareStatus,
                "statusId": statusId,
                "statusValue": statusValue,
                "totalCandidates": totalCandidates,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colorCode"]) -> MetaOapg.properties.colorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalCode"]) -> MetaOapg.properties.internalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noOfCandidates"]) -> MetaOapg.properties.noOfCandidates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence"]) -> MetaOapg.properties.sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shareStatus"]) -> MetaOapg.properties.shareStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusId"]) -> MetaOapg.properties.statusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusValue"]) -> MetaOapg.properties.statusValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCandidates"]) -> MetaOapg.properties.totalCandidates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cid", "colorCode", "internalCode", "noOfCandidates", "sequence", "shareStatus", "statusId", "statusValue", "totalCandidates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colorCode"]) -> typing.Union[MetaOapg.properties.colorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalCode"]) -> typing.Union[MetaOapg.properties.internalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noOfCandidates"]) -> typing.Union[MetaOapg.properties.noOfCandidates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence"]) -> typing.Union[MetaOapg.properties.sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shareStatus"]) -> typing.Union[MetaOapg.properties.shareStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusId"]) -> typing.Union[MetaOapg.properties.statusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusValue"]) -> typing.Union[MetaOapg.properties.statusValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCandidates"]) -> typing.Union[MetaOapg.properties.totalCandidates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cid", "colorCode", "internalCode", "noOfCandidates", "sequence", "shareStatus", "statusId", "statusValue", "totalCandidates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        colorCode: typing.Union[MetaOapg.properties.colorCode, str, schemas.Unset] = schemas.unset,
        internalCode: typing.Union[MetaOapg.properties.internalCode, str, schemas.Unset] = schemas.unset,
        noOfCandidates: typing.Union[MetaOapg.properties.noOfCandidates, str, schemas.Unset] = schemas.unset,
        sequence: typing.Union[MetaOapg.properties.sequence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        shareStatus: typing.Union[MetaOapg.properties.shareStatus, str, schemas.Unset] = schemas.unset,
        statusId: typing.Union[MetaOapg.properties.statusId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        statusValue: typing.Union[MetaOapg.properties.statusValue, str, schemas.Unset] = schemas.unset,
        totalCandidates: typing.Union[MetaOapg.properties.totalCandidates, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CandidateStatusModel':
        return super().__new__(
            cls,
            *args,
            cid=cid,
            colorCode=colorCode,
            internalCode=internalCode,
            noOfCandidates=noOfCandidates,
            sequence=sequence,
            shareStatus=shareStatus,
            statusId=statusId,
            statusValue=statusValue,
            totalCandidates=totalCandidates,
            _configuration=_configuration,
            **kwargs,
        )

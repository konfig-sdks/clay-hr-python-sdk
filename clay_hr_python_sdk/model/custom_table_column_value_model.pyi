# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CustomTableColumnValueModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            candidateId = schemas.Int32Schema
            cid = schemas.Int32Schema
            colType = schemas.StrSchema
            colValue = schemas.StrSchema
            createUserId = schemas.Int32Schema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
        
            @staticmethod
            def ctColumnModel() -> typing.Type['CustomTableColumnModel']:
                return CustomTableColumnModel
            ctValueId = schemas.Int32Schema
            ctcValueId = schemas.Int32Schema
            ctcolumnid = schemas.Int32Schema
            customTableId = schemas.Int32Schema
            userid = schemas.Int32Schema
            value = schemas.StrSchema
            __annotations__ = {
                "candidateId": candidateId,
                "cid": cid,
                "colType": colType,
                "colValue": colValue,
                "createUserId": createUserId,
                "createts": createts,
                "ctColumnModel": ctColumnModel,
                "ctValueId": ctValueId,
                "ctcValueId": ctcValueId,
                "ctcolumnid": ctcolumnid,
                "customTableId": customTableId,
                "userid": userid,
                "value": value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidateId"]) -> MetaOapg.properties.candidateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colType"]) -> MetaOapg.properties.colType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colValue"]) -> MetaOapg.properties.colValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctColumnModel"]) -> 'CustomTableColumnModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctValueId"]) -> MetaOapg.properties.ctValueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctcValueId"]) -> MetaOapg.properties.ctcValueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctcolumnid"]) -> MetaOapg.properties.ctcolumnid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customTableId"]) -> MetaOapg.properties.customTableId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userid"]) -> MetaOapg.properties.userid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["candidateId", "cid", "colType", "colValue", "createUserId", "createts", "ctColumnModel", "ctValueId", "ctcValueId", "ctcolumnid", "customTableId", "userid", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidateId"]) -> typing.Union[MetaOapg.properties.candidateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colType"]) -> typing.Union[MetaOapg.properties.colType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colValue"]) -> typing.Union[MetaOapg.properties.colValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctColumnModel"]) -> typing.Union['CustomTableColumnModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctValueId"]) -> typing.Union[MetaOapg.properties.ctValueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctcValueId"]) -> typing.Union[MetaOapg.properties.ctcValueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctcolumnid"]) -> typing.Union[MetaOapg.properties.ctcolumnid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customTableId"]) -> typing.Union[MetaOapg.properties.customTableId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userid"]) -> typing.Union[MetaOapg.properties.userid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["candidateId", "cid", "colType", "colValue", "createUserId", "createts", "ctColumnModel", "ctValueId", "ctcValueId", "ctcolumnid", "customTableId", "userid", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        candidateId: typing.Union[MetaOapg.properties.candidateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        colType: typing.Union[MetaOapg.properties.colType, str, schemas.Unset] = schemas.unset,
        colValue: typing.Union[MetaOapg.properties.colValue, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        ctColumnModel: typing.Union['CustomTableColumnModel', schemas.Unset] = schemas.unset,
        ctValueId: typing.Union[MetaOapg.properties.ctValueId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ctcValueId: typing.Union[MetaOapg.properties.ctcValueId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ctcolumnid: typing.Union[MetaOapg.properties.ctcolumnid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customTableId: typing.Union[MetaOapg.properties.customTableId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userid: typing.Union[MetaOapg.properties.userid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomTableColumnValueModel':
        return super().__new__(
            cls,
            *args,
            candidateId=candidateId,
            cid=cid,
            colType=colType,
            colValue=colValue,
            createUserId=createUserId,
            createts=createts,
            ctColumnModel=ctColumnModel,
            ctValueId=ctValueId,
            ctcValueId=ctcValueId,
            ctcolumnid=ctcolumnid,
            customTableId=customTableId,
            userid=userid,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.custom_table_column_model import CustomTableColumnModel
from clay_hr_python_sdk.model.timestamp import Timestamp

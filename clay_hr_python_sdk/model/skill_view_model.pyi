# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class SkillViewModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            average = schemas.Float64Schema
            cid = schemas.Int32Schema
            scoreMax = schemas.Float64Schema
            scoreName = schemas.StrSchema
            scoreTemplateId = schemas.Int32Schema
            skillCode = schemas.StrSchema
            skillId = schemas.Int32Schema
            skillTypeId = schemas.Int32Schema
            skillTypeName = schemas.StrSchema
            socreMin = schemas.Float64Schema
            status = schemas.StrSchema
            userCount = schemas.Int32Schema
            __annotations__ = {
                "description": description,
                "average": average,
                "cid": cid,
                "scoreMax": scoreMax,
                "scoreName": scoreName,
                "scoreTemplateId": scoreTemplateId,
                "skillCode": skillCode,
                "skillId": skillId,
                "skillTypeId": skillTypeId,
                "skillTypeName": skillTypeName,
                "socreMin": socreMin,
                "status": status,
                "userCount": userCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average"]) -> MetaOapg.properties.average: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreMax"]) -> MetaOapg.properties.scoreMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreName"]) -> MetaOapg.properties.scoreName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreTemplateId"]) -> MetaOapg.properties.scoreTemplateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillCode"]) -> MetaOapg.properties.skillCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillId"]) -> MetaOapg.properties.skillId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeId"]) -> MetaOapg.properties.skillTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeName"]) -> MetaOapg.properties.skillTypeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["socreMin"]) -> MetaOapg.properties.socreMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userCount"]) -> MetaOapg.properties.userCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "average", "cid", "scoreMax", "scoreName", "scoreTemplateId", "skillCode", "skillId", "skillTypeId", "skillTypeName", "socreMin", "status", "userCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average"]) -> typing.Union[MetaOapg.properties.average, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreMax"]) -> typing.Union[MetaOapg.properties.scoreMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreName"]) -> typing.Union[MetaOapg.properties.scoreName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreTemplateId"]) -> typing.Union[MetaOapg.properties.scoreTemplateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillCode"]) -> typing.Union[MetaOapg.properties.skillCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillId"]) -> typing.Union[MetaOapg.properties.skillId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeId"]) -> typing.Union[MetaOapg.properties.skillTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeName"]) -> typing.Union[MetaOapg.properties.skillTypeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["socreMin"]) -> typing.Union[MetaOapg.properties.socreMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userCount"]) -> typing.Union[MetaOapg.properties.userCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "average", "cid", "scoreMax", "scoreName", "scoreTemplateId", "skillCode", "skillId", "skillTypeId", "skillTypeName", "socreMin", "status", "userCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        average: typing.Union[MetaOapg.properties.average, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        scoreMax: typing.Union[MetaOapg.properties.scoreMax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        scoreName: typing.Union[MetaOapg.properties.scoreName, str, schemas.Unset] = schemas.unset,
        scoreTemplateId: typing.Union[MetaOapg.properties.scoreTemplateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        skillCode: typing.Union[MetaOapg.properties.skillCode, str, schemas.Unset] = schemas.unset,
        skillId: typing.Union[MetaOapg.properties.skillId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        skillTypeId: typing.Union[MetaOapg.properties.skillTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        skillTypeName: typing.Union[MetaOapg.properties.skillTypeName, str, schemas.Unset] = schemas.unset,
        socreMin: typing.Union[MetaOapg.properties.socreMin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        userCount: typing.Union[MetaOapg.properties.userCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SkillViewModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            average=average,
            cid=cid,
            scoreMax=scoreMax,
            scoreName=scoreName,
            scoreTemplateId=scoreTemplateId,
            skillCode=skillCode,
            skillId=skillId,
            skillTypeId=skillTypeId,
            skillTypeName=skillTypeName,
            socreMin=socreMin,
            status=status,
            userCount=userCount,
            _configuration=_configuration,
            **kwargs,
        )

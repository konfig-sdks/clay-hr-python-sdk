# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CustomTableValueModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            candidateId = schemas.Int32Schema
            cid = schemas.Int32Schema
            createUserId = schemas.Int32Schema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            
            
            class ctColumnValueList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomTableColumnValueModel']:
                        return CustomTableColumnValueModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomTableColumnValueModel'], typing.List['CustomTableColumnValueModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ctColumnValueList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomTableColumnValueModel':
                    return super().__getitem__(i)
            ctValueId = schemas.Int32Schema
            customTableId = schemas.Int32Schema
            userId = schemas.Int32Schema
        
            @staticmethod
            def userModel() -> typing.Type['UserViewModel']:
                return UserViewModel
            __annotations__ = {
                "candidateId": candidateId,
                "cid": cid,
                "createUserId": createUserId,
                "createts": createts,
                "ctColumnValueList": ctColumnValueList,
                "ctValueId": ctValueId,
                "customTableId": customTableId,
                "userId": userId,
                "userModel": userModel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidateId"]) -> MetaOapg.properties.candidateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctColumnValueList"]) -> MetaOapg.properties.ctColumnValueList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctValueId"]) -> MetaOapg.properties.ctValueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customTableId"]) -> MetaOapg.properties.customTableId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["candidateId", "cid", "createUserId", "createts", "ctColumnValueList", "ctValueId", "customTableId", "userId", "userModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidateId"]) -> typing.Union[MetaOapg.properties.candidateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctColumnValueList"]) -> typing.Union[MetaOapg.properties.ctColumnValueList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctValueId"]) -> typing.Union[MetaOapg.properties.ctValueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customTableId"]) -> typing.Union[MetaOapg.properties.customTableId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["candidateId", "cid", "createUserId", "createts", "ctColumnValueList", "ctValueId", "customTableId", "userId", "userModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        candidateId: typing.Union[MetaOapg.properties.candidateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        ctColumnValueList: typing.Union[MetaOapg.properties.ctColumnValueList, list, tuple, schemas.Unset] = schemas.unset,
        ctValueId: typing.Union[MetaOapg.properties.ctValueId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customTableId: typing.Union[MetaOapg.properties.customTableId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomTableValueModel':
        return super().__new__(
            cls,
            *args,
            candidateId=candidateId,
            cid=cid,
            createUserId=createUserId,
            createts=createts,
            ctColumnValueList=ctColumnValueList,
            ctValueId=ctValueId,
            customTableId=customTableId,
            userId=userId,
            userModel=userModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.custom_table_column_value_model import CustomTableColumnValueModel
from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_view_model import UserViewModel

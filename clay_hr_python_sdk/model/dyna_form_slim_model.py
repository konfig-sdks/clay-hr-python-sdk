# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class DynaFormSlimModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            anonymous = schemas.Int32Schema
            attemptLimit = schemas.StrSchema
            availability = schemas.StrSchema
            cid = schemas.Int32Schema
        
            @staticmethod
            def createUserModel() -> typing.Type['UserModel']:
                return UserModel
        
            @staticmethod
            def createUserViewModel() -> typing.Type['UserViewModel']:
                return UserViewModel
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            dataFlow = schemas.StrSchema
            dynaFormCode = schemas.StrSchema
            dynamicFormId = schemas.Int32Schema
            formType = schemas.StrSchema
            layout = schemas.StrSchema
            mappedEntity = schemas.StrSchema
            name = schemas.StrSchema
            presentationStyle = schemas.StrSchema
            publicSummary = schemas.BoolSchema
            secSequence = schemas.StrSchema
            showCorrect = schemas.BoolSchema
            status = schemas.StrSchema
            thresholdScore = schemas.Float64Schema
            timeLimit = schemas.Int32Schema
        
            @staticmethod
            def updatets() -> typing.Type['Timestamp']:
                return Timestamp
        
            @staticmethod
            def userGroupModel() -> typing.Type['UserGroupModel']:
                return UserGroupModel
            __annotations__ = {
                "description": description,
                "anonymous": anonymous,
                "attemptLimit": attemptLimit,
                "availability": availability,
                "cid": cid,
                "createUserModel": createUserModel,
                "createUserViewModel": createUserViewModel,
                "createts": createts,
                "dataFlow": dataFlow,
                "dynaFormCode": dynaFormCode,
                "dynamicFormId": dynamicFormId,
                "formType": formType,
                "layout": layout,
                "mappedEntity": mappedEntity,
                "name": name,
                "presentationStyle": presentationStyle,
                "publicSummary": publicSummary,
                "secSequence": secSequence,
                "showCorrect": showCorrect,
                "status": status,
                "thresholdScore": thresholdScore,
                "timeLimit": timeLimit,
                "updatets": updatets,
                "userGroupModel": userGroupModel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anonymous"]) -> MetaOapg.properties.anonymous: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attemptLimit"]) -> MetaOapg.properties.attemptLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability"]) -> MetaOapg.properties.availability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserViewModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataFlow"]) -> MetaOapg.properties.dataFlow: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynaFormCode"]) -> MetaOapg.properties.dynaFormCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynamicFormId"]) -> MetaOapg.properties.dynamicFormId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formType"]) -> MetaOapg.properties.formType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> MetaOapg.properties.layout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mappedEntity"]) -> MetaOapg.properties.mappedEntity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presentationStyle"]) -> MetaOapg.properties.presentationStyle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicSummary"]) -> MetaOapg.properties.publicSummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secSequence"]) -> MetaOapg.properties.secSequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showCorrect"]) -> MetaOapg.properties.showCorrect: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thresholdScore"]) -> MetaOapg.properties.thresholdScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeLimit"]) -> MetaOapg.properties.timeLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatets"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroupModel"]) -> 'UserGroupModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "anonymous", "attemptLimit", "availability", "cid", "createUserModel", "createUserViewModel", "createts", "dataFlow", "dynaFormCode", "dynamicFormId", "formType", "layout", "mappedEntity", "name", "presentationStyle", "publicSummary", "secSequence", "showCorrect", "status", "thresholdScore", "timeLimit", "updatets", "userGroupModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anonymous"]) -> typing.Union[MetaOapg.properties.anonymous, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attemptLimit"]) -> typing.Union[MetaOapg.properties.attemptLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability"]) -> typing.Union[MetaOapg.properties.availability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserViewModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataFlow"]) -> typing.Union[MetaOapg.properties.dataFlow, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynaFormCode"]) -> typing.Union[MetaOapg.properties.dynaFormCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynamicFormId"]) -> typing.Union[MetaOapg.properties.dynamicFormId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formType"]) -> typing.Union[MetaOapg.properties.formType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> typing.Union[MetaOapg.properties.layout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mappedEntity"]) -> typing.Union[MetaOapg.properties.mappedEntity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presentationStyle"]) -> typing.Union[MetaOapg.properties.presentationStyle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicSummary"]) -> typing.Union[MetaOapg.properties.publicSummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secSequence"]) -> typing.Union[MetaOapg.properties.secSequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showCorrect"]) -> typing.Union[MetaOapg.properties.showCorrect, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thresholdScore"]) -> typing.Union[MetaOapg.properties.thresholdScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeLimit"]) -> typing.Union[MetaOapg.properties.timeLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatets"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroupModel"]) -> typing.Union['UserGroupModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "anonymous", "attemptLimit", "availability", "cid", "createUserModel", "createUserViewModel", "createts", "dataFlow", "dynaFormCode", "dynamicFormId", "formType", "layout", "mappedEntity", "name", "presentationStyle", "publicSummary", "secSequence", "showCorrect", "status", "thresholdScore", "timeLimit", "updatets", "userGroupModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        anonymous: typing.Union[MetaOapg.properties.anonymous, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attemptLimit: typing.Union[MetaOapg.properties.attemptLimit, str, schemas.Unset] = schemas.unset,
        availability: typing.Union[MetaOapg.properties.availability, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createUserModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        createUserViewModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        dataFlow: typing.Union[MetaOapg.properties.dataFlow, str, schemas.Unset] = schemas.unset,
        dynaFormCode: typing.Union[MetaOapg.properties.dynaFormCode, str, schemas.Unset] = schemas.unset,
        dynamicFormId: typing.Union[MetaOapg.properties.dynamicFormId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        formType: typing.Union[MetaOapg.properties.formType, str, schemas.Unset] = schemas.unset,
        layout: typing.Union[MetaOapg.properties.layout, str, schemas.Unset] = schemas.unset,
        mappedEntity: typing.Union[MetaOapg.properties.mappedEntity, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        presentationStyle: typing.Union[MetaOapg.properties.presentationStyle, str, schemas.Unset] = schemas.unset,
        publicSummary: typing.Union[MetaOapg.properties.publicSummary, bool, schemas.Unset] = schemas.unset,
        secSequence: typing.Union[MetaOapg.properties.secSequence, str, schemas.Unset] = schemas.unset,
        showCorrect: typing.Union[MetaOapg.properties.showCorrect, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        thresholdScore: typing.Union[MetaOapg.properties.thresholdScore, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        timeLimit: typing.Union[MetaOapg.properties.timeLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updatets: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        userGroupModel: typing.Union['UserGroupModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DynaFormSlimModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            anonymous=anonymous,
            attemptLimit=attemptLimit,
            availability=availability,
            cid=cid,
            createUserModel=createUserModel,
            createUserViewModel=createUserViewModel,
            createts=createts,
            dataFlow=dataFlow,
            dynaFormCode=dynaFormCode,
            dynamicFormId=dynamicFormId,
            formType=formType,
            layout=layout,
            mappedEntity=mappedEntity,
            name=name,
            presentationStyle=presentationStyle,
            publicSummary=publicSummary,
            secSequence=secSequence,
            showCorrect=showCorrect,
            status=status,
            thresholdScore=thresholdScore,
            timeLimit=timeLimit,
            updatets=updatets,
            userGroupModel=userGroupModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_group_model import UserGroupModel
from clay_hr_python_sdk.model.user_model import UserModel
from clay_hr_python_sdk.model.user_view_model import UserViewModel

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class AttachmentModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            access = schemas.StrSchema
            annId = schemas.Int32Schema
            appraisalAssignmentId = schemas.Int32Schema
            appraisalItemResponseId = schemas.Int32Schema
            appraisalid = schemas.Int32Schema
            assetid = schemas.Int32Schema
            atchType = schemas.StrSchema
        
            @staticmethod
            def attachUserModel() -> typing.Type['UserModel']:
                return UserModel
            attachid = schemas.Int32Schema
        
            @staticmethod
            def attachmentFolderModel() -> typing.Type['AttachmentFolderModel']:
                return AttachmentFolderModel
            authkey = schemas.StrSchema
            candidateAccess = schemas.BoolSchema
            candidateid = schemas.Int32Schema
            category = schemas.StrSchema
            cid = schemas.Int32Schema
            comments = schemas.StrSchema
            createts = schemas.DateTimeSchema
            createuserid = schemas.Int32Schema
            customerId = schemas.Int32Schema
            dLExpiryDate = schemas.StrSchema
            dLIssueDate = schemas.StrSchema
            documentContent = schemas.StrSchema
            documentExpiryDate = schemas.DateTimeSchema
            documentType = schemas.StrSchema
            documnetIssueDate = schemas.DateTimeSchema
            expenseItemId = schemas.Int32Schema
            expenseid = schemas.Int32Schema
            fileExtn = schemas.StrSchema
            filename = schemas.StrSchema
            folder = schemas.StrSchema
            folder_id = schemas.Int32Schema
            _global = schemas.BoolSchema
            goalid = schemas.Int32Schema
            language = schemas.StrSchema
            leaveid = schemas.Int32Schema
            multiSigning = schemas.Int32Schema
            
            
            class objectAccessModelList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ObjectAccessModel']:
                        return ObjectAccessModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ObjectAccessModel'], typing.List['ObjectAccessModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'objectAccessModelList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ObjectAccessModel':
                    return super().__getitem__(i)
            objectType = schemas.StrSchema
            obtype = schemas.StrSchema
            payStubId = schemas.Int32Schema
            positionid = schemas.Int32Schema
        
            @staticmethod
            def projectModel() -> typing.Type['ProjectModel']:
                return ProjectModel
            projectid = schemas.Int32Schema
            resume = schemas.BoolSchema
            ruleid = schemas.Int32Schema
            s3id = schemas.StrSchema
            signNowDocId = schemas.StrSchema
            signNowTemplateId = schemas.StrSchema
            signStatus = schemas.StrSchema
            signatureId = schemas.StrSchema
            signatureRequestId = schemas.StrSchema
            signingDate = schemas.DateTimeSchema
            size = schemas.Int32Schema
            skilluserId = schemas.Int32Schema
        
            @staticmethod
            def stateCountryModel() -> typing.Type['StateCountryModel']:
                return StateCountryModel
            status = schemas.StrSchema
            taskId = schemas.Int32Schema
            ticketId = schemas.Int32Schema
            timecardid = schemas.Int32Schema
            topic = schemas.StrSchema
            trainingId = schemas.Int32Schema
            userAccess = schemas.Int32Schema
        
            @staticmethod
            def userGroupModel() -> typing.Type['UserGroupModel']:
                return UserGroupModel
        
            @staticmethod
            def userModel() -> typing.Type['UserModel']:
                return UserModel
            userid = schemas.Int32Schema
            __annotations__ = {
                "access": access,
                "annId": annId,
                "appraisalAssignmentId": appraisalAssignmentId,
                "appraisalItemResponseId": appraisalItemResponseId,
                "appraisalid": appraisalid,
                "assetid": assetid,
                "atchType": atchType,
                "attachUserModel": attachUserModel,
                "attachid": attachid,
                "attachmentFolderModel": attachmentFolderModel,
                "authkey": authkey,
                "candidateAccess": candidateAccess,
                "candidateid": candidateid,
                "category": category,
                "cid": cid,
                "comments": comments,
                "createts": createts,
                "createuserid": createuserid,
                "customerId": customerId,
                "dLExpiryDate": dLExpiryDate,
                "dLIssueDate": dLIssueDate,
                "documentContent": documentContent,
                "documentExpiryDate": documentExpiryDate,
                "documentType": documentType,
                "documnetIssueDate": documnetIssueDate,
                "expenseItemId": expenseItemId,
                "expenseid": expenseid,
                "fileExtn": fileExtn,
                "filename": filename,
                "folder": folder,
                "folder_id": folder_id,
                "global": _global,
                "goalid": goalid,
                "language": language,
                "leaveid": leaveid,
                "multiSigning": multiSigning,
                "objectAccessModelList": objectAccessModelList,
                "objectType": objectType,
                "obtype": obtype,
                "payStubId": payStubId,
                "positionid": positionid,
                "projectModel": projectModel,
                "projectid": projectid,
                "resume": resume,
                "ruleid": ruleid,
                "s3id": s3id,
                "signNowDocId": signNowDocId,
                "signNowTemplateId": signNowTemplateId,
                "signStatus": signStatus,
                "signatureId": signatureId,
                "signatureRequestId": signatureRequestId,
                "signingDate": signingDate,
                "size": size,
                "skilluserId": skilluserId,
                "stateCountryModel": stateCountryModel,
                "status": status,
                "taskId": taskId,
                "ticketId": ticketId,
                "timecardid": timecardid,
                "topic": topic,
                "trainingId": trainingId,
                "userAccess": userAccess,
                "userGroupModel": userGroupModel,
                "userModel": userModel,
                "userid": userid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access"]) -> MetaOapg.properties.access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annId"]) -> MetaOapg.properties.annId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appraisalAssignmentId"]) -> MetaOapg.properties.appraisalAssignmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appraisalItemResponseId"]) -> MetaOapg.properties.appraisalItemResponseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appraisalid"]) -> MetaOapg.properties.appraisalid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetid"]) -> MetaOapg.properties.assetid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atchType"]) -> MetaOapg.properties.atchType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachUserModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachid"]) -> MetaOapg.properties.attachid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachmentFolderModel"]) -> 'AttachmentFolderModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authkey"]) -> MetaOapg.properties.authkey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidateAccess"]) -> MetaOapg.properties.candidateAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidateid"]) -> MetaOapg.properties.candidateid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createuserid"]) -> MetaOapg.properties.createuserid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dLExpiryDate"]) -> MetaOapg.properties.dLExpiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dLIssueDate"]) -> MetaOapg.properties.dLIssueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentContent"]) -> MetaOapg.properties.documentContent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentExpiryDate"]) -> MetaOapg.properties.documentExpiryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentType"]) -> MetaOapg.properties.documentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documnetIssueDate"]) -> MetaOapg.properties.documnetIssueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenseItemId"]) -> MetaOapg.properties.expenseItemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenseid"]) -> MetaOapg.properties.expenseid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fileExtn"]) -> MetaOapg.properties.fileExtn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder"]) -> MetaOapg.properties.folder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["global"]) -> MetaOapg.properties._global: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalid"]) -> MetaOapg.properties.goalid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveid"]) -> MetaOapg.properties.leaveid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiSigning"]) -> MetaOapg.properties.multiSigning: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectAccessModelList"]) -> MetaOapg.properties.objectAccessModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectType"]) -> MetaOapg.properties.objectType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtype"]) -> MetaOapg.properties.obtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payStubId"]) -> MetaOapg.properties.payStubId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionid"]) -> MetaOapg.properties.positionid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectModel"]) -> 'ProjectModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectid"]) -> MetaOapg.properties.projectid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resume"]) -> MetaOapg.properties.resume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleid"]) -> MetaOapg.properties.ruleid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3id"]) -> MetaOapg.properties.s3id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signNowDocId"]) -> MetaOapg.properties.signNowDocId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signNowTemplateId"]) -> MetaOapg.properties.signNowTemplateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signStatus"]) -> MetaOapg.properties.signStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureId"]) -> MetaOapg.properties.signatureId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureRequestId"]) -> MetaOapg.properties.signatureRequestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signingDate"]) -> MetaOapg.properties.signingDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skilluserId"]) -> MetaOapg.properties.skilluserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateCountryModel"]) -> 'StateCountryModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskId"]) -> MetaOapg.properties.taskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticketId"]) -> MetaOapg.properties.ticketId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timecardid"]) -> MetaOapg.properties.timecardid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic"]) -> MetaOapg.properties.topic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainingId"]) -> MetaOapg.properties.trainingId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAccess"]) -> MetaOapg.properties.userAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroupModel"]) -> 'UserGroupModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userid"]) -> MetaOapg.properties.userid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access", "annId", "appraisalAssignmentId", "appraisalItemResponseId", "appraisalid", "assetid", "atchType", "attachUserModel", "attachid", "attachmentFolderModel", "authkey", "candidateAccess", "candidateid", "category", "cid", "comments", "createts", "createuserid", "customerId", "dLExpiryDate", "dLIssueDate", "documentContent", "documentExpiryDate", "documentType", "documnetIssueDate", "expenseItemId", "expenseid", "fileExtn", "filename", "folder", "folder_id", "global", "goalid", "language", "leaveid", "multiSigning", "objectAccessModelList", "objectType", "obtype", "payStubId", "positionid", "projectModel", "projectid", "resume", "ruleid", "s3id", "signNowDocId", "signNowTemplateId", "signStatus", "signatureId", "signatureRequestId", "signingDate", "size", "skilluserId", "stateCountryModel", "status", "taskId", "ticketId", "timecardid", "topic", "trainingId", "userAccess", "userGroupModel", "userModel", "userid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> typing.Union[MetaOapg.properties.access, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annId"]) -> typing.Union[MetaOapg.properties.annId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appraisalAssignmentId"]) -> typing.Union[MetaOapg.properties.appraisalAssignmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appraisalItemResponseId"]) -> typing.Union[MetaOapg.properties.appraisalItemResponseId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appraisalid"]) -> typing.Union[MetaOapg.properties.appraisalid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetid"]) -> typing.Union[MetaOapg.properties.assetid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atchType"]) -> typing.Union[MetaOapg.properties.atchType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachUserModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachid"]) -> typing.Union[MetaOapg.properties.attachid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachmentFolderModel"]) -> typing.Union['AttachmentFolderModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authkey"]) -> typing.Union[MetaOapg.properties.authkey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidateAccess"]) -> typing.Union[MetaOapg.properties.candidateAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidateid"]) -> typing.Union[MetaOapg.properties.candidateid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createuserid"]) -> typing.Union[MetaOapg.properties.createuserid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dLExpiryDate"]) -> typing.Union[MetaOapg.properties.dLExpiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dLIssueDate"]) -> typing.Union[MetaOapg.properties.dLIssueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentContent"]) -> typing.Union[MetaOapg.properties.documentContent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentExpiryDate"]) -> typing.Union[MetaOapg.properties.documentExpiryDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentType"]) -> typing.Union[MetaOapg.properties.documentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documnetIssueDate"]) -> typing.Union[MetaOapg.properties.documnetIssueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenseItemId"]) -> typing.Union[MetaOapg.properties.expenseItemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenseid"]) -> typing.Union[MetaOapg.properties.expenseid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fileExtn"]) -> typing.Union[MetaOapg.properties.fileExtn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> typing.Union[MetaOapg.properties.filename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> typing.Union[MetaOapg.properties.folder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_id"]) -> typing.Union[MetaOapg.properties.folder_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["global"]) -> typing.Union[MetaOapg.properties._global, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalid"]) -> typing.Union[MetaOapg.properties.goalid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveid"]) -> typing.Union[MetaOapg.properties.leaveid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiSigning"]) -> typing.Union[MetaOapg.properties.multiSigning, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectAccessModelList"]) -> typing.Union[MetaOapg.properties.objectAccessModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectType"]) -> typing.Union[MetaOapg.properties.objectType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtype"]) -> typing.Union[MetaOapg.properties.obtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payStubId"]) -> typing.Union[MetaOapg.properties.payStubId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionid"]) -> typing.Union[MetaOapg.properties.positionid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectModel"]) -> typing.Union['ProjectModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectid"]) -> typing.Union[MetaOapg.properties.projectid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resume"]) -> typing.Union[MetaOapg.properties.resume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleid"]) -> typing.Union[MetaOapg.properties.ruleid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3id"]) -> typing.Union[MetaOapg.properties.s3id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signNowDocId"]) -> typing.Union[MetaOapg.properties.signNowDocId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signNowTemplateId"]) -> typing.Union[MetaOapg.properties.signNowTemplateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signStatus"]) -> typing.Union[MetaOapg.properties.signStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureId"]) -> typing.Union[MetaOapg.properties.signatureId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureRequestId"]) -> typing.Union[MetaOapg.properties.signatureRequestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signingDate"]) -> typing.Union[MetaOapg.properties.signingDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skilluserId"]) -> typing.Union[MetaOapg.properties.skilluserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateCountryModel"]) -> typing.Union['StateCountryModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskId"]) -> typing.Union[MetaOapg.properties.taskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticketId"]) -> typing.Union[MetaOapg.properties.ticketId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timecardid"]) -> typing.Union[MetaOapg.properties.timecardid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic"]) -> typing.Union[MetaOapg.properties.topic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainingId"]) -> typing.Union[MetaOapg.properties.trainingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAccess"]) -> typing.Union[MetaOapg.properties.userAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroupModel"]) -> typing.Union['UserGroupModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userid"]) -> typing.Union[MetaOapg.properties.userid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access", "annId", "appraisalAssignmentId", "appraisalItemResponseId", "appraisalid", "assetid", "atchType", "attachUserModel", "attachid", "attachmentFolderModel", "authkey", "candidateAccess", "candidateid", "category", "cid", "comments", "createts", "createuserid", "customerId", "dLExpiryDate", "dLIssueDate", "documentContent", "documentExpiryDate", "documentType", "documnetIssueDate", "expenseItemId", "expenseid", "fileExtn", "filename", "folder", "folder_id", "global", "goalid", "language", "leaveid", "multiSigning", "objectAccessModelList", "objectType", "obtype", "payStubId", "positionid", "projectModel", "projectid", "resume", "ruleid", "s3id", "signNowDocId", "signNowTemplateId", "signStatus", "signatureId", "signatureRequestId", "signingDate", "size", "skilluserId", "stateCountryModel", "status", "taskId", "ticketId", "timecardid", "topic", "trainingId", "userAccess", "userGroupModel", "userModel", "userid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        access: typing.Union[MetaOapg.properties.access, str, schemas.Unset] = schemas.unset,
        annId: typing.Union[MetaOapg.properties.annId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        appraisalAssignmentId: typing.Union[MetaOapg.properties.appraisalAssignmentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        appraisalItemResponseId: typing.Union[MetaOapg.properties.appraisalItemResponseId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        appraisalid: typing.Union[MetaOapg.properties.appraisalid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        assetid: typing.Union[MetaOapg.properties.assetid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        atchType: typing.Union[MetaOapg.properties.atchType, str, schemas.Unset] = schemas.unset,
        attachUserModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        attachid: typing.Union[MetaOapg.properties.attachid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attachmentFolderModel: typing.Union['AttachmentFolderModel', schemas.Unset] = schemas.unset,
        authkey: typing.Union[MetaOapg.properties.authkey, str, schemas.Unset] = schemas.unset,
        candidateAccess: typing.Union[MetaOapg.properties.candidateAccess, bool, schemas.Unset] = schemas.unset,
        candidateid: typing.Union[MetaOapg.properties.candidateid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, datetime, schemas.Unset] = schemas.unset,
        createuserid: typing.Union[MetaOapg.properties.createuserid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dLExpiryDate: typing.Union[MetaOapg.properties.dLExpiryDate, str, schemas.Unset] = schemas.unset,
        dLIssueDate: typing.Union[MetaOapg.properties.dLIssueDate, str, schemas.Unset] = schemas.unset,
        documentContent: typing.Union[MetaOapg.properties.documentContent, str, schemas.Unset] = schemas.unset,
        documentExpiryDate: typing.Union[MetaOapg.properties.documentExpiryDate, str, datetime, schemas.Unset] = schemas.unset,
        documentType: typing.Union[MetaOapg.properties.documentType, str, schemas.Unset] = schemas.unset,
        documnetIssueDate: typing.Union[MetaOapg.properties.documnetIssueDate, str, datetime, schemas.Unset] = schemas.unset,
        expenseItemId: typing.Union[MetaOapg.properties.expenseItemId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expenseid: typing.Union[MetaOapg.properties.expenseid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fileExtn: typing.Union[MetaOapg.properties.fileExtn, str, schemas.Unset] = schemas.unset,
        filename: typing.Union[MetaOapg.properties.filename, str, schemas.Unset] = schemas.unset,
        folder: typing.Union[MetaOapg.properties.folder, str, schemas.Unset] = schemas.unset,
        folder_id: typing.Union[MetaOapg.properties.folder_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        goalid: typing.Union[MetaOapg.properties.goalid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        leaveid: typing.Union[MetaOapg.properties.leaveid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        multiSigning: typing.Union[MetaOapg.properties.multiSigning, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        objectAccessModelList: typing.Union[MetaOapg.properties.objectAccessModelList, list, tuple, schemas.Unset] = schemas.unset,
        objectType: typing.Union[MetaOapg.properties.objectType, str, schemas.Unset] = schemas.unset,
        obtype: typing.Union[MetaOapg.properties.obtype, str, schemas.Unset] = schemas.unset,
        payStubId: typing.Union[MetaOapg.properties.payStubId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        positionid: typing.Union[MetaOapg.properties.positionid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        projectModel: typing.Union['ProjectModel', schemas.Unset] = schemas.unset,
        projectid: typing.Union[MetaOapg.properties.projectid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        resume: typing.Union[MetaOapg.properties.resume, bool, schemas.Unset] = schemas.unset,
        ruleid: typing.Union[MetaOapg.properties.ruleid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        s3id: typing.Union[MetaOapg.properties.s3id, str, schemas.Unset] = schemas.unset,
        signNowDocId: typing.Union[MetaOapg.properties.signNowDocId, str, schemas.Unset] = schemas.unset,
        signNowTemplateId: typing.Union[MetaOapg.properties.signNowTemplateId, str, schemas.Unset] = schemas.unset,
        signStatus: typing.Union[MetaOapg.properties.signStatus, str, schemas.Unset] = schemas.unset,
        signatureId: typing.Union[MetaOapg.properties.signatureId, str, schemas.Unset] = schemas.unset,
        signatureRequestId: typing.Union[MetaOapg.properties.signatureRequestId, str, schemas.Unset] = schemas.unset,
        signingDate: typing.Union[MetaOapg.properties.signingDate, str, datetime, schemas.Unset] = schemas.unset,
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        skilluserId: typing.Union[MetaOapg.properties.skilluserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stateCountryModel: typing.Union['StateCountryModel', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        taskId: typing.Union[MetaOapg.properties.taskId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ticketId: typing.Union[MetaOapg.properties.ticketId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timecardid: typing.Union[MetaOapg.properties.timecardid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        topic: typing.Union[MetaOapg.properties.topic, str, schemas.Unset] = schemas.unset,
        trainingId: typing.Union[MetaOapg.properties.trainingId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userAccess: typing.Union[MetaOapg.properties.userAccess, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userGroupModel: typing.Union['UserGroupModel', schemas.Unset] = schemas.unset,
        userModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        userid: typing.Union[MetaOapg.properties.userid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AttachmentModel':
        return super().__new__(
            cls,
            *args,
            access=access,
            annId=annId,
            appraisalAssignmentId=appraisalAssignmentId,
            appraisalItemResponseId=appraisalItemResponseId,
            appraisalid=appraisalid,
            assetid=assetid,
            atchType=atchType,
            attachUserModel=attachUserModel,
            attachid=attachid,
            attachmentFolderModel=attachmentFolderModel,
            authkey=authkey,
            candidateAccess=candidateAccess,
            candidateid=candidateid,
            category=category,
            cid=cid,
            comments=comments,
            createts=createts,
            createuserid=createuserid,
            customerId=customerId,
            dLExpiryDate=dLExpiryDate,
            dLIssueDate=dLIssueDate,
            documentContent=documentContent,
            documentExpiryDate=documentExpiryDate,
            documentType=documentType,
            documnetIssueDate=documnetIssueDate,
            expenseItemId=expenseItemId,
            expenseid=expenseid,
            fileExtn=fileExtn,
            filename=filename,
            folder=folder,
            folder_id=folder_id,
            goalid=goalid,
            language=language,
            leaveid=leaveid,
            multiSigning=multiSigning,
            objectAccessModelList=objectAccessModelList,
            objectType=objectType,
            obtype=obtype,
            payStubId=payStubId,
            positionid=positionid,
            projectModel=projectModel,
            projectid=projectid,
            resume=resume,
            ruleid=ruleid,
            s3id=s3id,
            signNowDocId=signNowDocId,
            signNowTemplateId=signNowTemplateId,
            signStatus=signStatus,
            signatureId=signatureId,
            signatureRequestId=signatureRequestId,
            signingDate=signingDate,
            size=size,
            skilluserId=skilluserId,
            stateCountryModel=stateCountryModel,
            status=status,
            taskId=taskId,
            ticketId=ticketId,
            timecardid=timecardid,
            topic=topic,
            trainingId=trainingId,
            userAccess=userAccess,
            userGroupModel=userGroupModel,
            userModel=userModel,
            userid=userid,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.attachment_folder_model import AttachmentFolderModel
from clay_hr_python_sdk.model.object_access_model import ObjectAccessModel
from clay_hr_python_sdk.model.project_model import ProjectModel
from clay_hr_python_sdk.model.state_country_model import StateCountryModel
from clay_hr_python_sdk.model.user_group_model import UserGroupModel
from clay_hr_python_sdk.model.user_model import UserModel

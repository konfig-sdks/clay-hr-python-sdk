# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class UserGroupModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            cid = schemas.Int32Schema
            createuserid = schemas.Int32Schema
            functionid = schemas.Int32Schema
            membershipGuidance = schemas.StrSchema
        
            @staticmethod
            def updatets() -> typing.Type['Timestamp']:
                return Timestamp
            usergroupid = schemas.Int32Schema
            usergroupname = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "cid": cid,
                "createuserid": createuserid,
                "functionid": functionid,
                "membershipGuidance": membershipGuidance,
                "updatets": updatets,
                "usergroupid": usergroupid,
                "usergroupname": usergroupname,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createuserid"]) -> MetaOapg.properties.createuserid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["functionid"]) -> MetaOapg.properties.functionid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["membershipGuidance"]) -> MetaOapg.properties.membershipGuidance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatets"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usergroupid"]) -> MetaOapg.properties.usergroupid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usergroupname"]) -> MetaOapg.properties.usergroupname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "cid", "createuserid", "functionid", "membershipGuidance", "updatets", "usergroupid", "usergroupname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createuserid"]) -> typing.Union[MetaOapg.properties.createuserid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["functionid"]) -> typing.Union[MetaOapg.properties.functionid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["membershipGuidance"]) -> typing.Union[MetaOapg.properties.membershipGuidance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatets"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usergroupid"]) -> typing.Union[MetaOapg.properties.usergroupid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usergroupname"]) -> typing.Union[MetaOapg.properties.usergroupname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "cid", "createuserid", "functionid", "membershipGuidance", "updatets", "usergroupid", "usergroupname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createuserid: typing.Union[MetaOapg.properties.createuserid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        functionid: typing.Union[MetaOapg.properties.functionid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        membershipGuidance: typing.Union[MetaOapg.properties.membershipGuidance, str, schemas.Unset] = schemas.unset,
        updatets: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        usergroupid: typing.Union[MetaOapg.properties.usergroupid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        usergroupname: typing.Union[MetaOapg.properties.usergroupname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserGroupModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            cid=cid,
            createuserid=createuserid,
            functionid=functionid,
            membershipGuidance=membershipGuidance,
            updatets=updatets,
            usergroupid=usergroupid,
            usergroupname=usergroupname,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.timestamp import Timestamp

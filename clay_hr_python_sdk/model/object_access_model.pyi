# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class ObjectAccessModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            accessCode = schemas.StrSchema
            atchfolderid = schemas.Int32Schema
            atchid = schemas.Int32Schema
            cfid = schemas.Int32Schema
            cid = schemas.Int32Schema
        
            @staticmethod
            def createTimestamp() -> typing.Type['Timestamp']:
                return Timestamp
            createUserId = schemas.Int32Schema
            departmentId = schemas.Int32Schema
        
            @staticmethod
            def departmentModel() -> typing.Type['DepartmentModel']:
                return DepartmentModel
            locationId = schemas.Int32Schema
        
            @staticmethod
            def locationModel() -> typing.Type['LocationModel']:
                return LocationModel
            objectAccessId = schemas.Int32Schema
            obtype = schemas.StrSchema
            userGroupId = schemas.Int32Schema
        
            @staticmethod
            def userGroupModel() -> typing.Type['UserGroupModel']:
                return UserGroupModel
        
            @staticmethod
            def userViewModel() -> typing.Type['UserViewModel']:
                return UserViewModel
            userid = schemas.Int32Schema
            __annotations__ = {
                "accessCode": accessCode,
                "atchfolderid": atchfolderid,
                "atchid": atchid,
                "cfid": cfid,
                "cid": cid,
                "createTimestamp": createTimestamp,
                "createUserId": createUserId,
                "departmentId": departmentId,
                "departmentModel": departmentModel,
                "locationId": locationId,
                "locationModel": locationModel,
                "objectAccessId": objectAccessId,
                "obtype": obtype,
                "userGroupId": userGroupId,
                "userGroupModel": userGroupModel,
                "userViewModel": userViewModel,
                "userid": userid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessCode"]) -> MetaOapg.properties.accessCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atchfolderid"]) -> MetaOapg.properties.atchfolderid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atchid"]) -> MetaOapg.properties.atchid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cfid"]) -> MetaOapg.properties.cfid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createTimestamp"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentId"]) -> MetaOapg.properties.departmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentModel"]) -> 'DepartmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationModel"]) -> 'LocationModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectAccessId"]) -> MetaOapg.properties.objectAccessId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["obtype"]) -> MetaOapg.properties.obtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroupId"]) -> MetaOapg.properties.userGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroupModel"]) -> 'UserGroupModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userViewModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userid"]) -> MetaOapg.properties.userid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accessCode", "atchfolderid", "atchid", "cfid", "cid", "createTimestamp", "createUserId", "departmentId", "departmentModel", "locationId", "locationModel", "objectAccessId", "obtype", "userGroupId", "userGroupModel", "userViewModel", "userid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessCode"]) -> typing.Union[MetaOapg.properties.accessCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atchfolderid"]) -> typing.Union[MetaOapg.properties.atchfolderid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atchid"]) -> typing.Union[MetaOapg.properties.atchid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cfid"]) -> typing.Union[MetaOapg.properties.cfid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createTimestamp"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentId"]) -> typing.Union[MetaOapg.properties.departmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentModel"]) -> typing.Union['DepartmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationId"]) -> typing.Union[MetaOapg.properties.locationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationModel"]) -> typing.Union['LocationModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectAccessId"]) -> typing.Union[MetaOapg.properties.objectAccessId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["obtype"]) -> typing.Union[MetaOapg.properties.obtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroupId"]) -> typing.Union[MetaOapg.properties.userGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroupModel"]) -> typing.Union['UserGroupModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userViewModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userid"]) -> typing.Union[MetaOapg.properties.userid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accessCode", "atchfolderid", "atchid", "cfid", "cid", "createTimestamp", "createUserId", "departmentId", "departmentModel", "locationId", "locationModel", "objectAccessId", "obtype", "userGroupId", "userGroupModel", "userViewModel", "userid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accessCode: typing.Union[MetaOapg.properties.accessCode, str, schemas.Unset] = schemas.unset,
        atchfolderid: typing.Union[MetaOapg.properties.atchfolderid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        atchid: typing.Union[MetaOapg.properties.atchid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cfid: typing.Union[MetaOapg.properties.cfid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createTimestamp: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        departmentId: typing.Union[MetaOapg.properties.departmentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        departmentModel: typing.Union['DepartmentModel', schemas.Unset] = schemas.unset,
        locationId: typing.Union[MetaOapg.properties.locationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        locationModel: typing.Union['LocationModel', schemas.Unset] = schemas.unset,
        objectAccessId: typing.Union[MetaOapg.properties.objectAccessId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        obtype: typing.Union[MetaOapg.properties.obtype, str, schemas.Unset] = schemas.unset,
        userGroupId: typing.Union[MetaOapg.properties.userGroupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userGroupModel: typing.Union['UserGroupModel', schemas.Unset] = schemas.unset,
        userViewModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        userid: typing.Union[MetaOapg.properties.userid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ObjectAccessModel':
        return super().__new__(
            cls,
            *args,
            accessCode=accessCode,
            atchfolderid=atchfolderid,
            atchid=atchid,
            cfid=cfid,
            cid=cid,
            createTimestamp=createTimestamp,
            createUserId=createUserId,
            departmentId=departmentId,
            departmentModel=departmentModel,
            locationId=locationId,
            locationModel=locationModel,
            objectAccessId=objectAccessId,
            obtype=obtype,
            userGroupId=userGroupId,
            userGroupModel=userGroupModel,
            userViewModel=userViewModel,
            userid=userid,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.department_model import DepartmentModel
from clay_hr_python_sdk.model.location_model import LocationModel
from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_group_model import UserGroupModel
from clay_hr_python_sdk.model.user_view_model import UserViewModel

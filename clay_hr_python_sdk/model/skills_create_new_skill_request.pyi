# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class SkillsCreateNewSkillRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "description",
            "skillCode",
        }
        
        class properties:
            description = schemas.StrSchema
            skillCode = schemas.StrSchema
        
            @staticmethod
            def assessmentModel() -> typing.Type['SkillsCreateNewSkillRequestAssessmentModel']:
                return SkillsCreateNewSkillRequestAssessmentModel
        
            @staticmethod
            def skillTypeModel() -> typing.Type['SkillsCreateNewSkillRequestSkillTypeModel']:
                return SkillsCreateNewSkillRequestSkillTypeModel
            __annotations__ = {
                "description": description,
                "skillCode": skillCode,
                "assessmentModel": assessmentModel,
                "skillTypeModel": skillTypeModel,
            }
    
    description: MetaOapg.properties.description
    skillCode: MetaOapg.properties.skillCode
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillCode"]) -> MetaOapg.properties.skillCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assessmentModel"]) -> 'SkillsCreateNewSkillRequestAssessmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeModel"]) -> 'SkillsCreateNewSkillRequestSkillTypeModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "skillCode", "assessmentModel", "skillTypeModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillCode"]) -> MetaOapg.properties.skillCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assessmentModel"]) -> typing.Union['SkillsCreateNewSkillRequestAssessmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeModel"]) -> typing.Union['SkillsCreateNewSkillRequestSkillTypeModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "skillCode", "assessmentModel", "skillTypeModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        skillCode: typing.Union[MetaOapg.properties.skillCode, str, ],
        assessmentModel: typing.Union['SkillsCreateNewSkillRequestAssessmentModel', schemas.Unset] = schemas.unset,
        skillTypeModel: typing.Union['SkillsCreateNewSkillRequestSkillTypeModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SkillsCreateNewSkillRequest':
        return super().__new__(
            cls,
            *args,
            description=description,
            skillCode=skillCode,
            assessmentModel=assessmentModel,
            skillTypeModel=skillTypeModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.skills_create_new_skill_request_assessment_model import SkillsCreateNewSkillRequestAssessmentModel
from clay_hr_python_sdk.model.skills_create_new_skill_request_skill_type_model import SkillsCreateNewSkillRequestSkillTypeModel

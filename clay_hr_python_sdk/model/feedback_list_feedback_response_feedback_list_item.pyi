# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class FeedbackListFeedbackResponseFeedbackListItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            feedbackid = schemas.StrSchema
            feedback = schemas.StrSchema
            feedbackDesc = schemas.StrSchema
        
            @staticmethod
            def assignedUserModel() -> typing.Type['FeedbackListFeedbackResponseFeedbackListItemAssignedUserModel']:
                return FeedbackListFeedbackResponseFeedbackListItemAssignedUserModel
            cid = schemas.StrSchema
            createts = schemas.StrSchema
            pfSkillList = schemas.StrSchema
            createUserModel = schemas.StrSchema
            assessment = schemas.StrSchema
            status = schemas.StrSchema
            recipientStatus = schemas.StrSchema
            objectType = schemas.StrSchema
            sentimentCode = schemas.StrSchema
            sentimentScore = schemas.StrSchema
            pfBadgeList = schemas.StrSchema
            userName = schemas.StrSchema
            customFieldModelList = schemas.StrSchema
            badgeNames = schemas.StrSchema
            attachmentModelList = schemas.StrSchema
            wallName = schemas.StrSchema
            skillString = schemas.StrSchema
            reactionType = schemas.StrSchema
            id = schemas.StrSchema
            __annotations__ = {
                "feedbackid": feedbackid,
                "feedback": feedback,
                "feedbackDesc": feedbackDesc,
                "assignedUserModel": assignedUserModel,
                "cid": cid,
                "createts": createts,
                "pfSkillList": pfSkillList,
                "createUserModel": createUserModel,
                "assessment": assessment,
                "status": status,
                "recipientStatus": recipientStatus,
                "objectType": objectType,
                "sentimentCode": sentimentCode,
                "sentimentScore": sentimentScore,
                "pfBadgeList": pfBadgeList,
                "userName": userName,
                "customFieldModelList": customFieldModelList,
                "badgeNames": badgeNames,
                "attachmentModelList": attachmentModelList,
                "wallName": wallName,
                "skillString": skillString,
                "reactionType": reactionType,
                "id": id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedbackid"]) -> MetaOapg.properties.feedbackid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedback"]) -> MetaOapg.properties.feedback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedbackDesc"]) -> MetaOapg.properties.feedbackDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedUserModel"]) -> 'FeedbackListFeedbackResponseFeedbackListItemAssignedUserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pfSkillList"]) -> MetaOapg.properties.pfSkillList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserModel"]) -> MetaOapg.properties.createUserModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assessment"]) -> MetaOapg.properties.assessment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipientStatus"]) -> MetaOapg.properties.recipientStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectType"]) -> MetaOapg.properties.objectType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sentimentCode"]) -> MetaOapg.properties.sentimentCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sentimentScore"]) -> MetaOapg.properties.sentimentScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pfBadgeList"]) -> MetaOapg.properties.pfBadgeList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldModelList"]) -> MetaOapg.properties.customFieldModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["badgeNames"]) -> MetaOapg.properties.badgeNames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachmentModelList"]) -> MetaOapg.properties.attachmentModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallName"]) -> MetaOapg.properties.wallName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillString"]) -> MetaOapg.properties.skillString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reactionType"]) -> MetaOapg.properties.reactionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["feedbackid", "feedback", "feedbackDesc", "assignedUserModel", "cid", "createts", "pfSkillList", "createUserModel", "assessment", "status", "recipientStatus", "objectType", "sentimentCode", "sentimentScore", "pfBadgeList", "userName", "customFieldModelList", "badgeNames", "attachmentModelList", "wallName", "skillString", "reactionType", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedbackid"]) -> typing.Union[MetaOapg.properties.feedbackid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedback"]) -> typing.Union[MetaOapg.properties.feedback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedbackDesc"]) -> typing.Union[MetaOapg.properties.feedbackDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedUserModel"]) -> typing.Union['FeedbackListFeedbackResponseFeedbackListItemAssignedUserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pfSkillList"]) -> typing.Union[MetaOapg.properties.pfSkillList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserModel"]) -> typing.Union[MetaOapg.properties.createUserModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assessment"]) -> typing.Union[MetaOapg.properties.assessment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipientStatus"]) -> typing.Union[MetaOapg.properties.recipientStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectType"]) -> typing.Union[MetaOapg.properties.objectType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sentimentCode"]) -> typing.Union[MetaOapg.properties.sentimentCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sentimentScore"]) -> typing.Union[MetaOapg.properties.sentimentScore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pfBadgeList"]) -> typing.Union[MetaOapg.properties.pfBadgeList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldModelList"]) -> typing.Union[MetaOapg.properties.customFieldModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["badgeNames"]) -> typing.Union[MetaOapg.properties.badgeNames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachmentModelList"]) -> typing.Union[MetaOapg.properties.attachmentModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallName"]) -> typing.Union[MetaOapg.properties.wallName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillString"]) -> typing.Union[MetaOapg.properties.skillString, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reactionType"]) -> typing.Union[MetaOapg.properties.reactionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["feedbackid", "feedback", "feedbackDesc", "assignedUserModel", "cid", "createts", "pfSkillList", "createUserModel", "assessment", "status", "recipientStatus", "objectType", "sentimentCode", "sentimentScore", "pfBadgeList", "userName", "customFieldModelList", "badgeNames", "attachmentModelList", "wallName", "skillString", "reactionType", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        feedbackid: typing.Union[MetaOapg.properties.feedbackid, str, schemas.Unset] = schemas.unset,
        feedback: typing.Union[MetaOapg.properties.feedback, str, schemas.Unset] = schemas.unset,
        feedbackDesc: typing.Union[MetaOapg.properties.feedbackDesc, str, schemas.Unset] = schemas.unset,
        assignedUserModel: typing.Union['FeedbackListFeedbackResponseFeedbackListItemAssignedUserModel', schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, schemas.Unset] = schemas.unset,
        pfSkillList: typing.Union[MetaOapg.properties.pfSkillList, str, schemas.Unset] = schemas.unset,
        createUserModel: typing.Union[MetaOapg.properties.createUserModel, str, schemas.Unset] = schemas.unset,
        assessment: typing.Union[MetaOapg.properties.assessment, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        recipientStatus: typing.Union[MetaOapg.properties.recipientStatus, str, schemas.Unset] = schemas.unset,
        objectType: typing.Union[MetaOapg.properties.objectType, str, schemas.Unset] = schemas.unset,
        sentimentCode: typing.Union[MetaOapg.properties.sentimentCode, str, schemas.Unset] = schemas.unset,
        sentimentScore: typing.Union[MetaOapg.properties.sentimentScore, str, schemas.Unset] = schemas.unset,
        pfBadgeList: typing.Union[MetaOapg.properties.pfBadgeList, str, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        customFieldModelList: typing.Union[MetaOapg.properties.customFieldModelList, str, schemas.Unset] = schemas.unset,
        badgeNames: typing.Union[MetaOapg.properties.badgeNames, str, schemas.Unset] = schemas.unset,
        attachmentModelList: typing.Union[MetaOapg.properties.attachmentModelList, str, schemas.Unset] = schemas.unset,
        wallName: typing.Union[MetaOapg.properties.wallName, str, schemas.Unset] = schemas.unset,
        skillString: typing.Union[MetaOapg.properties.skillString, str, schemas.Unset] = schemas.unset,
        reactionType: typing.Union[MetaOapg.properties.reactionType, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FeedbackListFeedbackResponseFeedbackListItem':
        return super().__new__(
            cls,
            *args,
            feedbackid=feedbackid,
            feedback=feedback,
            feedbackDesc=feedbackDesc,
            assignedUserModel=assignedUserModel,
            cid=cid,
            createts=createts,
            pfSkillList=pfSkillList,
            createUserModel=createUserModel,
            assessment=assessment,
            status=status,
            recipientStatus=recipientStatus,
            objectType=objectType,
            sentimentCode=sentimentCode,
            sentimentScore=sentimentScore,
            pfBadgeList=pfBadgeList,
            userName=userName,
            customFieldModelList=customFieldModelList,
            badgeNames=badgeNames,
            attachmentModelList=attachmentModelList,
            wallName=wallName,
            skillString=skillString,
            reactionType=reactionType,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.feedback_list_feedback_response_feedback_list_item_assigned_user_model import FeedbackListFeedbackResponseFeedbackListItemAssignedUserModel

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            value = schemas.Float32Schema
            
            
            class period(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HRLY(cls):
                    return cls("HRLY")
                
                @schemas.classproperty
                def DLY(cls):
                    return cls("DLY")
                
                @schemas.classproperty
                def WKLY(cls):
                    return cls("WKLY")
                
                @schemas.classproperty
                def BWKLY(cls):
                    return cls("BWKLY")
                
                @schemas.classproperty
                def BMTH(cls):
                    return cls("BMTH")
                
                @schemas.classproperty
                def MTHLY(cls):
                    return cls("MTHLY")
                
                @schemas.classproperty
                def QTRLY(cls):
                    return cls("QTRLY")
                
                @schemas.classproperty
                def BYRLY(cls):
                    return cls("BYRLY")
                
                @schemas.classproperty
                def YRLY(cls):
                    return cls("YRLY")
                
                @schemas.classproperty
                def ONEF(cls):
                    return cls("ONEF")
            
            
            class financialType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COMP(cls):
                    return cls("COMP")
            currencyCode = schemas.StrSchema
            effectivedate = schemas.StrSchema
            
            
            class compensationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SAL(cls):
                    return cls("sal")
                
                @schemas.classproperty
                def PAY(cls):
                    return cls("pay")
                
                @schemas.classproperty
                def BONUS(cls):
                    return cls("bonus")
                
                @schemas.classproperty
                def INCTV(cls):
                    return cls("INCTV")
                
                @schemas.classproperty
                def SVRC(cls):
                    return cls("SVRC")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("other")
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ACTV(cls):
                    return cls("ACTV")
                
                @schemas.classproperty
                def ARCHV(cls):
                    return cls("ARCHV")
                
                @schemas.classproperty
                def PVNL(cls):
                    return cls("PVNL")
            changeTypeId = schemas.Int32Schema
            changeTypeCode = schemas.StrSchema
            extAppUID = schemas.StrSchema
            __annotations__ = {
                "value": value,
                "period": period,
                "financialType": financialType,
                "currencyCode": currencyCode,
                "effectivedate": effectivedate,
                "compensationType": compensationType,
                "status": status,
                "changeTypeId": changeTypeId,
                "changeTypeCode": changeTypeCode,
                "extAppUID": extAppUID,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["financialType"]) -> MetaOapg.properties.financialType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectivedate"]) -> MetaOapg.properties.effectivedate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensationType"]) -> MetaOapg.properties.compensationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeTypeId"]) -> MetaOapg.properties.changeTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeTypeCode"]) -> MetaOapg.properties.changeTypeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extAppUID"]) -> MetaOapg.properties.extAppUID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["value", "period", "financialType", "currencyCode", "effectivedate", "compensationType", "status", "changeTypeId", "changeTypeCode", "extAppUID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> typing.Union[MetaOapg.properties.period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["financialType"]) -> typing.Union[MetaOapg.properties.financialType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectivedate"]) -> typing.Union[MetaOapg.properties.effectivedate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensationType"]) -> typing.Union[MetaOapg.properties.compensationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeTypeId"]) -> typing.Union[MetaOapg.properties.changeTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeTypeCode"]) -> typing.Union[MetaOapg.properties.changeTypeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extAppUID"]) -> typing.Union[MetaOapg.properties.extAppUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["value", "period", "financialType", "currencyCode", "effectivedate", "compensationType", "status", "changeTypeId", "changeTypeCode", "extAppUID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        period: typing.Union[MetaOapg.properties.period, str, schemas.Unset] = schemas.unset,
        financialType: typing.Union[MetaOapg.properties.financialType, str, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        effectivedate: typing.Union[MetaOapg.properties.effectivedate, str, schemas.Unset] = schemas.unset,
        compensationType: typing.Union[MetaOapg.properties.compensationType, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        changeTypeId: typing.Union[MetaOapg.properties.changeTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        changeTypeCode: typing.Union[MetaOapg.properties.changeTypeCode, str, schemas.Unset] = schemas.unset,
        extAppUID: typing.Union[MetaOapg.properties.extAppUID, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PeopleAndPermissionsCreateOrUpdateUserDetailsRequestFinancialListItem':
        return super().__new__(
            cls,
            *args,
            value=value,
            period=period,
            financialType=financialType,
            currencyCode=currencyCode,
            effectivedate=effectivedate,
            compensationType=compensationType,
            status=status,
            changeTypeId=changeTypeId,
            changeTypeCode=changeTypeCode,
            extAppUID=extAppUID,
            _configuration=_configuration,
            **kwargs,
        )

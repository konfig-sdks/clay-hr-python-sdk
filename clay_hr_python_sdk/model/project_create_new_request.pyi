# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class ProjectCreateNewRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "projectDesc",
            "projectName",
            "shortCode",
            "startDate",
        }
        
        class properties:
            projectName = schemas.StrSchema
            projectDesc = schemas.StrSchema
            shortCode = schemas.StrSchema
            startDate = schemas.DateSchema
            __annotations__ = {
                "projectName": projectName,
                "projectDesc": projectDesc,
                "shortCode": shortCode,
                "startDate": startDate,
            }
    
    projectDesc: MetaOapg.properties.projectDesc
    projectName: MetaOapg.properties.projectName
    shortCode: MetaOapg.properties.shortCode
    startDate: MetaOapg.properties.startDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectName"]) -> MetaOapg.properties.projectName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectDesc"]) -> MetaOapg.properties.projectDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortCode"]) -> MetaOapg.properties.shortCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["projectName", "projectDesc", "shortCode", "startDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectName"]) -> MetaOapg.properties.projectName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectDesc"]) -> MetaOapg.properties.projectDesc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortCode"]) -> MetaOapg.properties.shortCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["projectName", "projectDesc", "shortCode", "startDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        projectDesc: typing.Union[MetaOapg.properties.projectDesc, str, ],
        projectName: typing.Union[MetaOapg.properties.projectName, str, ],
        shortCode: typing.Union[MetaOapg.properties.shortCode, str, ],
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectCreateNewRequest':
        return super().__new__(
            cls,
            *args,
            projectDesc=projectDesc,
            projectName=projectName,
            shortCode=shortCode,
            startDate=startDate,
            _configuration=_configuration,
            **kwargs,
        )

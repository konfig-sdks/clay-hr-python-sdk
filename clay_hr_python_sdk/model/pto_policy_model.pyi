# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class PtoPolicyModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ptoPolicyId",
        }
        
        class properties:
            ptoPolicyId = schemas.Int32Schema
            description = schemas.StrSchema
            accrualRateAnnual = schemas.Float32Schema
            accrualRateAnnualUnit = schemas.Float64Schema
            accrualRateHours = schemas.Float32Schema
            accrualRateUnit = schemas.Float64Schema
            accrualThresholdWeeks = schemas.Int32Schema
            accrualTime = schemas.Int32Schema
            accrualTimeSpan = schemas.StrSchema
            accrualtype = schemas.StrSchema
            allowAccrualRateOverride = schemas.Int32Schema
            allowRequestBeyondBal = schemas.Int32Schema
            applicability = schemas.Int32Schema
            bonus = schemas.Float32Schema
            bonusMax = schemas.Float32Schema
            carryoverDate = schemas.DateSchema
            carryoverExpirationQuantity = schemas.Int32Schema
            carryoverExpirationUnit = schemas.StrSchema
            cid = schemas.Int32Schema
            createUserId = schemas.Int32Schema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            customIcon = schemas.StrSchema
            daysDefinition = schemas.StrSchema
            effectiveDate = schemas.DateSchema
            expirationDate = schemas.DateSchema
            halfDayAllowed = schemas.Int32Schema
            hasAssignment = schemas.BoolSchema
            icon = schemas.StrSchema
            isAccrued = schemas.StrSchema
            lastRun = schemas.DateSchema
            leaveType = schemas.StrSchema
            leaveYearStart = schemas.StrSchema
            leaveYearStartDate = schemas.DateSchema
            nextRunDate = schemas.DateSchema
            paid = schemas.Int32Schema
            policyName = schemas.StrSchema
            policycondition = schemas.StrSchema
            prorated = schemas.Int32Schema
        
            @staticmethod
            def ptoPolicyApprovalFlowModel() -> typing.Type['PtoPolicyApprovalFlowModel']:
                return PtoPolicyApprovalFlowModel
        
            @staticmethod
            def ptoPolicyChainModel() -> typing.Type['PtoPolicyChainModel']:
                return PtoPolicyChainModel
            ptoPolicyChainSeqId = schemas.Int32Schema
            rollOverMax = schemas.Float64Schema
            rollOverPercentage = schemas.Float64Schema
            showInCalendar = schemas.Int32Schema
            tenureThreshold = schemas.Float32Schema
            thresholdQuantity = schemas.Int32Schema
            thresholdUnit = schemas.StrSchema
            unit = schemas.StrSchema
            __annotations__ = {
                "ptoPolicyId": ptoPolicyId,
                "description": description,
                "accrualRateAnnual": accrualRateAnnual,
                "accrualRateAnnualUnit": accrualRateAnnualUnit,
                "accrualRateHours": accrualRateHours,
                "accrualRateUnit": accrualRateUnit,
                "accrualThresholdWeeks": accrualThresholdWeeks,
                "accrualTime": accrualTime,
                "accrualTimeSpan": accrualTimeSpan,
                "accrualtype": accrualtype,
                "allowAccrualRateOverride": allowAccrualRateOverride,
                "allowRequestBeyondBal": allowRequestBeyondBal,
                "applicability": applicability,
                "bonus": bonus,
                "bonusMax": bonusMax,
                "carryoverDate": carryoverDate,
                "carryoverExpirationQuantity": carryoverExpirationQuantity,
                "carryoverExpirationUnit": carryoverExpirationUnit,
                "cid": cid,
                "createUserId": createUserId,
                "createts": createts,
                "customIcon": customIcon,
                "daysDefinition": daysDefinition,
                "effectiveDate": effectiveDate,
                "expirationDate": expirationDate,
                "halfDayAllowed": halfDayAllowed,
                "hasAssignment": hasAssignment,
                "icon": icon,
                "isAccrued": isAccrued,
                "lastRun": lastRun,
                "leaveType": leaveType,
                "leaveYearStart": leaveYearStart,
                "leaveYearStartDate": leaveYearStartDate,
                "nextRunDate": nextRunDate,
                "paid": paid,
                "policyName": policyName,
                "policycondition": policycondition,
                "prorated": prorated,
                "ptoPolicyApprovalFlowModel": ptoPolicyApprovalFlowModel,
                "ptoPolicyChainModel": ptoPolicyChainModel,
                "ptoPolicyChainSeqId": ptoPolicyChainSeqId,
                "rollOverMax": rollOverMax,
                "rollOverPercentage": rollOverPercentage,
                "showInCalendar": showInCalendar,
                "tenureThreshold": tenureThreshold,
                "thresholdQuantity": thresholdQuantity,
                "thresholdUnit": thresholdUnit,
                "unit": unit,
            }
    
    ptoPolicyId: MetaOapg.properties.ptoPolicyId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ptoPolicyId"]) -> MetaOapg.properties.ptoPolicyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualRateAnnual"]) -> MetaOapg.properties.accrualRateAnnual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualRateAnnualUnit"]) -> MetaOapg.properties.accrualRateAnnualUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualRateHours"]) -> MetaOapg.properties.accrualRateHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualRateUnit"]) -> MetaOapg.properties.accrualRateUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualThresholdWeeks"]) -> MetaOapg.properties.accrualThresholdWeeks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualTime"]) -> MetaOapg.properties.accrualTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualTimeSpan"]) -> MetaOapg.properties.accrualTimeSpan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accrualtype"]) -> MetaOapg.properties.accrualtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowAccrualRateOverride"]) -> MetaOapg.properties.allowAccrualRateOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowRequestBeyondBal"]) -> MetaOapg.properties.allowRequestBeyondBal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicability"]) -> MetaOapg.properties.applicability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonus"]) -> MetaOapg.properties.bonus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bonusMax"]) -> MetaOapg.properties.bonusMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carryoverDate"]) -> MetaOapg.properties.carryoverDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carryoverExpirationQuantity"]) -> MetaOapg.properties.carryoverExpirationQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carryoverExpirationUnit"]) -> MetaOapg.properties.carryoverExpirationUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customIcon"]) -> MetaOapg.properties.customIcon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daysDefinition"]) -> MetaOapg.properties.daysDefinition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["halfDayAllowed"]) -> MetaOapg.properties.halfDayAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasAssignment"]) -> MetaOapg.properties.hasAssignment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAccrued"]) -> MetaOapg.properties.isAccrued: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRun"]) -> MetaOapg.properties.lastRun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveType"]) -> MetaOapg.properties.leaveType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveYearStart"]) -> MetaOapg.properties.leaveYearStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveYearStartDate"]) -> MetaOapg.properties.leaveYearStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextRunDate"]) -> MetaOapg.properties.nextRunDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid"]) -> MetaOapg.properties.paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyName"]) -> MetaOapg.properties.policyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policycondition"]) -> MetaOapg.properties.policycondition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prorated"]) -> MetaOapg.properties.prorated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ptoPolicyApprovalFlowModel"]) -> 'PtoPolicyApprovalFlowModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ptoPolicyChainModel"]) -> 'PtoPolicyChainModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ptoPolicyChainSeqId"]) -> MetaOapg.properties.ptoPolicyChainSeqId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rollOverMax"]) -> MetaOapg.properties.rollOverMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rollOverPercentage"]) -> MetaOapg.properties.rollOverPercentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showInCalendar"]) -> MetaOapg.properties.showInCalendar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenureThreshold"]) -> MetaOapg.properties.tenureThreshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thresholdQuantity"]) -> MetaOapg.properties.thresholdQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thresholdUnit"]) -> MetaOapg.properties.thresholdUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> MetaOapg.properties.unit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ptoPolicyId", "description", "accrualRateAnnual", "accrualRateAnnualUnit", "accrualRateHours", "accrualRateUnit", "accrualThresholdWeeks", "accrualTime", "accrualTimeSpan", "accrualtype", "allowAccrualRateOverride", "allowRequestBeyondBal", "applicability", "bonus", "bonusMax", "carryoverDate", "carryoverExpirationQuantity", "carryoverExpirationUnit", "cid", "createUserId", "createts", "customIcon", "daysDefinition", "effectiveDate", "expirationDate", "halfDayAllowed", "hasAssignment", "icon", "isAccrued", "lastRun", "leaveType", "leaveYearStart", "leaveYearStartDate", "nextRunDate", "paid", "policyName", "policycondition", "prorated", "ptoPolicyApprovalFlowModel", "ptoPolicyChainModel", "ptoPolicyChainSeqId", "rollOverMax", "rollOverPercentage", "showInCalendar", "tenureThreshold", "thresholdQuantity", "thresholdUnit", "unit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ptoPolicyId"]) -> MetaOapg.properties.ptoPolicyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualRateAnnual"]) -> typing.Union[MetaOapg.properties.accrualRateAnnual, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualRateAnnualUnit"]) -> typing.Union[MetaOapg.properties.accrualRateAnnualUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualRateHours"]) -> typing.Union[MetaOapg.properties.accrualRateHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualRateUnit"]) -> typing.Union[MetaOapg.properties.accrualRateUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualThresholdWeeks"]) -> typing.Union[MetaOapg.properties.accrualThresholdWeeks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualTime"]) -> typing.Union[MetaOapg.properties.accrualTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualTimeSpan"]) -> typing.Union[MetaOapg.properties.accrualTimeSpan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accrualtype"]) -> typing.Union[MetaOapg.properties.accrualtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowAccrualRateOverride"]) -> typing.Union[MetaOapg.properties.allowAccrualRateOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowRequestBeyondBal"]) -> typing.Union[MetaOapg.properties.allowRequestBeyondBal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicability"]) -> typing.Union[MetaOapg.properties.applicability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonus"]) -> typing.Union[MetaOapg.properties.bonus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bonusMax"]) -> typing.Union[MetaOapg.properties.bonusMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carryoverDate"]) -> typing.Union[MetaOapg.properties.carryoverDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carryoverExpirationQuantity"]) -> typing.Union[MetaOapg.properties.carryoverExpirationQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carryoverExpirationUnit"]) -> typing.Union[MetaOapg.properties.carryoverExpirationUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customIcon"]) -> typing.Union[MetaOapg.properties.customIcon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daysDefinition"]) -> typing.Union[MetaOapg.properties.daysDefinition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["halfDayAllowed"]) -> typing.Union[MetaOapg.properties.halfDayAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasAssignment"]) -> typing.Union[MetaOapg.properties.hasAssignment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union[MetaOapg.properties.icon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAccrued"]) -> typing.Union[MetaOapg.properties.isAccrued, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRun"]) -> typing.Union[MetaOapg.properties.lastRun, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveType"]) -> typing.Union[MetaOapg.properties.leaveType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveYearStart"]) -> typing.Union[MetaOapg.properties.leaveYearStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveYearStartDate"]) -> typing.Union[MetaOapg.properties.leaveYearStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextRunDate"]) -> typing.Union[MetaOapg.properties.nextRunDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid"]) -> typing.Union[MetaOapg.properties.paid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyName"]) -> typing.Union[MetaOapg.properties.policyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policycondition"]) -> typing.Union[MetaOapg.properties.policycondition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prorated"]) -> typing.Union[MetaOapg.properties.prorated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ptoPolicyApprovalFlowModel"]) -> typing.Union['PtoPolicyApprovalFlowModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ptoPolicyChainModel"]) -> typing.Union['PtoPolicyChainModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ptoPolicyChainSeqId"]) -> typing.Union[MetaOapg.properties.ptoPolicyChainSeqId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rollOverMax"]) -> typing.Union[MetaOapg.properties.rollOverMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rollOverPercentage"]) -> typing.Union[MetaOapg.properties.rollOverPercentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showInCalendar"]) -> typing.Union[MetaOapg.properties.showInCalendar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenureThreshold"]) -> typing.Union[MetaOapg.properties.tenureThreshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thresholdQuantity"]) -> typing.Union[MetaOapg.properties.thresholdQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thresholdUnit"]) -> typing.Union[MetaOapg.properties.thresholdUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union[MetaOapg.properties.unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ptoPolicyId", "description", "accrualRateAnnual", "accrualRateAnnualUnit", "accrualRateHours", "accrualRateUnit", "accrualThresholdWeeks", "accrualTime", "accrualTimeSpan", "accrualtype", "allowAccrualRateOverride", "allowRequestBeyondBal", "applicability", "bonus", "bonusMax", "carryoverDate", "carryoverExpirationQuantity", "carryoverExpirationUnit", "cid", "createUserId", "createts", "customIcon", "daysDefinition", "effectiveDate", "expirationDate", "halfDayAllowed", "hasAssignment", "icon", "isAccrued", "lastRun", "leaveType", "leaveYearStart", "leaveYearStartDate", "nextRunDate", "paid", "policyName", "policycondition", "prorated", "ptoPolicyApprovalFlowModel", "ptoPolicyChainModel", "ptoPolicyChainSeqId", "rollOverMax", "rollOverPercentage", "showInCalendar", "tenureThreshold", "thresholdQuantity", "thresholdUnit", "unit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ptoPolicyId: typing.Union[MetaOapg.properties.ptoPolicyId, decimal.Decimal, int, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        accrualRateAnnual: typing.Union[MetaOapg.properties.accrualRateAnnual, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        accrualRateAnnualUnit: typing.Union[MetaOapg.properties.accrualRateAnnualUnit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        accrualRateHours: typing.Union[MetaOapg.properties.accrualRateHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        accrualRateUnit: typing.Union[MetaOapg.properties.accrualRateUnit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        accrualThresholdWeeks: typing.Union[MetaOapg.properties.accrualThresholdWeeks, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accrualTime: typing.Union[MetaOapg.properties.accrualTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accrualTimeSpan: typing.Union[MetaOapg.properties.accrualTimeSpan, str, schemas.Unset] = schemas.unset,
        accrualtype: typing.Union[MetaOapg.properties.accrualtype, str, schemas.Unset] = schemas.unset,
        allowAccrualRateOverride: typing.Union[MetaOapg.properties.allowAccrualRateOverride, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allowRequestBeyondBal: typing.Union[MetaOapg.properties.allowRequestBeyondBal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        applicability: typing.Union[MetaOapg.properties.applicability, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        bonus: typing.Union[MetaOapg.properties.bonus, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bonusMax: typing.Union[MetaOapg.properties.bonusMax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        carryoverDate: typing.Union[MetaOapg.properties.carryoverDate, str, date, schemas.Unset] = schemas.unset,
        carryoverExpirationQuantity: typing.Union[MetaOapg.properties.carryoverExpirationQuantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        carryoverExpirationUnit: typing.Union[MetaOapg.properties.carryoverExpirationUnit, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        customIcon: typing.Union[MetaOapg.properties.customIcon, str, schemas.Unset] = schemas.unset,
        daysDefinition: typing.Union[MetaOapg.properties.daysDefinition, str, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, date, schemas.Unset] = schemas.unset,
        expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, date, schemas.Unset] = schemas.unset,
        halfDayAllowed: typing.Union[MetaOapg.properties.halfDayAllowed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hasAssignment: typing.Union[MetaOapg.properties.hasAssignment, bool, schemas.Unset] = schemas.unset,
        icon: typing.Union[MetaOapg.properties.icon, str, schemas.Unset] = schemas.unset,
        isAccrued: typing.Union[MetaOapg.properties.isAccrued, str, schemas.Unset] = schemas.unset,
        lastRun: typing.Union[MetaOapg.properties.lastRun, str, date, schemas.Unset] = schemas.unset,
        leaveType: typing.Union[MetaOapg.properties.leaveType, str, schemas.Unset] = schemas.unset,
        leaveYearStart: typing.Union[MetaOapg.properties.leaveYearStart, str, schemas.Unset] = schemas.unset,
        leaveYearStartDate: typing.Union[MetaOapg.properties.leaveYearStartDate, str, date, schemas.Unset] = schemas.unset,
        nextRunDate: typing.Union[MetaOapg.properties.nextRunDate, str, date, schemas.Unset] = schemas.unset,
        paid: typing.Union[MetaOapg.properties.paid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        policyName: typing.Union[MetaOapg.properties.policyName, str, schemas.Unset] = schemas.unset,
        policycondition: typing.Union[MetaOapg.properties.policycondition, str, schemas.Unset] = schemas.unset,
        prorated: typing.Union[MetaOapg.properties.prorated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ptoPolicyApprovalFlowModel: typing.Union['PtoPolicyApprovalFlowModel', schemas.Unset] = schemas.unset,
        ptoPolicyChainModel: typing.Union['PtoPolicyChainModel', schemas.Unset] = schemas.unset,
        ptoPolicyChainSeqId: typing.Union[MetaOapg.properties.ptoPolicyChainSeqId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rollOverMax: typing.Union[MetaOapg.properties.rollOverMax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rollOverPercentage: typing.Union[MetaOapg.properties.rollOverPercentage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        showInCalendar: typing.Union[MetaOapg.properties.showInCalendar, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tenureThreshold: typing.Union[MetaOapg.properties.tenureThreshold, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        thresholdQuantity: typing.Union[MetaOapg.properties.thresholdQuantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thresholdUnit: typing.Union[MetaOapg.properties.thresholdUnit, str, schemas.Unset] = schemas.unset,
        unit: typing.Union[MetaOapg.properties.unit, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PtoPolicyModel':
        return super().__new__(
            cls,
            *args,
            ptoPolicyId=ptoPolicyId,
            description=description,
            accrualRateAnnual=accrualRateAnnual,
            accrualRateAnnualUnit=accrualRateAnnualUnit,
            accrualRateHours=accrualRateHours,
            accrualRateUnit=accrualRateUnit,
            accrualThresholdWeeks=accrualThresholdWeeks,
            accrualTime=accrualTime,
            accrualTimeSpan=accrualTimeSpan,
            accrualtype=accrualtype,
            allowAccrualRateOverride=allowAccrualRateOverride,
            allowRequestBeyondBal=allowRequestBeyondBal,
            applicability=applicability,
            bonus=bonus,
            bonusMax=bonusMax,
            carryoverDate=carryoverDate,
            carryoverExpirationQuantity=carryoverExpirationQuantity,
            carryoverExpirationUnit=carryoverExpirationUnit,
            cid=cid,
            createUserId=createUserId,
            createts=createts,
            customIcon=customIcon,
            daysDefinition=daysDefinition,
            effectiveDate=effectiveDate,
            expirationDate=expirationDate,
            halfDayAllowed=halfDayAllowed,
            hasAssignment=hasAssignment,
            icon=icon,
            isAccrued=isAccrued,
            lastRun=lastRun,
            leaveType=leaveType,
            leaveYearStart=leaveYearStart,
            leaveYearStartDate=leaveYearStartDate,
            nextRunDate=nextRunDate,
            paid=paid,
            policyName=policyName,
            policycondition=policycondition,
            prorated=prorated,
            ptoPolicyApprovalFlowModel=ptoPolicyApprovalFlowModel,
            ptoPolicyChainModel=ptoPolicyChainModel,
            ptoPolicyChainSeqId=ptoPolicyChainSeqId,
            rollOverMax=rollOverMax,
            rollOverPercentage=rollOverPercentage,
            showInCalendar=showInCalendar,
            tenureThreshold=tenureThreshold,
            thresholdQuantity=thresholdQuantity,
            thresholdUnit=thresholdUnit,
            unit=unit,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.pto_policy_approval_flow_model import PtoPolicyApprovalFlowModel
from clay_hr_python_sdk.model.pto_policy_chain_model import PtoPolicyChainModel
from clay_hr_python_sdk.model.timestamp import Timestamp

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class TrainingModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            approvalStatus = schemas.StrSchema
            assignedUsersCount = schemas.Int32Schema
            attachmentId = schemas.Int32Schema
            chargeType = schemas.StrSchema
            cid = schemas.Int32Schema
            city = schemas.StrSchema
            contentMandatory = schemas.Int32Schema
            contentURL = schemas.StrSchema
            country = schemas.StrSchema
            courseName = schemas.StrSchema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            currencyCode = schemas.StrSchema
        
            @staticmethod
            def dynaFormSlimModel() -> typing.Type['DynaFormSlimModel']:
                return DynaFormSlimModel
            endDate = schemas.DateSchema
            externalSource = schemas.StrSchema
            externalTrainingId = schemas.Int32Schema
            guid = schemas.StrSchema
            hasCertificate = schemas.Int32Schema
            hours = schemas.Float64Schema
            institution = schemas.StrSchema
            institutionUrl = schemas.StrSchema
            isAssignedToCandidate = schemas.Int32Schema
            isAssignedToUser = schemas.Int32Schema
            isUserAssigned = schemas.BoolSchema
            isactive = schemas.Int32Schema
            parentTrainingId = schemas.Int32Schema
            price = schemas.Float64Schema
            rating = schemas.Float64Schema
            selfAssign = schemas.Int32Schema
            startDate = schemas.DateSchema
            state = schemas.StrSchema
            status = schemas.StrSchema
            studyCourse = schemas.StrSchema
            thumbnail = schemas.StrSchema
            trainingId = schemas.Int32Schema
            updateSkillLevel = schemas.Int32Schema
            url = schemas.StrSchema
            userAssigned = schemas.BoolSchema
            videoUrl = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "approvalStatus": approvalStatus,
                "assignedUsersCount": assignedUsersCount,
                "attachmentId": attachmentId,
                "chargeType": chargeType,
                "cid": cid,
                "city": city,
                "contentMandatory": contentMandatory,
                "contentURL": contentURL,
                "country": country,
                "courseName": courseName,
                "createts": createts,
                "currencyCode": currencyCode,
                "dynaFormSlimModel": dynaFormSlimModel,
                "endDate": endDate,
                "externalSource": externalSource,
                "externalTrainingId": externalTrainingId,
                "guid": guid,
                "hasCertificate": hasCertificate,
                "hours": hours,
                "institution": institution,
                "institutionUrl": institutionUrl,
                "isAssignedToCandidate": isAssignedToCandidate,
                "isAssignedToUser": isAssignedToUser,
                "isUserAssigned": isUserAssigned,
                "isactive": isactive,
                "parentTrainingId": parentTrainingId,
                "price": price,
                "rating": rating,
                "selfAssign": selfAssign,
                "startDate": startDate,
                "state": state,
                "status": status,
                "studyCourse": studyCourse,
                "thumbnail": thumbnail,
                "trainingId": trainingId,
                "updateSkillLevel": updateSkillLevel,
                "url": url,
                "userAssigned": userAssigned,
                "videoUrl": videoUrl,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalStatus"]) -> MetaOapg.properties.approvalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedUsersCount"]) -> MetaOapg.properties.assignedUsersCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachmentId"]) -> MetaOapg.properties.attachmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chargeType"]) -> MetaOapg.properties.chargeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentMandatory"]) -> MetaOapg.properties.contentMandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentURL"]) -> MetaOapg.properties.contentURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courseName"]) -> MetaOapg.properties.courseName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynaFormSlimModel"]) -> 'DynaFormSlimModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSource"]) -> MetaOapg.properties.externalSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalTrainingId"]) -> MetaOapg.properties.externalTrainingId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasCertificate"]) -> MetaOapg.properties.hasCertificate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> MetaOapg.properties.hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institution"]) -> MetaOapg.properties.institution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionUrl"]) -> MetaOapg.properties.institutionUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAssignedToCandidate"]) -> MetaOapg.properties.isAssignedToCandidate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAssignedToUser"]) -> MetaOapg.properties.isAssignedToUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isUserAssigned"]) -> MetaOapg.properties.isUserAssigned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isactive"]) -> MetaOapg.properties.isactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentTrainingId"]) -> MetaOapg.properties.parentTrainingId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rating"]) -> MetaOapg.properties.rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfAssign"]) -> MetaOapg.properties.selfAssign: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["studyCourse"]) -> MetaOapg.properties.studyCourse: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainingId"]) -> MetaOapg.properties.trainingId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateSkillLevel"]) -> MetaOapg.properties.updateSkillLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userAssigned"]) -> MetaOapg.properties.userAssigned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videoUrl"]) -> MetaOapg.properties.videoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "approvalStatus", "assignedUsersCount", "attachmentId", "chargeType", "cid", "city", "contentMandatory", "contentURL", "country", "courseName", "createts", "currencyCode", "dynaFormSlimModel", "endDate", "externalSource", "externalTrainingId", "guid", "hasCertificate", "hours", "institution", "institutionUrl", "isAssignedToCandidate", "isAssignedToUser", "isUserAssigned", "isactive", "parentTrainingId", "price", "rating", "selfAssign", "startDate", "state", "status", "studyCourse", "thumbnail", "trainingId", "updateSkillLevel", "url", "userAssigned", "videoUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalStatus"]) -> typing.Union[MetaOapg.properties.approvalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedUsersCount"]) -> typing.Union[MetaOapg.properties.assignedUsersCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachmentId"]) -> typing.Union[MetaOapg.properties.attachmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chargeType"]) -> typing.Union[MetaOapg.properties.chargeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentMandatory"]) -> typing.Union[MetaOapg.properties.contentMandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentURL"]) -> typing.Union[MetaOapg.properties.contentURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courseName"]) -> typing.Union[MetaOapg.properties.courseName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynaFormSlimModel"]) -> typing.Union['DynaFormSlimModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSource"]) -> typing.Union[MetaOapg.properties.externalSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalTrainingId"]) -> typing.Union[MetaOapg.properties.externalTrainingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasCertificate"]) -> typing.Union[MetaOapg.properties.hasCertificate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union[MetaOapg.properties.hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institution"]) -> typing.Union[MetaOapg.properties.institution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionUrl"]) -> typing.Union[MetaOapg.properties.institutionUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAssignedToCandidate"]) -> typing.Union[MetaOapg.properties.isAssignedToCandidate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAssignedToUser"]) -> typing.Union[MetaOapg.properties.isAssignedToUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isUserAssigned"]) -> typing.Union[MetaOapg.properties.isUserAssigned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isactive"]) -> typing.Union[MetaOapg.properties.isactive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentTrainingId"]) -> typing.Union[MetaOapg.properties.parentTrainingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rating"]) -> typing.Union[MetaOapg.properties.rating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfAssign"]) -> typing.Union[MetaOapg.properties.selfAssign, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["studyCourse"]) -> typing.Union[MetaOapg.properties.studyCourse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainingId"]) -> typing.Union[MetaOapg.properties.trainingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateSkillLevel"]) -> typing.Union[MetaOapg.properties.updateSkillLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userAssigned"]) -> typing.Union[MetaOapg.properties.userAssigned, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videoUrl"]) -> typing.Union[MetaOapg.properties.videoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "approvalStatus", "assignedUsersCount", "attachmentId", "chargeType", "cid", "city", "contentMandatory", "contentURL", "country", "courseName", "createts", "currencyCode", "dynaFormSlimModel", "endDate", "externalSource", "externalTrainingId", "guid", "hasCertificate", "hours", "institution", "institutionUrl", "isAssignedToCandidate", "isAssignedToUser", "isUserAssigned", "isactive", "parentTrainingId", "price", "rating", "selfAssign", "startDate", "state", "status", "studyCourse", "thumbnail", "trainingId", "updateSkillLevel", "url", "userAssigned", "videoUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        approvalStatus: typing.Union[MetaOapg.properties.approvalStatus, str, schemas.Unset] = schemas.unset,
        assignedUsersCount: typing.Union[MetaOapg.properties.assignedUsersCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attachmentId: typing.Union[MetaOapg.properties.attachmentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        chargeType: typing.Union[MetaOapg.properties.chargeType, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        contentMandatory: typing.Union[MetaOapg.properties.contentMandatory, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contentURL: typing.Union[MetaOapg.properties.contentURL, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        courseName: typing.Union[MetaOapg.properties.courseName, str, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        dynaFormSlimModel: typing.Union['DynaFormSlimModel', schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        externalSource: typing.Union[MetaOapg.properties.externalSource, str, schemas.Unset] = schemas.unset,
        externalTrainingId: typing.Union[MetaOapg.properties.externalTrainingId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
        hasCertificate: typing.Union[MetaOapg.properties.hasCertificate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hours: typing.Union[MetaOapg.properties.hours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        institution: typing.Union[MetaOapg.properties.institution, str, schemas.Unset] = schemas.unset,
        institutionUrl: typing.Union[MetaOapg.properties.institutionUrl, str, schemas.Unset] = schemas.unset,
        isAssignedToCandidate: typing.Union[MetaOapg.properties.isAssignedToCandidate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isAssignedToUser: typing.Union[MetaOapg.properties.isAssignedToUser, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isUserAssigned: typing.Union[MetaOapg.properties.isUserAssigned, bool, schemas.Unset] = schemas.unset,
        isactive: typing.Union[MetaOapg.properties.isactive, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parentTrainingId: typing.Union[MetaOapg.properties.parentTrainingId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rating: typing.Union[MetaOapg.properties.rating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        selfAssign: typing.Union[MetaOapg.properties.selfAssign, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        studyCourse: typing.Union[MetaOapg.properties.studyCourse, str, schemas.Unset] = schemas.unset,
        thumbnail: typing.Union[MetaOapg.properties.thumbnail, str, schemas.Unset] = schemas.unset,
        trainingId: typing.Union[MetaOapg.properties.trainingId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updateSkillLevel: typing.Union[MetaOapg.properties.updateSkillLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        userAssigned: typing.Union[MetaOapg.properties.userAssigned, bool, schemas.Unset] = schemas.unset,
        videoUrl: typing.Union[MetaOapg.properties.videoUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrainingModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            approvalStatus=approvalStatus,
            assignedUsersCount=assignedUsersCount,
            attachmentId=attachmentId,
            chargeType=chargeType,
            cid=cid,
            city=city,
            contentMandatory=contentMandatory,
            contentURL=contentURL,
            country=country,
            courseName=courseName,
            createts=createts,
            currencyCode=currencyCode,
            dynaFormSlimModel=dynaFormSlimModel,
            endDate=endDate,
            externalSource=externalSource,
            externalTrainingId=externalTrainingId,
            guid=guid,
            hasCertificate=hasCertificate,
            hours=hours,
            institution=institution,
            institutionUrl=institutionUrl,
            isAssignedToCandidate=isAssignedToCandidate,
            isAssignedToUser=isAssignedToUser,
            isUserAssigned=isUserAssigned,
            isactive=isactive,
            parentTrainingId=parentTrainingId,
            price=price,
            rating=rating,
            selfAssign=selfAssign,
            startDate=startDate,
            state=state,
            status=status,
            studyCourse=studyCourse,
            thumbnail=thumbnail,
            trainingId=trainingId,
            updateSkillLevel=updateSkillLevel,
            url=url,
            userAssigned=userAssigned,
            videoUrl=videoUrl,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.dyna_form_slim_model import DynaFormSlimModel
from clay_hr_python_sdk.model.timestamp import Timestamp

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class LeaveModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "date",
        }
        
        class properties:
            date = schemas.DateSchema
            description = schemas.StrSchema
        
            @staticmethod
            def createUserViewModel() -> typing.Type['UserViewModel']:
                return UserViewModel
            endDateMeridiem = schemas.StrSchema
            meridiem = schemas.StrSchema
            numberOfDays = schemas.Int32Schema
        
            @staticmethod
            def ptoPolicyModel() -> typing.Type['PtoPolicyModel']:
                return PtoPolicyModel
            totalLeaveDays = schemas.Float64Schema
            totalLeaveHours = schemas.Float64Schema
        
            @staticmethod
            def userModel() -> typing.Type['UserModel']:
                return UserModel
            __annotations__ = {
                "date": date,
                "description": description,
                "createUserViewModel": createUserViewModel,
                "endDateMeridiem": endDateMeridiem,
                "meridiem": meridiem,
                "numberOfDays": numberOfDays,
                "ptoPolicyModel": ptoPolicyModel,
                "totalLeaveDays": totalLeaveDays,
                "totalLeaveHours": totalLeaveHours,
                "userModel": userModel,
            }
    
    date: MetaOapg.properties.date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserViewModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDateMeridiem"]) -> MetaOapg.properties.endDateMeridiem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meridiem"]) -> MetaOapg.properties.meridiem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfDays"]) -> MetaOapg.properties.numberOfDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ptoPolicyModel"]) -> 'PtoPolicyModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalLeaveDays"]) -> MetaOapg.properties.totalLeaveDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalLeaveHours"]) -> MetaOapg.properties.totalLeaveHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "description", "createUserViewModel", "endDateMeridiem", "meridiem", "numberOfDays", "ptoPolicyModel", "totalLeaveDays", "totalLeaveHours", "userModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserViewModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDateMeridiem"]) -> typing.Union[MetaOapg.properties.endDateMeridiem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meridiem"]) -> typing.Union[MetaOapg.properties.meridiem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfDays"]) -> typing.Union[MetaOapg.properties.numberOfDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ptoPolicyModel"]) -> typing.Union['PtoPolicyModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalLeaveDays"]) -> typing.Union[MetaOapg.properties.totalLeaveDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalLeaveHours"]) -> typing.Union[MetaOapg.properties.totalLeaveHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "description", "createUserViewModel", "endDateMeridiem", "meridiem", "numberOfDays", "ptoPolicyModel", "totalLeaveDays", "totalLeaveHours", "userModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, str, date, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        createUserViewModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        endDateMeridiem: typing.Union[MetaOapg.properties.endDateMeridiem, str, schemas.Unset] = schemas.unset,
        meridiem: typing.Union[MetaOapg.properties.meridiem, str, schemas.Unset] = schemas.unset,
        numberOfDays: typing.Union[MetaOapg.properties.numberOfDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ptoPolicyModel: typing.Union['PtoPolicyModel', schemas.Unset] = schemas.unset,
        totalLeaveDays: typing.Union[MetaOapg.properties.totalLeaveDays, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalLeaveHours: typing.Union[MetaOapg.properties.totalLeaveHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        userModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LeaveModel':
        return super().__new__(
            cls,
            *args,
            date=date,
            description=description,
            createUserViewModel=createUserViewModel,
            endDateMeridiem=endDateMeridiem,
            meridiem=meridiem,
            numberOfDays=numberOfDays,
            ptoPolicyModel=ptoPolicyModel,
            totalLeaveDays=totalLeaveDays,
            totalLeaveHours=totalLeaveHours,
            userModel=userModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.pto_policy_model import PtoPolicyModel
from clay_hr_python_sdk.model.user_model import UserModel
from clay_hr_python_sdk.model.user_view_model import UserViewModel

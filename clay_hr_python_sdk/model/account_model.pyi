# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class AccountModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def accountCreateUserModel() -> typing.Type['UserViewModel']:
                return UserViewModel
            accountDescription = schemas.StrSchema
            accountId = schemas.Int32Schema
            accountName = schemas.StrSchema
        
            @staticmethod
            def accountOwnerModel() -> typing.Type['ContactModel']:
                return ContactModel
            cid = schemas.Int32Schema
            id = schemas.Int32Schema
            __annotations__ = {
                "accountCreateUserModel": accountCreateUserModel,
                "accountDescription": accountDescription,
                "accountId": accountId,
                "accountName": accountName,
                "accountOwnerModel": accountOwnerModel,
                "cid": cid,
                "id": id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountCreateUserModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountDescription"]) -> MetaOapg.properties.accountDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountOwnerModel"]) -> 'ContactModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountCreateUserModel", "accountDescription", "accountId", "accountName", "accountOwnerModel", "cid", "id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountCreateUserModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountDescription"]) -> typing.Union[MetaOapg.properties.accountDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> typing.Union[MetaOapg.properties.accountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountName"]) -> typing.Union[MetaOapg.properties.accountName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountOwnerModel"]) -> typing.Union['ContactModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountCreateUserModel", "accountDescription", "accountId", "accountName", "accountOwnerModel", "cid", "id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountCreateUserModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        accountDescription: typing.Union[MetaOapg.properties.accountDescription, str, schemas.Unset] = schemas.unset,
        accountId: typing.Union[MetaOapg.properties.accountId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accountName: typing.Union[MetaOapg.properties.accountName, str, schemas.Unset] = schemas.unset,
        accountOwnerModel: typing.Union['ContactModel', schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountModel':
        return super().__new__(
            cls,
            *args,
            accountCreateUserModel=accountCreateUserModel,
            accountDescription=accountDescription,
            accountId=accountId,
            accountName=accountName,
            accountOwnerModel=accountOwnerModel,
            cid=cid,
            id=id,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.contact_model import ContactModel
from clay_hr_python_sdk.model.user_view_model import UserViewModel

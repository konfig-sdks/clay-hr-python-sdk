# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CustomTableColumnModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            cid = schemas.Int32Schema
            columnCode = schemas.StrSchema
            columnHeader = schemas.StrSchema
            columnType = schemas.StrSchema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            ctColumnId = schemas.Int32Schema
        
            @staticmethod
            def customFieldStyleModel() -> typing.Type['CustomFieldStyleModel']:
                return CustomFieldStyleModel
            customTableId = schemas.Int32Schema
            fieldType = schemas.StrSchema
            helpText = schemas.StrSchema
            mandatory = schemas.Int32Schema
            masked = schemas.Int32Schema
            optionValues = schemas.StrSchema
            sequence = schemas.Int32Schema
            style = schemas.StrSchema
            __annotations__ = {
                "cid": cid,
                "columnCode": columnCode,
                "columnHeader": columnHeader,
                "columnType": columnType,
                "createts": createts,
                "ctColumnId": ctColumnId,
                "customFieldStyleModel": customFieldStyleModel,
                "customTableId": customTableId,
                "fieldType": fieldType,
                "helpText": helpText,
                "mandatory": mandatory,
                "masked": masked,
                "optionValues": optionValues,
                "sequence": sequence,
                "style": style,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnCode"]) -> MetaOapg.properties.columnCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnHeader"]) -> MetaOapg.properties.columnHeader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["columnType"]) -> MetaOapg.properties.columnType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctColumnId"]) -> MetaOapg.properties.ctColumnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldStyleModel"]) -> 'CustomFieldStyleModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customTableId"]) -> MetaOapg.properties.customTableId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldType"]) -> MetaOapg.properties.fieldType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["helpText"]) -> MetaOapg.properties.helpText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatory"]) -> MetaOapg.properties.mandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masked"]) -> MetaOapg.properties.masked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionValues"]) -> MetaOapg.properties.optionValues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence"]) -> MetaOapg.properties.sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["style"]) -> MetaOapg.properties.style: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cid", "columnCode", "columnHeader", "columnType", "createts", "ctColumnId", "customFieldStyleModel", "customTableId", "fieldType", "helpText", "mandatory", "masked", "optionValues", "sequence", "style", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnCode"]) -> typing.Union[MetaOapg.properties.columnCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnHeader"]) -> typing.Union[MetaOapg.properties.columnHeader, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["columnType"]) -> typing.Union[MetaOapg.properties.columnType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctColumnId"]) -> typing.Union[MetaOapg.properties.ctColumnId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldStyleModel"]) -> typing.Union['CustomFieldStyleModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customTableId"]) -> typing.Union[MetaOapg.properties.customTableId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldType"]) -> typing.Union[MetaOapg.properties.fieldType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["helpText"]) -> typing.Union[MetaOapg.properties.helpText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatory"]) -> typing.Union[MetaOapg.properties.mandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masked"]) -> typing.Union[MetaOapg.properties.masked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionValues"]) -> typing.Union[MetaOapg.properties.optionValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence"]) -> typing.Union[MetaOapg.properties.sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["style"]) -> typing.Union[MetaOapg.properties.style, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cid", "columnCode", "columnHeader", "columnType", "createts", "ctColumnId", "customFieldStyleModel", "customTableId", "fieldType", "helpText", "mandatory", "masked", "optionValues", "sequence", "style", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        columnCode: typing.Union[MetaOapg.properties.columnCode, str, schemas.Unset] = schemas.unset,
        columnHeader: typing.Union[MetaOapg.properties.columnHeader, str, schemas.Unset] = schemas.unset,
        columnType: typing.Union[MetaOapg.properties.columnType, str, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        ctColumnId: typing.Union[MetaOapg.properties.ctColumnId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customFieldStyleModel: typing.Union['CustomFieldStyleModel', schemas.Unset] = schemas.unset,
        customTableId: typing.Union[MetaOapg.properties.customTableId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fieldType: typing.Union[MetaOapg.properties.fieldType, str, schemas.Unset] = schemas.unset,
        helpText: typing.Union[MetaOapg.properties.helpText, str, schemas.Unset] = schemas.unset,
        mandatory: typing.Union[MetaOapg.properties.mandatory, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        masked: typing.Union[MetaOapg.properties.masked, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        optionValues: typing.Union[MetaOapg.properties.optionValues, str, schemas.Unset] = schemas.unset,
        sequence: typing.Union[MetaOapg.properties.sequence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        style: typing.Union[MetaOapg.properties.style, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomTableColumnModel':
        return super().__new__(
            cls,
            *args,
            cid=cid,
            columnCode=columnCode,
            columnHeader=columnHeader,
            columnType=columnType,
            createts=createts,
            ctColumnId=ctColumnId,
            customFieldStyleModel=customFieldStyleModel,
            customTableId=customTableId,
            fieldType=fieldType,
            helpText=helpText,
            mandatory=mandatory,
            masked=masked,
            optionValues=optionValues,
            sequence=sequence,
            style=style,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.custom_field_style_model import CustomFieldStyleModel
from clay_hr_python_sdk.model.timestamp import Timestamp

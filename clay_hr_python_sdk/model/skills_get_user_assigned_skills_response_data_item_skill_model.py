# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class SkillsGetUserAssignedSkillsResponseDataItemSkillModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            skillId = schemas.StrSchema
            skillCode = schemas.StrSchema
            cid = schemas.StrSchema
            skillTypeModel = schemas.StrSchema
        
            @staticmethod
            def assessmentModel() -> typing.Type['SkillsGetUserAssignedSkillsResponseDataItemSkillModelAssessmentModel']:
                return SkillsGetUserAssignedSkillsResponseDataItemSkillModelAssessmentModel
            sequence = schemas.StrSchema
            skillTypeName = schemas.StrSchema
            userSkillLevel = schemas.StrSchema
            status = schemas.StrSchema
            createUserId = schemas.StrSchema
            createts = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "skillId": skillId,
                "skillCode": skillCode,
                "cid": cid,
                "skillTypeModel": skillTypeModel,
                "assessmentModel": assessmentModel,
                "sequence": sequence,
                "skillTypeName": skillTypeName,
                "userSkillLevel": userSkillLevel,
                "status": status,
                "createUserId": createUserId,
                "createts": createts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillId"]) -> MetaOapg.properties.skillId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillCode"]) -> MetaOapg.properties.skillCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeModel"]) -> MetaOapg.properties.skillTypeModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assessmentModel"]) -> 'SkillsGetUserAssignedSkillsResponseDataItemSkillModelAssessmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence"]) -> MetaOapg.properties.sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeName"]) -> MetaOapg.properties.skillTypeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userSkillLevel"]) -> MetaOapg.properties.userSkillLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "skillId", "skillCode", "cid", "skillTypeModel", "assessmentModel", "sequence", "skillTypeName", "userSkillLevel", "status", "createUserId", "createts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillId"]) -> typing.Union[MetaOapg.properties.skillId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillCode"]) -> typing.Union[MetaOapg.properties.skillCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeModel"]) -> typing.Union[MetaOapg.properties.skillTypeModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assessmentModel"]) -> typing.Union['SkillsGetUserAssignedSkillsResponseDataItemSkillModelAssessmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence"]) -> typing.Union[MetaOapg.properties.sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeName"]) -> typing.Union[MetaOapg.properties.skillTypeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userSkillLevel"]) -> typing.Union[MetaOapg.properties.userSkillLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "skillId", "skillCode", "cid", "skillTypeModel", "assessmentModel", "sequence", "skillTypeName", "userSkillLevel", "status", "createUserId", "createts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        skillId: typing.Union[MetaOapg.properties.skillId, str, schemas.Unset] = schemas.unset,
        skillCode: typing.Union[MetaOapg.properties.skillCode, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        skillTypeModel: typing.Union[MetaOapg.properties.skillTypeModel, str, schemas.Unset] = schemas.unset,
        assessmentModel: typing.Union['SkillsGetUserAssignedSkillsResponseDataItemSkillModelAssessmentModel', schemas.Unset] = schemas.unset,
        sequence: typing.Union[MetaOapg.properties.sequence, str, schemas.Unset] = schemas.unset,
        skillTypeName: typing.Union[MetaOapg.properties.skillTypeName, str, schemas.Unset] = schemas.unset,
        userSkillLevel: typing.Union[MetaOapg.properties.userSkillLevel, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SkillsGetUserAssignedSkillsResponseDataItemSkillModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            skillId=skillId,
            skillCode=skillCode,
            cid=cid,
            skillTypeModel=skillTypeModel,
            assessmentModel=assessmentModel,
            sequence=sequence,
            skillTypeName=skillTypeName,
            userSkillLevel=userSkillLevel,
            status=status,
            createUserId=createUserId,
            createts=createts,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.skills_get_user_assigned_skills_response_data_item_skill_model_assessment_model import SkillsGetUserAssignedSkillsResponseDataItemSkillModelAssessmentModel

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class Timestamp(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            date = schemas.Int32Schema
            hours = schemas.Int32Schema
            minutes = schemas.Int32Schema
            month = schemas.Int32Schema
            nanos = schemas.Int32Schema
            seconds = schemas.Int32Schema
            time = schemas.Int64Schema
            year = schemas.Int32Schema
            day = schemas.Int32Schema
            timezoneOffset = schemas.Int32Schema
            __annotations__ = {
                "date": date,
                "hours": hours,
                "minutes": minutes,
                "month": month,
                "nanos": nanos,
                "seconds": seconds,
                "time": time,
                "year": year,
                "day": day,
                "timezoneOffset": timezoneOffset,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> MetaOapg.properties.hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minutes"]) -> MetaOapg.properties.minutes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nanos"]) -> MetaOapg.properties.nanos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seconds"]) -> MetaOapg.properties.seconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day"]) -> MetaOapg.properties.day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezoneOffset"]) -> MetaOapg.properties.timezoneOffset: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date", "hours", "minutes", "month", "nanos", "seconds", "time", "year", "day", "timezoneOffset", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union[MetaOapg.properties.hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minutes"]) -> typing.Union[MetaOapg.properties.minutes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> typing.Union[MetaOapg.properties.month, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nanos"]) -> typing.Union[MetaOapg.properties.nanos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seconds"]) -> typing.Union[MetaOapg.properties.seconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union[MetaOapg.properties.year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day"]) -> typing.Union[MetaOapg.properties.day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezoneOffset"]) -> typing.Union[MetaOapg.properties.timezoneOffset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date", "hours", "minutes", "month", "nanos", "seconds", "time", "year", "day", "timezoneOffset", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date: typing.Union[MetaOapg.properties.date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hours: typing.Union[MetaOapg.properties.hours, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minutes: typing.Union[MetaOapg.properties.minutes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        month: typing.Union[MetaOapg.properties.month, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nanos: typing.Union[MetaOapg.properties.nanos, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        seconds: typing.Union[MetaOapg.properties.seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        day: typing.Union[MetaOapg.properties.day, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timezoneOffset: typing.Union[MetaOapg.properties.timezoneOffset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Timestamp':
        return super().__new__(
            cls,
            *args,
            date=date,
            hours=hours,
            minutes=minutes,
            month=month,
            nanos=nanos,
            seconds=seconds,
            time=time,
            year=year,
            day=day,
            timezoneOffset=timezoneOffset,
            _configuration=_configuration,
            **kwargs,
        )

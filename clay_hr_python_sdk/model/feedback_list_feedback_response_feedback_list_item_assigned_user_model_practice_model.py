# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class FeedbackListFeedbackResponseFeedbackListItemAssignedUserModelPracticeModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            practiceId = schemas.StrSchema
            name = schemas.StrSchema
            practiceHead = schemas.StrSchema
            userModel = schemas.StrSchema
            createts = schemas.StrSchema
            cid = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "practiceId": practiceId,
                "name": name,
                "practiceHead": practiceHead,
                "userModel": userModel,
                "createts": createts,
                "cid": cid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["practiceId"]) -> MetaOapg.properties.practiceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["practiceHead"]) -> MetaOapg.properties.practiceHead: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userModel"]) -> MetaOapg.properties.userModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "practiceId", "name", "practiceHead", "userModel", "createts", "cid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["practiceId"]) -> typing.Union[MetaOapg.properties.practiceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["practiceHead"]) -> typing.Union[MetaOapg.properties.practiceHead, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userModel"]) -> typing.Union[MetaOapg.properties.userModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "practiceId", "name", "practiceHead", "userModel", "createts", "cid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        practiceId: typing.Union[MetaOapg.properties.practiceId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        practiceHead: typing.Union[MetaOapg.properties.practiceHead, str, schemas.Unset] = schemas.unset,
        userModel: typing.Union[MetaOapg.properties.userModel, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FeedbackListFeedbackResponseFeedbackListItemAssignedUserModelPracticeModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            practiceId=practiceId,
            name=name,
            practiceHead=practiceHead,
            userModel=userModel,
            createts=createts,
            cid=cid,
            _configuration=_configuration,
            **kwargs,
        )

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class WorkflowParameterAssignmentModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            cid = schemas.Int32Schema
            paramName = schemas.StrSchema
            paramValue = schemas.StrSchema
        
            @staticmethod
            def parameterModel() -> typing.Type['WorkflowParameterModel']:
                return WorkflowParameterModel
            userWorkflowid = schemas.Int32Schema
            waParamId = schemas.Int32Schema
            workflowArgId = schemas.Int32Schema
            __annotations__ = {
                "cid": cid,
                "paramName": paramName,
                "paramValue": paramValue,
                "parameterModel": parameterModel,
                "userWorkflowid": userWorkflowid,
                "waParamId": waParamId,
                "workflowArgId": workflowArgId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paramName"]) -> MetaOapg.properties.paramName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paramValue"]) -> MetaOapg.properties.paramValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameterModel"]) -> 'WorkflowParameterModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userWorkflowid"]) -> MetaOapg.properties.userWorkflowid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waParamId"]) -> MetaOapg.properties.waParamId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowArgId"]) -> MetaOapg.properties.workflowArgId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cid", "paramName", "paramValue", "parameterModel", "userWorkflowid", "waParamId", "workflowArgId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paramName"]) -> typing.Union[MetaOapg.properties.paramName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paramValue"]) -> typing.Union[MetaOapg.properties.paramValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameterModel"]) -> typing.Union['WorkflowParameterModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userWorkflowid"]) -> typing.Union[MetaOapg.properties.userWorkflowid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waParamId"]) -> typing.Union[MetaOapg.properties.waParamId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowArgId"]) -> typing.Union[MetaOapg.properties.workflowArgId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cid", "paramName", "paramValue", "parameterModel", "userWorkflowid", "waParamId", "workflowArgId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        paramName: typing.Union[MetaOapg.properties.paramName, str, schemas.Unset] = schemas.unset,
        paramValue: typing.Union[MetaOapg.properties.paramValue, str, schemas.Unset] = schemas.unset,
        parameterModel: typing.Union['WorkflowParameterModel', schemas.Unset] = schemas.unset,
        userWorkflowid: typing.Union[MetaOapg.properties.userWorkflowid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        waParamId: typing.Union[MetaOapg.properties.waParamId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        workflowArgId: typing.Union[MetaOapg.properties.workflowArgId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowParameterAssignmentModel':
        return super().__new__(
            cls,
            *args,
            cid=cid,
            paramName=paramName,
            paramValue=paramValue,
            parameterModel=parameterModel,
            userWorkflowid=userWorkflowid,
            waParamId=waParamId,
            workflowArgId=workflowArgId,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.workflow_parameter_model import WorkflowParameterModel

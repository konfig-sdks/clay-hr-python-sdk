# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class PositionStatusModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            cid = schemas.Int32Schema
            defaultStatus = schemas.BoolSchema
            internalStatus = schemas.StrSchema
            statusId = schemas.Int32Schema
            statusName = schemas.StrSchema
            __annotations__ = {
                "cid": cid,
                "defaultStatus": defaultStatus,
                "internalStatus": internalStatus,
                "statusId": statusId,
                "statusName": statusName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultStatus"]) -> MetaOapg.properties.defaultStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalStatus"]) -> MetaOapg.properties.internalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusId"]) -> MetaOapg.properties.statusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusName"]) -> MetaOapg.properties.statusName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cid", "defaultStatus", "internalStatus", "statusId", "statusName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultStatus"]) -> typing.Union[MetaOapg.properties.defaultStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalStatus"]) -> typing.Union[MetaOapg.properties.internalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusId"]) -> typing.Union[MetaOapg.properties.statusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusName"]) -> typing.Union[MetaOapg.properties.statusName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cid", "defaultStatus", "internalStatus", "statusId", "statusName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        defaultStatus: typing.Union[MetaOapg.properties.defaultStatus, bool, schemas.Unset] = schemas.unset,
        internalStatus: typing.Union[MetaOapg.properties.internalStatus, str, schemas.Unset] = schemas.unset,
        statusId: typing.Union[MetaOapg.properties.statusId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        statusName: typing.Union[MetaOapg.properties.statusName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PositionStatusModel':
        return super().__new__(
            cls,
            *args,
            cid=cid,
            defaultStatus=defaultStatus,
            internalStatus=internalStatus,
            statusId=statusId,
            statusName=statusName,
            _configuration=_configuration,
            **kwargs,
        )

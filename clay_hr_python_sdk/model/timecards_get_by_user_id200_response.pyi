# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class TimecardsGetByUserId200Response(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            createUserID = schemas.StrSchema
            startDateTime = schemas.StrSchema
            cardId = schemas.StrSchema
            createts = schemas.StrSchema
            id = schemas.StrSchema
            endDateTime = schemas.StrSchema
            projectId = schemas.StrSchema
            elapsedTime = schemas.StrSchema
            cid = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "createUserID": createUserID,
                "startDateTime": startDateTime,
                "cardId": cardId,
                "createts": createts,
                "id": id,
                "endDateTime": endDateTime,
                "projectId": projectId,
                "elapsedTime": elapsedTime,
                "cid": cid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserID"]) -> MetaOapg.properties.createUserID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDateTime"]) -> MetaOapg.properties.startDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardId"]) -> MetaOapg.properties.cardId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDateTime"]) -> MetaOapg.properties.endDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elapsedTime"]) -> MetaOapg.properties.elapsedTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "createUserID", "startDateTime", "cardId", "createts", "id", "endDateTime", "projectId", "elapsedTime", "cid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserID"]) -> typing.Union[MetaOapg.properties.createUserID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDateTime"]) -> typing.Union[MetaOapg.properties.startDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardId"]) -> typing.Union[MetaOapg.properties.cardId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDateTime"]) -> typing.Union[MetaOapg.properties.endDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elapsedTime"]) -> typing.Union[MetaOapg.properties.elapsedTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "createUserID", "startDateTime", "cardId", "createts", "id", "endDateTime", "projectId", "elapsedTime", "cid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        createUserID: typing.Union[MetaOapg.properties.createUserID, str, schemas.Unset] = schemas.unset,
        startDateTime: typing.Union[MetaOapg.properties.startDateTime, str, schemas.Unset] = schemas.unset,
        cardId: typing.Union[MetaOapg.properties.cardId, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        endDateTime: typing.Union[MetaOapg.properties.endDateTime, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, str, schemas.Unset] = schemas.unset,
        elapsedTime: typing.Union[MetaOapg.properties.elapsedTime, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimecardsGetByUserId200Response':
        return super().__new__(
            cls,
            *args,
            description=description,
            createUserID=createUserID,
            startDateTime=startDateTime,
            cardId=cardId,
            createts=createts,
            id=id,
            endDateTime=endDateTime,
            projectId=projectId,
            elapsedTime=elapsedTime,
            cid=cid,
            _configuration=_configuration,
            **kwargs,
        )

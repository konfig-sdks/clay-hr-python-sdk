# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class StateCountryModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            countryId = schemas.Int32Schema
            stateCode = schemas.StrSchema
            stateId = schemas.Int32Schema
            stateName = schemas.StrSchema
            __annotations__ = {
                "countryId": countryId,
                "stateCode": stateCode,
                "stateId": stateId,
                "stateName": stateName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryId"]) -> MetaOapg.properties.countryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateCode"]) -> MetaOapg.properties.stateCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateId"]) -> MetaOapg.properties.stateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateName"]) -> MetaOapg.properties.stateName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["countryId", "stateCode", "stateId", "stateName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryId"]) -> typing.Union[MetaOapg.properties.countryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateCode"]) -> typing.Union[MetaOapg.properties.stateCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateId"]) -> typing.Union[MetaOapg.properties.stateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateName"]) -> typing.Union[MetaOapg.properties.stateName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["countryId", "stateCode", "stateId", "stateName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        countryId: typing.Union[MetaOapg.properties.countryId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stateCode: typing.Union[MetaOapg.properties.stateCode, str, schemas.Unset] = schemas.unset,
        stateId: typing.Union[MetaOapg.properties.stateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stateName: typing.Union[MetaOapg.properties.stateName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StateCountryModel':
        return super().__new__(
            cls,
            *args,
            countryId=countryId,
            stateCode=stateCode,
            stateId=stateId,
            stateName=stateName,
            _configuration=_configuration,
            **kwargs,
        )

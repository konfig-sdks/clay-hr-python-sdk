# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CustomFieldsGetCustomFieldsResponseDataItemCustomFieldValueModelListItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            customFieldValueId = schemas.StrSchema
            customFieldId = schemas.StrSchema
            customFieldValue = schemas.StrSchema
            customFieldObjectId = schemas.StrSchema
            cid = schemas.StrSchema
            createUserId = schemas.StrSchema
            customfieldName = schemas.StrSchema
            __annotations__ = {
                "customFieldValueId": customFieldValueId,
                "customFieldId": customFieldId,
                "customFieldValue": customFieldValue,
                "customFieldObjectId": customFieldObjectId,
                "cid": cid,
                "createUserId": createUserId,
                "customfieldName": customfieldName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldValueId"]) -> MetaOapg.properties.customFieldValueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldId"]) -> MetaOapg.properties.customFieldId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldValue"]) -> MetaOapg.properties.customFieldValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldObjectId"]) -> MetaOapg.properties.customFieldObjectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customfieldName"]) -> MetaOapg.properties.customfieldName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customFieldValueId", "customFieldId", "customFieldValue", "customFieldObjectId", "cid", "createUserId", "customfieldName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldValueId"]) -> typing.Union[MetaOapg.properties.customFieldValueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldId"]) -> typing.Union[MetaOapg.properties.customFieldId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldValue"]) -> typing.Union[MetaOapg.properties.customFieldValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldObjectId"]) -> typing.Union[MetaOapg.properties.customFieldObjectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customfieldName"]) -> typing.Union[MetaOapg.properties.customfieldName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customFieldValueId", "customFieldId", "customFieldValue", "customFieldObjectId", "cid", "createUserId", "customfieldName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        customFieldValueId: typing.Union[MetaOapg.properties.customFieldValueId, str, schemas.Unset] = schemas.unset,
        customFieldId: typing.Union[MetaOapg.properties.customFieldId, str, schemas.Unset] = schemas.unset,
        customFieldValue: typing.Union[MetaOapg.properties.customFieldValue, str, schemas.Unset] = schemas.unset,
        customFieldObjectId: typing.Union[MetaOapg.properties.customFieldObjectId, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, str, schemas.Unset] = schemas.unset,
        customfieldName: typing.Union[MetaOapg.properties.customfieldName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldsGetCustomFieldsResponseDataItemCustomFieldValueModelListItem':
        return super().__new__(
            cls,
            *args,
            customFieldValueId=customFieldValueId,
            customFieldId=customFieldId,
            customFieldValue=customFieldValue,
            customFieldObjectId=customFieldObjectId,
            cid=cid,
            createUserId=createUserId,
            customfieldName=customfieldName,
            _configuration=_configuration,
            **kwargs,
        )

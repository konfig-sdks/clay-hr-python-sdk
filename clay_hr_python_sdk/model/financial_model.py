# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class FinancialModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            AmountType = schemas.StrSchema
            amountChange = schemas.Float64Schema
            amountType = schemas.StrSchema
            cid = schemas.Int32Schema
            compensationType = schemas.StrSchema
            createUserId = schemas.Int32Schema
            currencyCode = schemas.StrSchema
            
            
            class customFieldModelList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFieldModel']:
                        return CustomFieldModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CustomFieldModel'], typing.List['CustomFieldModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customFieldModelList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFieldModel':
                    return super().__getitem__(i)
            effectivedate = schemas.DateSchema
            enddate = schemas.DateSchema
            financialId = schemas.Int32Schema
            financialType = schemas.StrSchema
            fincode = schemas.StrSchema
            guid = schemas.StrSchema
            notes = schemas.StrSchema
            period = schemas.StrSchema
            projectId = schemas.Int32Schema
            status = schemas.StrSchema
            userId = schemas.Int32Schema
            value = schemas.Float64Schema
            __annotations__ = {
                "AmountType": AmountType,
                "amountChange": amountChange,
                "amountType": amountType,
                "cid": cid,
                "compensationType": compensationType,
                "createUserId": createUserId,
                "currencyCode": currencyCode,
                "customFieldModelList": customFieldModelList,
                "effectivedate": effectivedate,
                "enddate": enddate,
                "financialId": financialId,
                "financialType": financialType,
                "fincode": fincode,
                "guid": guid,
                "notes": notes,
                "period": period,
                "projectId": projectId,
                "status": status,
                "userId": userId,
                "value": value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AmountType"]) -> MetaOapg.properties.AmountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountChange"]) -> MetaOapg.properties.amountChange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountType"]) -> MetaOapg.properties.amountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compensationType"]) -> MetaOapg.properties.compensationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldModelList"]) -> MetaOapg.properties.customFieldModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectivedate"]) -> MetaOapg.properties.effectivedate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enddate"]) -> MetaOapg.properties.enddate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["financialId"]) -> MetaOapg.properties.financialId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["financialType"]) -> MetaOapg.properties.financialType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fincode"]) -> MetaOapg.properties.fincode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["guid"]) -> MetaOapg.properties.guid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AmountType", "amountChange", "amountType", "cid", "compensationType", "createUserId", "currencyCode", "customFieldModelList", "effectivedate", "enddate", "financialId", "financialType", "fincode", "guid", "notes", "period", "projectId", "status", "userId", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AmountType"]) -> typing.Union[MetaOapg.properties.AmountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountChange"]) -> typing.Union[MetaOapg.properties.amountChange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountType"]) -> typing.Union[MetaOapg.properties.amountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compensationType"]) -> typing.Union[MetaOapg.properties.compensationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldModelList"]) -> typing.Union[MetaOapg.properties.customFieldModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectivedate"]) -> typing.Union[MetaOapg.properties.effectivedate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enddate"]) -> typing.Union[MetaOapg.properties.enddate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["financialId"]) -> typing.Union[MetaOapg.properties.financialId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["financialType"]) -> typing.Union[MetaOapg.properties.financialType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fincode"]) -> typing.Union[MetaOapg.properties.fincode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["guid"]) -> typing.Union[MetaOapg.properties.guid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> typing.Union[MetaOapg.properties.period, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AmountType", "amountChange", "amountType", "cid", "compensationType", "createUserId", "currencyCode", "customFieldModelList", "effectivedate", "enddate", "financialId", "financialType", "fincode", "guid", "notes", "period", "projectId", "status", "userId", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        AmountType: typing.Union[MetaOapg.properties.AmountType, str, schemas.Unset] = schemas.unset,
        amountChange: typing.Union[MetaOapg.properties.amountChange, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountType: typing.Union[MetaOapg.properties.amountType, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        compensationType: typing.Union[MetaOapg.properties.compensationType, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        customFieldModelList: typing.Union[MetaOapg.properties.customFieldModelList, list, tuple, schemas.Unset] = schemas.unset,
        effectivedate: typing.Union[MetaOapg.properties.effectivedate, str, date, schemas.Unset] = schemas.unset,
        enddate: typing.Union[MetaOapg.properties.enddate, str, date, schemas.Unset] = schemas.unset,
        financialId: typing.Union[MetaOapg.properties.financialId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        financialType: typing.Union[MetaOapg.properties.financialType, str, schemas.Unset] = schemas.unset,
        fincode: typing.Union[MetaOapg.properties.fincode, str, schemas.Unset] = schemas.unset,
        guid: typing.Union[MetaOapg.properties.guid, str, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, str, schemas.Unset] = schemas.unset,
        period: typing.Union[MetaOapg.properties.period, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FinancialModel':
        return super().__new__(
            cls,
            *args,
            AmountType=AmountType,
            amountChange=amountChange,
            amountType=amountType,
            cid=cid,
            compensationType=compensationType,
            createUserId=createUserId,
            currencyCode=currencyCode,
            customFieldModelList=customFieldModelList,
            effectivedate=effectivedate,
            enddate=enddate,
            financialId=financialId,
            financialType=financialType,
            fincode=fincode,
            guid=guid,
            notes=notes,
            period=period,
            projectId=projectId,
            status=status,
            userId=userId,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.custom_field_model import CustomFieldModel

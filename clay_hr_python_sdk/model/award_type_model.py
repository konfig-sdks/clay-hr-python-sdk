# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class AwardTypeModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            amount = schemas.Float64Schema
            amountType = schemas.StrSchema
            awardTypeId = schemas.Int64Schema
            budget = schemas.Float64Schema
            cid = schemas.Int32Schema
            code = schemas.StrSchema
            createUserId = schemas.Int32Schema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            currencyCode = schemas.StrSchema
        
            @staticmethod
            def currencyModel() -> typing.Type['CurrencyModel']:
                return CurrencyModel
        
            @staticmethod
            def departmentModel() -> typing.Type['DepartmentModel']:
                return DepartmentModel
        
            @staticmethod
            def locationModel() -> typing.Type['LocationModel']:
                return LocationModel
        
            @staticmethod
            def managerUserViewModel() -> typing.Type['UserViewModel']:
                return UserViewModel
            __annotations__ = {
                "description": description,
                "amount": amount,
                "amountType": amountType,
                "awardTypeId": awardTypeId,
                "budget": budget,
                "cid": cid,
                "code": code,
                "createUserId": createUserId,
                "createts": createts,
                "currencyCode": currencyCode,
                "currencyModel": currencyModel,
                "departmentModel": departmentModel,
                "locationModel": locationModel,
                "managerUserViewModel": managerUserViewModel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountType"]) -> MetaOapg.properties.amountType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awardTypeId"]) -> MetaOapg.properties.awardTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["budget"]) -> MetaOapg.properties.budget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyCode"]) -> MetaOapg.properties.currencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyModel"]) -> 'CurrencyModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentModel"]) -> 'DepartmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationModel"]) -> 'LocationModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managerUserViewModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "amount", "amountType", "awardTypeId", "budget", "cid", "code", "createUserId", "createts", "currencyCode", "currencyModel", "departmentModel", "locationModel", "managerUserViewModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountType"]) -> typing.Union[MetaOapg.properties.amountType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awardTypeId"]) -> typing.Union[MetaOapg.properties.awardTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["budget"]) -> typing.Union[MetaOapg.properties.budget, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyCode"]) -> typing.Union[MetaOapg.properties.currencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyModel"]) -> typing.Union['CurrencyModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentModel"]) -> typing.Union['DepartmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationModel"]) -> typing.Union['LocationModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managerUserViewModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "amount", "amountType", "awardTypeId", "budget", "cid", "code", "createUserId", "createts", "currencyCode", "currencyModel", "departmentModel", "locationModel", "managerUserViewModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountType: typing.Union[MetaOapg.properties.amountType, str, schemas.Unset] = schemas.unset,
        awardTypeId: typing.Union[MetaOapg.properties.awardTypeId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        budget: typing.Union[MetaOapg.properties.budget, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        currencyCode: typing.Union[MetaOapg.properties.currencyCode, str, schemas.Unset] = schemas.unset,
        currencyModel: typing.Union['CurrencyModel', schemas.Unset] = schemas.unset,
        departmentModel: typing.Union['DepartmentModel', schemas.Unset] = schemas.unset,
        locationModel: typing.Union['LocationModel', schemas.Unset] = schemas.unset,
        managerUserViewModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AwardTypeModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            amount=amount,
            amountType=amountType,
            awardTypeId=awardTypeId,
            budget=budget,
            cid=cid,
            code=code,
            createUserId=createUserId,
            createts=createts,
            currencyCode=currencyCode,
            currencyModel=currencyModel,
            departmentModel=departmentModel,
            locationModel=locationModel,
            managerUserViewModel=managerUserViewModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.currency_model import CurrencyModel
from clay_hr_python_sdk.model.department_model import DepartmentModel
from clay_hr_python_sdk.model.location_model import LocationModel
from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_view_model import UserViewModel

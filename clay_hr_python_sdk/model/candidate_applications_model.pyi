# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CandidateApplicationsModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            applicationDueDate = schemas.DateTimeSchema
            applicationStatusId = schemas.Int32Schema
            applicationStatusValue = schemas.StrSchema
            appliedPositions = schemas.StrSchema
            candidateId = schemas.Int32Schema
        
            @staticmethod
            def candidatePositionCreateTs() -> typing.Type['Timestamp']:
                return Timestamp
            candidatePositionsId = schemas.Int64Schema
            cid = schemas.Int32Schema
            colorcode = schemas.StrSchema
            count = schemas.Int32Schema
            positionDepartmentId = schemas.Int32Schema
            positionDescription = schemas.StrSchema
            positionLocationId = schemas.Int32Schema
            positionName = schemas.StrSchema
            positionProfileId = schemas.Int32Schema
            positionProjectId = schemas.Int32Schema
            positionStatusOpenClosed = schemas.StrSchema
        
            @staticmethod
            def positioncreatets() -> typing.Type['Timestamp']:
                return Timestamp
            positionid = schemas.Int32Schema
            responsibilities = schemas.StrSchema
            sequence = schemas.Int32Schema
            status = schemas.StrSchema
            systemReco = schemas.StrSchema
            systemRecoHelp = schemas.StrSchema
            __annotations__ = {
                "applicationDueDate": applicationDueDate,
                "applicationStatusId": applicationStatusId,
                "applicationStatusValue": applicationStatusValue,
                "appliedPositions": appliedPositions,
                "candidateId": candidateId,
                "candidatePositionCreateTs": candidatePositionCreateTs,
                "candidatePositionsId": candidatePositionsId,
                "cid": cid,
                "colorcode": colorcode,
                "count": count,
                "positionDepartmentId": positionDepartmentId,
                "positionDescription": positionDescription,
                "positionLocationId": positionLocationId,
                "positionName": positionName,
                "positionProfileId": positionProfileId,
                "positionProjectId": positionProjectId,
                "positionStatusOpenClosed": positionStatusOpenClosed,
                "positioncreatets": positioncreatets,
                "positionid": positionid,
                "responsibilities": responsibilities,
                "sequence": sequence,
                "status": status,
                "systemReco": systemReco,
                "systemRecoHelp": systemRecoHelp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationDueDate"]) -> MetaOapg.properties.applicationDueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationStatusId"]) -> MetaOapg.properties.applicationStatusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicationStatusValue"]) -> MetaOapg.properties.applicationStatusValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appliedPositions"]) -> MetaOapg.properties.appliedPositions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidateId"]) -> MetaOapg.properties.candidateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidatePositionCreateTs"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidatePositionsId"]) -> MetaOapg.properties.candidatePositionsId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colorcode"]) -> MetaOapg.properties.colorcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionDepartmentId"]) -> MetaOapg.properties.positionDepartmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionDescription"]) -> MetaOapg.properties.positionDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionLocationId"]) -> MetaOapg.properties.positionLocationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionName"]) -> MetaOapg.properties.positionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionProfileId"]) -> MetaOapg.properties.positionProfileId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionProjectId"]) -> MetaOapg.properties.positionProjectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionStatusOpenClosed"]) -> MetaOapg.properties.positionStatusOpenClosed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positioncreatets"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionid"]) -> MetaOapg.properties.positionid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["responsibilities"]) -> MetaOapg.properties.responsibilities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence"]) -> MetaOapg.properties.sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemReco"]) -> MetaOapg.properties.systemReco: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemRecoHelp"]) -> MetaOapg.properties.systemRecoHelp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["applicationDueDate", "applicationStatusId", "applicationStatusValue", "appliedPositions", "candidateId", "candidatePositionCreateTs", "candidatePositionsId", "cid", "colorcode", "count", "positionDepartmentId", "positionDescription", "positionLocationId", "positionName", "positionProfileId", "positionProjectId", "positionStatusOpenClosed", "positioncreatets", "positionid", "responsibilities", "sequence", "status", "systemReco", "systemRecoHelp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationDueDate"]) -> typing.Union[MetaOapg.properties.applicationDueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationStatusId"]) -> typing.Union[MetaOapg.properties.applicationStatusId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicationStatusValue"]) -> typing.Union[MetaOapg.properties.applicationStatusValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appliedPositions"]) -> typing.Union[MetaOapg.properties.appliedPositions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidateId"]) -> typing.Union[MetaOapg.properties.candidateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidatePositionCreateTs"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidatePositionsId"]) -> typing.Union[MetaOapg.properties.candidatePositionsId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colorcode"]) -> typing.Union[MetaOapg.properties.colorcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionDepartmentId"]) -> typing.Union[MetaOapg.properties.positionDepartmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionDescription"]) -> typing.Union[MetaOapg.properties.positionDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionLocationId"]) -> typing.Union[MetaOapg.properties.positionLocationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionName"]) -> typing.Union[MetaOapg.properties.positionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionProfileId"]) -> typing.Union[MetaOapg.properties.positionProfileId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionProjectId"]) -> typing.Union[MetaOapg.properties.positionProjectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionStatusOpenClosed"]) -> typing.Union[MetaOapg.properties.positionStatusOpenClosed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positioncreatets"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionid"]) -> typing.Union[MetaOapg.properties.positionid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["responsibilities"]) -> typing.Union[MetaOapg.properties.responsibilities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence"]) -> typing.Union[MetaOapg.properties.sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemReco"]) -> typing.Union[MetaOapg.properties.systemReco, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemRecoHelp"]) -> typing.Union[MetaOapg.properties.systemRecoHelp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applicationDueDate", "applicationStatusId", "applicationStatusValue", "appliedPositions", "candidateId", "candidatePositionCreateTs", "candidatePositionsId", "cid", "colorcode", "count", "positionDepartmentId", "positionDescription", "positionLocationId", "positionName", "positionProfileId", "positionProjectId", "positionStatusOpenClosed", "positioncreatets", "positionid", "responsibilities", "sequence", "status", "systemReco", "systemRecoHelp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        applicationDueDate: typing.Union[MetaOapg.properties.applicationDueDate, str, datetime, schemas.Unset] = schemas.unset,
        applicationStatusId: typing.Union[MetaOapg.properties.applicationStatusId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        applicationStatusValue: typing.Union[MetaOapg.properties.applicationStatusValue, str, schemas.Unset] = schemas.unset,
        appliedPositions: typing.Union[MetaOapg.properties.appliedPositions, str, schemas.Unset] = schemas.unset,
        candidateId: typing.Union[MetaOapg.properties.candidateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        candidatePositionCreateTs: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        candidatePositionsId: typing.Union[MetaOapg.properties.candidatePositionsId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        colorcode: typing.Union[MetaOapg.properties.colorcode, str, schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        positionDepartmentId: typing.Union[MetaOapg.properties.positionDepartmentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        positionDescription: typing.Union[MetaOapg.properties.positionDescription, str, schemas.Unset] = schemas.unset,
        positionLocationId: typing.Union[MetaOapg.properties.positionLocationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        positionName: typing.Union[MetaOapg.properties.positionName, str, schemas.Unset] = schemas.unset,
        positionProfileId: typing.Union[MetaOapg.properties.positionProfileId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        positionProjectId: typing.Union[MetaOapg.properties.positionProjectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        positionStatusOpenClosed: typing.Union[MetaOapg.properties.positionStatusOpenClosed, str, schemas.Unset] = schemas.unset,
        positioncreatets: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        positionid: typing.Union[MetaOapg.properties.positionid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        responsibilities: typing.Union[MetaOapg.properties.responsibilities, str, schemas.Unset] = schemas.unset,
        sequence: typing.Union[MetaOapg.properties.sequence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        systemReco: typing.Union[MetaOapg.properties.systemReco, str, schemas.Unset] = schemas.unset,
        systemRecoHelp: typing.Union[MetaOapg.properties.systemRecoHelp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CandidateApplicationsModel':
        return super().__new__(
            cls,
            *args,
            applicationDueDate=applicationDueDate,
            applicationStatusId=applicationStatusId,
            applicationStatusValue=applicationStatusValue,
            appliedPositions=appliedPositions,
            candidateId=candidateId,
            candidatePositionCreateTs=candidatePositionCreateTs,
            candidatePositionsId=candidatePositionsId,
            cid=cid,
            colorcode=colorcode,
            count=count,
            positionDepartmentId=positionDepartmentId,
            positionDescription=positionDescription,
            positionLocationId=positionLocationId,
            positionName=positionName,
            positionProfileId=positionProfileId,
            positionProjectId=positionProjectId,
            positionStatusOpenClosed=positionStatusOpenClosed,
            positioncreatets=positioncreatets,
            positionid=positionid,
            responsibilities=responsibilities,
            sequence=sequence,
            status=status,
            systemReco=systemReco,
            systemRecoHelp=systemRecoHelp,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.timestamp import Timestamp

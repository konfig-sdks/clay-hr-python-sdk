# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class LocationModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            address = schemas.StrSchema
            
            
            class addressModelList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AddressModel']:
                        return AddressModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AddressModel'], typing.List['AddressModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addressModelList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AddressModel':
                    return super().__getitem__(i)
            cid = schemas.Int32Schema
            createuserid = schemas.Int32Schema
            lattitude = schemas.StrSchema
            locationCode = schemas.StrSchema
            locationDescription = schemas.StrSchema
            locationId = schemas.Int32Schema
            locationLabel = schemas.StrSchema
            locationName = schemas.StrSchema
            locationType = schemas.StrSchema
            locationUID = schemas.StrSchema
            longitude = schemas.StrSchema
            parentLocationId = schemas.Int32Schema
            status = schemas.StrSchema
            workingDays = schemas.StrSchema
            __annotations__ = {
                "address": address,
                "addressModelList": addressModelList,
                "cid": cid,
                "createuserid": createuserid,
                "lattitude": lattitude,
                "locationCode": locationCode,
                "locationDescription": locationDescription,
                "locationId": locationId,
                "locationLabel": locationLabel,
                "locationName": locationName,
                "locationType": locationType,
                "locationUID": locationUID,
                "longitude": longitude,
                "parentLocationId": parentLocationId,
                "status": status,
                "workingDays": workingDays,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressModelList"]) -> MetaOapg.properties.addressModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createuserid"]) -> MetaOapg.properties.createuserid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lattitude"]) -> MetaOapg.properties.lattitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationCode"]) -> MetaOapg.properties.locationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationDescription"]) -> MetaOapg.properties.locationDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationLabel"]) -> MetaOapg.properties.locationLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationName"]) -> MetaOapg.properties.locationName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationType"]) -> MetaOapg.properties.locationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationUID"]) -> MetaOapg.properties.locationUID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentLocationId"]) -> MetaOapg.properties.parentLocationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingDays"]) -> MetaOapg.properties.workingDays: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address", "addressModelList", "cid", "createuserid", "lattitude", "locationCode", "locationDescription", "locationId", "locationLabel", "locationName", "locationType", "locationUID", "longitude", "parentLocationId", "status", "workingDays", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressModelList"]) -> typing.Union[MetaOapg.properties.addressModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createuserid"]) -> typing.Union[MetaOapg.properties.createuserid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lattitude"]) -> typing.Union[MetaOapg.properties.lattitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationCode"]) -> typing.Union[MetaOapg.properties.locationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationDescription"]) -> typing.Union[MetaOapg.properties.locationDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationId"]) -> typing.Union[MetaOapg.properties.locationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationLabel"]) -> typing.Union[MetaOapg.properties.locationLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationName"]) -> typing.Union[MetaOapg.properties.locationName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationType"]) -> typing.Union[MetaOapg.properties.locationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationUID"]) -> typing.Union[MetaOapg.properties.locationUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentLocationId"]) -> typing.Union[MetaOapg.properties.parentLocationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingDays"]) -> typing.Union[MetaOapg.properties.workingDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address", "addressModelList", "cid", "createuserid", "lattitude", "locationCode", "locationDescription", "locationId", "locationLabel", "locationName", "locationType", "locationUID", "longitude", "parentLocationId", "status", "workingDays", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        addressModelList: typing.Union[MetaOapg.properties.addressModelList, list, tuple, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createuserid: typing.Union[MetaOapg.properties.createuserid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lattitude: typing.Union[MetaOapg.properties.lattitude, str, schemas.Unset] = schemas.unset,
        locationCode: typing.Union[MetaOapg.properties.locationCode, str, schemas.Unset] = schemas.unset,
        locationDescription: typing.Union[MetaOapg.properties.locationDescription, str, schemas.Unset] = schemas.unset,
        locationId: typing.Union[MetaOapg.properties.locationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        locationLabel: typing.Union[MetaOapg.properties.locationLabel, str, schemas.Unset] = schemas.unset,
        locationName: typing.Union[MetaOapg.properties.locationName, str, schemas.Unset] = schemas.unset,
        locationType: typing.Union[MetaOapg.properties.locationType, str, schemas.Unset] = schemas.unset,
        locationUID: typing.Union[MetaOapg.properties.locationUID, str, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, str, schemas.Unset] = schemas.unset,
        parentLocationId: typing.Union[MetaOapg.properties.parentLocationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        workingDays: typing.Union[MetaOapg.properties.workingDays, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocationModel':
        return super().__new__(
            cls,
            *args,
            address=address,
            addressModelList=addressModelList,
            cid=cid,
            createuserid=createuserid,
            lattitude=lattitude,
            locationCode=locationCode,
            locationDescription=locationDescription,
            locationId=locationId,
            locationLabel=locationLabel,
            locationName=locationName,
            locationType=locationType,
            locationUID=locationUID,
            longitude=longitude,
            parentLocationId=parentLocationId,
            status=status,
            workingDays=workingDays,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.address_model import AddressModel

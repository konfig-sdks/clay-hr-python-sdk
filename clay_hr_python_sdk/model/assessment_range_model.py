# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class AssessmentRangeModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            cid = schemas.Int32Schema
            colorCode = schemas.StrSchema
            interpretation = schemas.StrSchema
            rangeMax = schemas.Float32Schema
            rangeMin = schemas.Float32Schema
            scoreTempId = schemas.Int32Schema
            strangeid = schemas.Int32Schema
            __annotations__ = {
                "description": description,
                "cid": cid,
                "colorCode": colorCode,
                "interpretation": interpretation,
                "rangeMax": rangeMax,
                "rangeMin": rangeMin,
                "scoreTempId": scoreTempId,
                "strangeid": strangeid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colorCode"]) -> MetaOapg.properties.colorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interpretation"]) -> MetaOapg.properties.interpretation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rangeMax"]) -> MetaOapg.properties.rangeMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rangeMin"]) -> MetaOapg.properties.rangeMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreTempId"]) -> MetaOapg.properties.scoreTempId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["strangeid"]) -> MetaOapg.properties.strangeid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "cid", "colorCode", "interpretation", "rangeMax", "rangeMin", "scoreTempId", "strangeid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colorCode"]) -> typing.Union[MetaOapg.properties.colorCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interpretation"]) -> typing.Union[MetaOapg.properties.interpretation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rangeMax"]) -> typing.Union[MetaOapg.properties.rangeMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rangeMin"]) -> typing.Union[MetaOapg.properties.rangeMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreTempId"]) -> typing.Union[MetaOapg.properties.scoreTempId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["strangeid"]) -> typing.Union[MetaOapg.properties.strangeid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "cid", "colorCode", "interpretation", "rangeMax", "rangeMin", "scoreTempId", "strangeid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        colorCode: typing.Union[MetaOapg.properties.colorCode, str, schemas.Unset] = schemas.unset,
        interpretation: typing.Union[MetaOapg.properties.interpretation, str, schemas.Unset] = schemas.unset,
        rangeMax: typing.Union[MetaOapg.properties.rangeMax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rangeMin: typing.Union[MetaOapg.properties.rangeMin, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        scoreTempId: typing.Union[MetaOapg.properties.scoreTempId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        strangeid: typing.Union[MetaOapg.properties.strangeid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssessmentRangeModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            cid=cid,
            colorCode=colorCode,
            interpretation=interpretation,
            rangeMax=rangeMax,
            rangeMin=rangeMin,
            scoreTempId=scoreTempId,
            strangeid=strangeid,
            _configuration=_configuration,
            **kwargs,
        )

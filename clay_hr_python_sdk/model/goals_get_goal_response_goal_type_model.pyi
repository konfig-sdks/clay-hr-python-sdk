# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class GoalsGetGoalResponseGoalTypeModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            goalTypeId = schemas.StrSchema
            goalTypeName = schemas.StrSchema
            goalTypeDescription = schemas.StrSchema
        
            @staticmethod
            def assessmentModel() -> typing.Type['GoalsGetGoalResponseGoalTypeModelAssessmentModel']:
                return GoalsGetGoalResponseGoalTypeModelAssessmentModel
            createts = schemas.IntSchema
            cid = schemas.StrSchema
            __annotations__ = {
                "goalTypeId": goalTypeId,
                "goalTypeName": goalTypeName,
                "goalTypeDescription": goalTypeDescription,
                "assessmentModel": assessmentModel,
                "createts": createts,
                "cid": cid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalTypeId"]) -> MetaOapg.properties.goalTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalTypeName"]) -> MetaOapg.properties.goalTypeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goalTypeDescription"]) -> MetaOapg.properties.goalTypeDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assessmentModel"]) -> 'GoalsGetGoalResponseGoalTypeModelAssessmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["goalTypeId", "goalTypeName", "goalTypeDescription", "assessmentModel", "createts", "cid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalTypeId"]) -> typing.Union[MetaOapg.properties.goalTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalTypeName"]) -> typing.Union[MetaOapg.properties.goalTypeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goalTypeDescription"]) -> typing.Union[MetaOapg.properties.goalTypeDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assessmentModel"]) -> typing.Union['GoalsGetGoalResponseGoalTypeModelAssessmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["goalTypeId", "goalTypeName", "goalTypeDescription", "assessmentModel", "createts", "cid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        goalTypeId: typing.Union[MetaOapg.properties.goalTypeId, str, schemas.Unset] = schemas.unset,
        goalTypeName: typing.Union[MetaOapg.properties.goalTypeName, str, schemas.Unset] = schemas.unset,
        goalTypeDescription: typing.Union[MetaOapg.properties.goalTypeDescription, str, schemas.Unset] = schemas.unset,
        assessmentModel: typing.Union['GoalsGetGoalResponseGoalTypeModelAssessmentModel', schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GoalsGetGoalResponseGoalTypeModel':
        return super().__new__(
            cls,
            *args,
            goalTypeId=goalTypeId,
            goalTypeName=goalTypeName,
            goalTypeDescription=goalTypeDescription,
            assessmentModel=assessmentModel,
            createts=createts,
            cid=cid,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.goals_get_goal_response_goal_type_model_assessment_model import GoalsGetGoalResponseGoalTypeModelAssessmentModel

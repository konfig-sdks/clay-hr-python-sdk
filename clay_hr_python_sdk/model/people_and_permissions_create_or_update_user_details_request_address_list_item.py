# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            addressLine1 = schemas.StrSchema
            addressLine2 = schemas.StrSchema
            
            
            class addressType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Billing": "BILLING",
                        "Home": "HOME",
                        "Mailing": "MAILING",
                        "Permanent": "PERMANENT",
                        "Physical": "PHYSICAL",
                        "Work": "WORK",
                        "Other": "OTHER",
                    }
                
                @schemas.classproperty
                def BILLING(cls):
                    return cls("Billing")
                
                @schemas.classproperty
                def HOME(cls):
                    return cls("Home")
                
                @schemas.classproperty
                def MAILING(cls):
                    return cls("Mailing")
                
                @schemas.classproperty
                def PERMANENT(cls):
                    return cls("Permanent")
                
                @schemas.classproperty
                def PHYSICAL(cls):
                    return cls("Physical")
                
                @schemas.classproperty
                def WORK(cls):
                    return cls("Work")
                
                @schemas.classproperty
                def OTHER(cls):
                    return cls("Other")
            zipCode = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            countryId = schemas.StrSchema
            extAppUID = schemas.StrSchema
            countryCode = schemas.StrSchema
            __annotations__ = {
                "addressLine1": addressLine1,
                "addressLine2": addressLine2,
                "addressType": addressType,
                "zipCode": zipCode,
                "city": city,
                "state": state,
                "countryId": countryId,
                "extAppUID": extAppUID,
                "countryCode": countryCode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressType"]) -> MetaOapg.properties.addressType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipCode"]) -> MetaOapg.properties.zipCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryId"]) -> MetaOapg.properties.countryId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extAppUID"]) -> MetaOapg.properties.extAppUID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCode"]) -> MetaOapg.properties.countryCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addressLine1", "addressLine2", "addressType", "zipCode", "city", "state", "countryId", "extAppUID", "countryCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> typing.Union[MetaOapg.properties.addressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressType"]) -> typing.Union[MetaOapg.properties.addressType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipCode"]) -> typing.Union[MetaOapg.properties.zipCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryId"]) -> typing.Union[MetaOapg.properties.countryId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extAppUID"]) -> typing.Union[MetaOapg.properties.extAppUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCode"]) -> typing.Union[MetaOapg.properties.countryCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addressLine1", "addressLine2", "addressType", "zipCode", "city", "state", "countryId", "extAppUID", "countryCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, schemas.Unset] = schemas.unset,
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        addressType: typing.Union[MetaOapg.properties.addressType, str, schemas.Unset] = schemas.unset,
        zipCode: typing.Union[MetaOapg.properties.zipCode, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        countryId: typing.Union[MetaOapg.properties.countryId, str, schemas.Unset] = schemas.unset,
        extAppUID: typing.Union[MetaOapg.properties.extAppUID, str, schemas.Unset] = schemas.unset,
        countryCode: typing.Union[MetaOapg.properties.countryCode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PeopleAndPermissionsCreateOrUpdateUserDetailsRequestAddressListItem':
        return super().__new__(
            cls,
            *args,
            addressLine1=addressLine1,
            addressLine2=addressLine2,
            addressType=addressType,
            zipCode=zipCode,
            city=city,
            state=state,
            countryId=countryId,
            extAppUID=extAppUID,
            countryCode=countryCode,
            _configuration=_configuration,
            **kwargs,
        )

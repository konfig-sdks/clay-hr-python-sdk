# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class PtoPolicyApprovalFlowModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            cid = schemas.Int32Schema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            flowId = schemas.Int32Schema
            flowName = schemas.StrSchema
            
            
            class ptoPolicyApprovalModelList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PtoPolicyApprovalModel']:
                        return PtoPolicyApprovalModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PtoPolicyApprovalModel'], typing.List['PtoPolicyApprovalModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ptoPolicyApprovalModelList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PtoPolicyApprovalModel':
                    return super().__getitem__(i)
        
            @staticmethod
            def ptoPolicyList() -> typing.Type['PtoPolicyApprovalFlowModelPtoPolicyList']:
                return PtoPolicyApprovalFlowModelPtoPolicyList
            __annotations__ = {
                "description": description,
                "cid": cid,
                "createts": createts,
                "flowId": flowId,
                "flowName": flowName,
                "ptoPolicyApprovalModelList": ptoPolicyApprovalModelList,
                "ptoPolicyList": ptoPolicyList,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowId"]) -> MetaOapg.properties.flowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowName"]) -> MetaOapg.properties.flowName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ptoPolicyApprovalModelList"]) -> MetaOapg.properties.ptoPolicyApprovalModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ptoPolicyList"]) -> 'PtoPolicyApprovalFlowModelPtoPolicyList': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "cid", "createts", "flowId", "flowName", "ptoPolicyApprovalModelList", "ptoPolicyList", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowId"]) -> typing.Union[MetaOapg.properties.flowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowName"]) -> typing.Union[MetaOapg.properties.flowName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ptoPolicyApprovalModelList"]) -> typing.Union[MetaOapg.properties.ptoPolicyApprovalModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ptoPolicyList"]) -> typing.Union['PtoPolicyApprovalFlowModelPtoPolicyList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "cid", "createts", "flowId", "flowName", "ptoPolicyApprovalModelList", "ptoPolicyList", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        flowId: typing.Union[MetaOapg.properties.flowId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        flowName: typing.Union[MetaOapg.properties.flowName, str, schemas.Unset] = schemas.unset,
        ptoPolicyApprovalModelList: typing.Union[MetaOapg.properties.ptoPolicyApprovalModelList, list, tuple, schemas.Unset] = schemas.unset,
        ptoPolicyList: typing.Union['PtoPolicyApprovalFlowModelPtoPolicyList', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PtoPolicyApprovalFlowModel':
        return super().__new__(
            cls,
            *args,
            description=description,
            cid=cid,
            createts=createts,
            flowId=flowId,
            flowName=flowName,
            ptoPolicyApprovalModelList=ptoPolicyApprovalModelList,
            ptoPolicyList=ptoPolicyList,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.pto_policy_approval_flow_model_pto_policy_list import PtoPolicyApprovalFlowModelPtoPolicyList
from clay_hr_python_sdk.model.pto_policy_approval_model import PtoPolicyApprovalModel
from clay_hr_python_sdk.model.timestamp import Timestamp

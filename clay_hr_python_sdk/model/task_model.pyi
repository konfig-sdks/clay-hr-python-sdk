# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class TaskModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            appraisalId = schemas.Int32Schema
        
            @staticmethod
            def assgnCandModel() -> typing.Type['CandidateModel']:
                return CandidateModel
        
            @staticmethod
            def assgnUserModel() -> typing.Type['UserModel']:
                return UserModel
            assignedUserId = schemas.Int32Schema
            ci = schemas.BoolSchema
            createUserId = schemas.Int32Schema
            createts = schemas.DateSchema
            dueDate = schemas.DateSchema
            lastEdit = schemas.StrSchema
        
            @staticmethod
            def launchts() -> typing.Type['Timestamp']:
                return Timestamp
            phasename = schemas.StrSchema
            projectId = schemas.Int32Schema
            recruitId = schemas.Int32Schema
        
            @staticmethod
            def relatedDynamicFormAssignmentModel() -> typing.Type['DynamicFormAssignmentModel']:
                return DynamicFormAssignmentModel
        
            @staticmethod
            def releventAppraisalModel() -> typing.Type['AppraisalModel']:
                return AppraisalModel
        
            @staticmethod
            def releventAttachmentModel() -> typing.Type['AttachmentModel']:
                return AttachmentModel
        
            @staticmethod
            def releventUserTrainingModel() -> typing.Type['UserTrainingModel']:
                return UserTrainingModel
            statusCode = schemas.StrSchema
            systemTask = schemas.Int32Schema
            taskId = schemas.Int32Schema
            taskUID = schemas.Int32Schema
            transitionName = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def userGroupModel() -> typing.Type['UserGroupModel']:
                return UserGroupModel
            userId = schemas.Int32Schema
        
            @staticmethod
            def userModel() -> typing.Type['UserModel']:
                return UserModel
        
            @staticmethod
            def userWorkflowModel() -> typing.Type['UserWorkflowModel']:
                return UserWorkflowModel
        
            @staticmethod
            def workflowParameterAssignmentModel() -> typing.Type['WorkflowParameterAssignmentModel']:
                return WorkflowParameterAssignmentModel
            workflowStepId = schemas.Int64Schema
        
            @staticmethod
            def workflowStepModel() -> typing.Type['WorkflowStepModel']:
                return WorkflowStepModel
            __annotations__ = {
                "title": title,
                "description": description,
                "appraisalId": appraisalId,
                "assgnCandModel": assgnCandModel,
                "assgnUserModel": assgnUserModel,
                "assignedUserId": assignedUserId,
                "ci": ci,
                "createUserId": createUserId,
                "createts": createts,
                "dueDate": dueDate,
                "lastEdit": lastEdit,
                "launchts": launchts,
                "phasename": phasename,
                "projectId": projectId,
                "recruitId": recruitId,
                "relatedDynamicFormAssignmentModel": relatedDynamicFormAssignmentModel,
                "releventAppraisalModel": releventAppraisalModel,
                "releventAttachmentModel": releventAttachmentModel,
                "releventUserTrainingModel": releventUserTrainingModel,
                "statusCode": statusCode,
                "systemTask": systemTask,
                "taskId": taskId,
                "taskUID": taskUID,
                "transitionName": transitionName,
                "type": type,
                "userGroupModel": userGroupModel,
                "userId": userId,
                "userModel": userModel,
                "userWorkflowModel": userWorkflowModel,
                "workflowParameterAssignmentModel": workflowParameterAssignmentModel,
                "workflowStepId": workflowStepId,
                "workflowStepModel": workflowStepModel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appraisalId"]) -> MetaOapg.properties.appraisalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assgnCandModel"]) -> 'CandidateModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assgnUserModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedUserId"]) -> MetaOapg.properties.assignedUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ci"]) -> MetaOapg.properties.ci: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEdit"]) -> MetaOapg.properties.lastEdit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["launchts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phasename"]) -> MetaOapg.properties.phasename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recruitId"]) -> MetaOapg.properties.recruitId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedDynamicFormAssignmentModel"]) -> 'DynamicFormAssignmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releventAppraisalModel"]) -> 'AppraisalModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releventAttachmentModel"]) -> 'AttachmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releventUserTrainingModel"]) -> 'UserTrainingModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemTask"]) -> MetaOapg.properties.systemTask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskId"]) -> MetaOapg.properties.taskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taskUID"]) -> MetaOapg.properties.taskUID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitionName"]) -> MetaOapg.properties.transitionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroupModel"]) -> 'UserGroupModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userWorkflowModel"]) -> 'UserWorkflowModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowParameterAssignmentModel"]) -> 'WorkflowParameterAssignmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStepId"]) -> MetaOapg.properties.workflowStepId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStepModel"]) -> 'WorkflowStepModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "appraisalId", "assgnCandModel", "assgnUserModel", "assignedUserId", "ci", "createUserId", "createts", "dueDate", "lastEdit", "launchts", "phasename", "projectId", "recruitId", "relatedDynamicFormAssignmentModel", "releventAppraisalModel", "releventAttachmentModel", "releventUserTrainingModel", "statusCode", "systemTask", "taskId", "taskUID", "transitionName", "type", "userGroupModel", "userId", "userModel", "userWorkflowModel", "workflowParameterAssignmentModel", "workflowStepId", "workflowStepModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appraisalId"]) -> typing.Union[MetaOapg.properties.appraisalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assgnCandModel"]) -> typing.Union['CandidateModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assgnUserModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedUserId"]) -> typing.Union[MetaOapg.properties.assignedUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ci"]) -> typing.Union[MetaOapg.properties.ci, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEdit"]) -> typing.Union[MetaOapg.properties.lastEdit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["launchts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phasename"]) -> typing.Union[MetaOapg.properties.phasename, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recruitId"]) -> typing.Union[MetaOapg.properties.recruitId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedDynamicFormAssignmentModel"]) -> typing.Union['DynamicFormAssignmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releventAppraisalModel"]) -> typing.Union['AppraisalModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releventAttachmentModel"]) -> typing.Union['AttachmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releventUserTrainingModel"]) -> typing.Union['UserTrainingModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCode"]) -> typing.Union[MetaOapg.properties.statusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemTask"]) -> typing.Union[MetaOapg.properties.systemTask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskId"]) -> typing.Union[MetaOapg.properties.taskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taskUID"]) -> typing.Union[MetaOapg.properties.taskUID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitionName"]) -> typing.Union[MetaOapg.properties.transitionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroupModel"]) -> typing.Union['UserGroupModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userWorkflowModel"]) -> typing.Union['UserWorkflowModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowParameterAssignmentModel"]) -> typing.Union['WorkflowParameterAssignmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStepId"]) -> typing.Union[MetaOapg.properties.workflowStepId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStepModel"]) -> typing.Union['WorkflowStepModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "appraisalId", "assgnCandModel", "assgnUserModel", "assignedUserId", "ci", "createUserId", "createts", "dueDate", "lastEdit", "launchts", "phasename", "projectId", "recruitId", "relatedDynamicFormAssignmentModel", "releventAppraisalModel", "releventAttachmentModel", "releventUserTrainingModel", "statusCode", "systemTask", "taskId", "taskUID", "transitionName", "type", "userGroupModel", "userId", "userModel", "userWorkflowModel", "workflowParameterAssignmentModel", "workflowStepId", "workflowStepModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        appraisalId: typing.Union[MetaOapg.properties.appraisalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        assgnCandModel: typing.Union['CandidateModel', schemas.Unset] = schemas.unset,
        assgnUserModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        assignedUserId: typing.Union[MetaOapg.properties.assignedUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ci: typing.Union[MetaOapg.properties.ci, bool, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, date, schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, str, date, schemas.Unset] = schemas.unset,
        lastEdit: typing.Union[MetaOapg.properties.lastEdit, str, schemas.Unset] = schemas.unset,
        launchts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        phasename: typing.Union[MetaOapg.properties.phasename, str, schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        recruitId: typing.Union[MetaOapg.properties.recruitId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        relatedDynamicFormAssignmentModel: typing.Union['DynamicFormAssignmentModel', schemas.Unset] = schemas.unset,
        releventAppraisalModel: typing.Union['AppraisalModel', schemas.Unset] = schemas.unset,
        releventAttachmentModel: typing.Union['AttachmentModel', schemas.Unset] = schemas.unset,
        releventUserTrainingModel: typing.Union['UserTrainingModel', schemas.Unset] = schemas.unset,
        statusCode: typing.Union[MetaOapg.properties.statusCode, str, schemas.Unset] = schemas.unset,
        systemTask: typing.Union[MetaOapg.properties.systemTask, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        taskId: typing.Union[MetaOapg.properties.taskId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        taskUID: typing.Union[MetaOapg.properties.taskUID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transitionName: typing.Union[MetaOapg.properties.transitionName, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        userGroupModel: typing.Union['UserGroupModel', schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        userModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        userWorkflowModel: typing.Union['UserWorkflowModel', schemas.Unset] = schemas.unset,
        workflowParameterAssignmentModel: typing.Union['WorkflowParameterAssignmentModel', schemas.Unset] = schemas.unset,
        workflowStepId: typing.Union[MetaOapg.properties.workflowStepId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        workflowStepModel: typing.Union['WorkflowStepModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TaskModel':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            appraisalId=appraisalId,
            assgnCandModel=assgnCandModel,
            assgnUserModel=assgnUserModel,
            assignedUserId=assignedUserId,
            ci=ci,
            createUserId=createUserId,
            createts=createts,
            dueDate=dueDate,
            lastEdit=lastEdit,
            launchts=launchts,
            phasename=phasename,
            projectId=projectId,
            recruitId=recruitId,
            relatedDynamicFormAssignmentModel=relatedDynamicFormAssignmentModel,
            releventAppraisalModel=releventAppraisalModel,
            releventAttachmentModel=releventAttachmentModel,
            releventUserTrainingModel=releventUserTrainingModel,
            statusCode=statusCode,
            systemTask=systemTask,
            taskId=taskId,
            taskUID=taskUID,
            transitionName=transitionName,
            type=type,
            userGroupModel=userGroupModel,
            userId=userId,
            userModel=userModel,
            userWorkflowModel=userWorkflowModel,
            workflowParameterAssignmentModel=workflowParameterAssignmentModel,
            workflowStepId=workflowStepId,
            workflowStepModel=workflowStepModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.appraisal_model import AppraisalModel
from clay_hr_python_sdk.model.attachment_model import AttachmentModel
from clay_hr_python_sdk.model.candidate_model import CandidateModel
from clay_hr_python_sdk.model.dynamic_form_assignment_model import DynamicFormAssignmentModel
from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_group_model import UserGroupModel
from clay_hr_python_sdk.model.user_model import UserModel
from clay_hr_python_sdk.model.user_training_model import UserTrainingModel
from clay_hr_python_sdk.model.user_workflow_model import UserWorkflowModel
from clay_hr_python_sdk.model.workflow_parameter_assignment_model import WorkflowParameterAssignmentModel
from clay_hr_python_sdk.model.workflow_step_model import WorkflowStepModel

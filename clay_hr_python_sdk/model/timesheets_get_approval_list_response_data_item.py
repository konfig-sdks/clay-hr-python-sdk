# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class TimesheetsGetApprovalListResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            timesheetId = schemas.StrSchema
            startDate = schemas.StrSchema
            endDate = schemas.StrSchema
            status = schemas.StrSchema
            userName = schemas.StrSchema
            userId = schemas.StrSchema
            email = schemas.StrSchema
            empId = schemas.StrSchema
            gender = schemas.StrSchema
            orgUnit = schemas.StrSchema
            departmentId = schemas.StrSchema
            locationId = schemas.StrSchema
            locationName = schemas.StrSchema
            userStatus = schemas.StrSchema
            approvalFlowId = schemas.StrSchema
            cardsCount = schemas.StrSchema
            totalTime = schemas.StrSchema
            leaveHours = schemas.StrSchema
            holidayHours = schemas.StrSchema
            cid = schemas.StrSchema
            __annotations__ = {
                "timesheetId": timesheetId,
                "startDate": startDate,
                "endDate": endDate,
                "status": status,
                "userName": userName,
                "userId": userId,
                "email": email,
                "empId": empId,
                "gender": gender,
                "orgUnit": orgUnit,
                "departmentId": departmentId,
                "locationId": locationId,
                "locationName": locationName,
                "userStatus": userStatus,
                "approvalFlowId": approvalFlowId,
                "cardsCount": cardsCount,
                "totalTime": totalTime,
                "leaveHours": leaveHours,
                "holidayHours": holidayHours,
                "cid": cid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timesheetId"]) -> MetaOapg.properties.timesheetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empId"]) -> MetaOapg.properties.empId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orgUnit"]) -> MetaOapg.properties.orgUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentId"]) -> MetaOapg.properties.departmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationId"]) -> MetaOapg.properties.locationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationName"]) -> MetaOapg.properties.locationName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userStatus"]) -> MetaOapg.properties.userStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalFlowId"]) -> MetaOapg.properties.approvalFlowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardsCount"]) -> MetaOapg.properties.cardsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalTime"]) -> MetaOapg.properties.totalTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaveHours"]) -> MetaOapg.properties.leaveHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holidayHours"]) -> MetaOapg.properties.holidayHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timesheetId", "startDate", "endDate", "status", "userName", "userId", "email", "empId", "gender", "orgUnit", "departmentId", "locationId", "locationName", "userStatus", "approvalFlowId", "cardsCount", "totalTime", "leaveHours", "holidayHours", "cid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timesheetId"]) -> typing.Union[MetaOapg.properties.timesheetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> typing.Union[MetaOapg.properties.userName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empId"]) -> typing.Union[MetaOapg.properties.empId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orgUnit"]) -> typing.Union[MetaOapg.properties.orgUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentId"]) -> typing.Union[MetaOapg.properties.departmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationId"]) -> typing.Union[MetaOapg.properties.locationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationName"]) -> typing.Union[MetaOapg.properties.locationName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userStatus"]) -> typing.Union[MetaOapg.properties.userStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalFlowId"]) -> typing.Union[MetaOapg.properties.approvalFlowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardsCount"]) -> typing.Union[MetaOapg.properties.cardsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalTime"]) -> typing.Union[MetaOapg.properties.totalTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaveHours"]) -> typing.Union[MetaOapg.properties.leaveHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holidayHours"]) -> typing.Union[MetaOapg.properties.holidayHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timesheetId", "startDate", "endDate", "status", "userName", "userId", "email", "empId", "gender", "orgUnit", "departmentId", "locationId", "locationName", "userStatus", "approvalFlowId", "cardsCount", "totalTime", "leaveHours", "holidayHours", "cid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        timesheetId: typing.Union[MetaOapg.properties.timesheetId, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        userName: typing.Union[MetaOapg.properties.userName, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        empId: typing.Union[MetaOapg.properties.empId, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        orgUnit: typing.Union[MetaOapg.properties.orgUnit, str, schemas.Unset] = schemas.unset,
        departmentId: typing.Union[MetaOapg.properties.departmentId, str, schemas.Unset] = schemas.unset,
        locationId: typing.Union[MetaOapg.properties.locationId, str, schemas.Unset] = schemas.unset,
        locationName: typing.Union[MetaOapg.properties.locationName, str, schemas.Unset] = schemas.unset,
        userStatus: typing.Union[MetaOapg.properties.userStatus, str, schemas.Unset] = schemas.unset,
        approvalFlowId: typing.Union[MetaOapg.properties.approvalFlowId, str, schemas.Unset] = schemas.unset,
        cardsCount: typing.Union[MetaOapg.properties.cardsCount, str, schemas.Unset] = schemas.unset,
        totalTime: typing.Union[MetaOapg.properties.totalTime, str, schemas.Unset] = schemas.unset,
        leaveHours: typing.Union[MetaOapg.properties.leaveHours, str, schemas.Unset] = schemas.unset,
        holidayHours: typing.Union[MetaOapg.properties.holidayHours, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimesheetsGetApprovalListResponseDataItem':
        return super().__new__(
            cls,
            *args,
            timesheetId=timesheetId,
            startDate=startDate,
            endDate=endDate,
            status=status,
            userName=userName,
            userId=userId,
            email=email,
            empId=empId,
            gender=gender,
            orgUnit=orgUnit,
            departmentId=departmentId,
            locationId=locationId,
            locationName=locationName,
            userStatus=userStatus,
            approvalFlowId=approvalFlowId,
            cardsCount=cardsCount,
            totalTime=totalTime,
            leaveHours=leaveHours,
            holidayHours=holidayHours,
            cid=cid,
            _configuration=_configuration,
            **kwargs,
        )

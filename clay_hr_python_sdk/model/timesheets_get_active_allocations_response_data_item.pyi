# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class TimesheetsGetActiveAllocationsResponseDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            projectId = schemas.StrSchema
            projectName = schemas.StrSchema
            projectDesc = schemas.StrSchema
            startDate = schemas.StrSchema
            endDate = schemas.StrSchema
            contactPerson = schemas.StrSchema
            account = schemas.StrSchema
            status = schemas.StrSchema
            createts = schemas.StrSchema
            shortCode = schemas.StrSchema
            probability = schemas.StrSchema
            contactPersonName = schemas.StrSchema
            statusValue = schemas.StrSchema
            puid = schemas.StrSchema
            billingType = schemas.StrSchema
            timeSheetOpenToAll = schemas.StrSchema
            projectGroupModel = schemas.StrSchema
            locationModel = schemas.StrSchema
            customFieldValueModelList = schemas.StrSchema
            billinCategoryModels = schemas.StrSchema
            __annotations__ = {
                "projectId": projectId,
                "projectName": projectName,
                "projectDesc": projectDesc,
                "startDate": startDate,
                "endDate": endDate,
                "contactPerson": contactPerson,
                "account": account,
                "status": status,
                "createts": createts,
                "shortCode": shortCode,
                "probability": probability,
                "contactPersonName": contactPersonName,
                "statusValue": statusValue,
                "puid": puid,
                "billingType": billingType,
                "timeSheetOpenToAll": timeSheetOpenToAll,
                "projectGroupModel": projectGroupModel,
                "locationModel": locationModel,
                "customFieldValueModelList": customFieldValueModelList,
                "billinCategoryModels": billinCategoryModels,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectName"]) -> MetaOapg.properties.projectName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectDesc"]) -> MetaOapg.properties.projectDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactPerson"]) -> MetaOapg.properties.contactPerson: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortCode"]) -> MetaOapg.properties.shortCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probability"]) -> MetaOapg.properties.probability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactPersonName"]) -> MetaOapg.properties.contactPersonName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusValue"]) -> MetaOapg.properties.statusValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["puid"]) -> MetaOapg.properties.puid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingType"]) -> MetaOapg.properties.billingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeSheetOpenToAll"]) -> MetaOapg.properties.timeSheetOpenToAll: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectGroupModel"]) -> MetaOapg.properties.projectGroupModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationModel"]) -> MetaOapg.properties.locationModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldValueModelList"]) -> MetaOapg.properties.customFieldValueModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billinCategoryModels"]) -> MetaOapg.properties.billinCategoryModels: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["projectId", "projectName", "projectDesc", "startDate", "endDate", "contactPerson", "account", "status", "createts", "shortCode", "probability", "contactPersonName", "statusValue", "puid", "billingType", "timeSheetOpenToAll", "projectGroupModel", "locationModel", "customFieldValueModelList", "billinCategoryModels", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectName"]) -> typing.Union[MetaOapg.properties.projectName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectDesc"]) -> typing.Union[MetaOapg.properties.projectDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactPerson"]) -> typing.Union[MetaOapg.properties.contactPerson, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortCode"]) -> typing.Union[MetaOapg.properties.shortCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probability"]) -> typing.Union[MetaOapg.properties.probability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactPersonName"]) -> typing.Union[MetaOapg.properties.contactPersonName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusValue"]) -> typing.Union[MetaOapg.properties.statusValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["puid"]) -> typing.Union[MetaOapg.properties.puid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingType"]) -> typing.Union[MetaOapg.properties.billingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeSheetOpenToAll"]) -> typing.Union[MetaOapg.properties.timeSheetOpenToAll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectGroupModel"]) -> typing.Union[MetaOapg.properties.projectGroupModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationModel"]) -> typing.Union[MetaOapg.properties.locationModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldValueModelList"]) -> typing.Union[MetaOapg.properties.customFieldValueModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billinCategoryModels"]) -> typing.Union[MetaOapg.properties.billinCategoryModels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["projectId", "projectName", "projectDesc", "startDate", "endDate", "contactPerson", "account", "status", "createts", "shortCode", "probability", "contactPersonName", "statusValue", "puid", "billingType", "timeSheetOpenToAll", "projectGroupModel", "locationModel", "customFieldValueModelList", "billinCategoryModels", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        projectId: typing.Union[MetaOapg.properties.projectId, str, schemas.Unset] = schemas.unset,
        projectName: typing.Union[MetaOapg.properties.projectName, str, schemas.Unset] = schemas.unset,
        projectDesc: typing.Union[MetaOapg.properties.projectDesc, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, schemas.Unset] = schemas.unset,
        contactPerson: typing.Union[MetaOapg.properties.contactPerson, str, schemas.Unset] = schemas.unset,
        account: typing.Union[MetaOapg.properties.account, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, schemas.Unset] = schemas.unset,
        shortCode: typing.Union[MetaOapg.properties.shortCode, str, schemas.Unset] = schemas.unset,
        probability: typing.Union[MetaOapg.properties.probability, str, schemas.Unset] = schemas.unset,
        contactPersonName: typing.Union[MetaOapg.properties.contactPersonName, str, schemas.Unset] = schemas.unset,
        statusValue: typing.Union[MetaOapg.properties.statusValue, str, schemas.Unset] = schemas.unset,
        puid: typing.Union[MetaOapg.properties.puid, str, schemas.Unset] = schemas.unset,
        billingType: typing.Union[MetaOapg.properties.billingType, str, schemas.Unset] = schemas.unset,
        timeSheetOpenToAll: typing.Union[MetaOapg.properties.timeSheetOpenToAll, str, schemas.Unset] = schemas.unset,
        projectGroupModel: typing.Union[MetaOapg.properties.projectGroupModel, str, schemas.Unset] = schemas.unset,
        locationModel: typing.Union[MetaOapg.properties.locationModel, str, schemas.Unset] = schemas.unset,
        customFieldValueModelList: typing.Union[MetaOapg.properties.customFieldValueModelList, str, schemas.Unset] = schemas.unset,
        billinCategoryModels: typing.Union[MetaOapg.properties.billinCategoryModels, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimesheetsGetActiveAllocationsResponseDataItem':
        return super().__new__(
            cls,
            *args,
            projectId=projectId,
            projectName=projectName,
            projectDesc=projectDesc,
            startDate=startDate,
            endDate=endDate,
            contactPerson=contactPerson,
            account=account,
            status=status,
            createts=createts,
            shortCode=shortCode,
            probability=probability,
            contactPersonName=contactPersonName,
            statusValue=statusValue,
            puid=puid,
            billingType=billingType,
            timeSheetOpenToAll=timeSheetOpenToAll,
            projectGroupModel=projectGroupModel,
            locationModel=locationModel,
            customFieldValueModelList=customFieldValueModelList,
            billinCategoryModels=billinCategoryModels,
            _configuration=_configuration,
            **kwargs,
        )

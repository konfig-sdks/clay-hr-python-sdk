# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class UserWorkflowModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def assignCandidateModel() -> typing.Type['CandidateModel']:
                return CandidateModel
        
            @staticmethod
            def assignPositionModel() -> typing.Type['PositionModel']:
                return PositionModel
        
            @staticmethod
            def assignUserModel() -> typing.Type['UserModel']:
                return UserModel
            cid = schemas.Int32Schema
        
            @staticmethod
            def coordinatorUserViewModel() -> typing.Type['UserViewModel']:
                return UserViewModel
        
            @staticmethod
            def createTS() -> typing.Type['Timestamp']:
                return Timestamp
        
            @staticmethod
            def createUserModel() -> typing.Type['UserModel']:
                return UserModel
            launchStatus = schemas.StrSchema
        
            @staticmethod
            def launchts() -> typing.Type['Timestamp']:
                return Timestamp
            optedOutForEmail = schemas.BoolSchema
            statusCode = schemas.StrSchema
            userWorkflowId = schemas.Int32Schema
        
            @staticmethod
            def workflowModel() -> typing.Type['WorkflowModel']:
                return WorkflowModel
            workflowProgress = schemas.Float32Schema
            workflowStatus = schemas.StrSchema
            __annotations__ = {
                "assignCandidateModel": assignCandidateModel,
                "assignPositionModel": assignPositionModel,
                "assignUserModel": assignUserModel,
                "cid": cid,
                "coordinatorUserViewModel": coordinatorUserViewModel,
                "createTS": createTS,
                "createUserModel": createUserModel,
                "launchStatus": launchStatus,
                "launchts": launchts,
                "optedOutForEmail": optedOutForEmail,
                "statusCode": statusCode,
                "userWorkflowId": userWorkflowId,
                "workflowModel": workflowModel,
                "workflowProgress": workflowProgress,
                "workflowStatus": workflowStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignCandidateModel"]) -> 'CandidateModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignPositionModel"]) -> 'PositionModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignUserModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinatorUserViewModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createTS"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["launchStatus"]) -> MetaOapg.properties.launchStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["launchts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optedOutForEmail"]) -> MetaOapg.properties.optedOutForEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusCode"]) -> MetaOapg.properties.statusCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userWorkflowId"]) -> MetaOapg.properties.userWorkflowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowModel"]) -> 'WorkflowModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowProgress"]) -> MetaOapg.properties.workflowProgress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowStatus"]) -> MetaOapg.properties.workflowStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assignCandidateModel", "assignPositionModel", "assignUserModel", "cid", "coordinatorUserViewModel", "createTS", "createUserModel", "launchStatus", "launchts", "optedOutForEmail", "statusCode", "userWorkflowId", "workflowModel", "workflowProgress", "workflowStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignCandidateModel"]) -> typing.Union['CandidateModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignPositionModel"]) -> typing.Union['PositionModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignUserModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinatorUserViewModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createTS"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["launchStatus"]) -> typing.Union[MetaOapg.properties.launchStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["launchts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optedOutForEmail"]) -> typing.Union[MetaOapg.properties.optedOutForEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusCode"]) -> typing.Union[MetaOapg.properties.statusCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userWorkflowId"]) -> typing.Union[MetaOapg.properties.userWorkflowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowModel"]) -> typing.Union['WorkflowModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowProgress"]) -> typing.Union[MetaOapg.properties.workflowProgress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowStatus"]) -> typing.Union[MetaOapg.properties.workflowStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assignCandidateModel", "assignPositionModel", "assignUserModel", "cid", "coordinatorUserViewModel", "createTS", "createUserModel", "launchStatus", "launchts", "optedOutForEmail", "statusCode", "userWorkflowId", "workflowModel", "workflowProgress", "workflowStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        assignCandidateModel: typing.Union['CandidateModel', schemas.Unset] = schemas.unset,
        assignPositionModel: typing.Union['PositionModel', schemas.Unset] = schemas.unset,
        assignUserModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        coordinatorUserViewModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        createTS: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        createUserModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        launchStatus: typing.Union[MetaOapg.properties.launchStatus, str, schemas.Unset] = schemas.unset,
        launchts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        optedOutForEmail: typing.Union[MetaOapg.properties.optedOutForEmail, bool, schemas.Unset] = schemas.unset,
        statusCode: typing.Union[MetaOapg.properties.statusCode, str, schemas.Unset] = schemas.unset,
        userWorkflowId: typing.Union[MetaOapg.properties.userWorkflowId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        workflowModel: typing.Union['WorkflowModel', schemas.Unset] = schemas.unset,
        workflowProgress: typing.Union[MetaOapg.properties.workflowProgress, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        workflowStatus: typing.Union[MetaOapg.properties.workflowStatus, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserWorkflowModel':
        return super().__new__(
            cls,
            *args,
            assignCandidateModel=assignCandidateModel,
            assignPositionModel=assignPositionModel,
            assignUserModel=assignUserModel,
            cid=cid,
            coordinatorUserViewModel=coordinatorUserViewModel,
            createTS=createTS,
            createUserModel=createUserModel,
            launchStatus=launchStatus,
            launchts=launchts,
            optedOutForEmail=optedOutForEmail,
            statusCode=statusCode,
            userWorkflowId=userWorkflowId,
            workflowModel=workflowModel,
            workflowProgress=workflowProgress,
            workflowStatus=workflowStatus,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.candidate_model import CandidateModel
from clay_hr_python_sdk.model.position_model import PositionModel
from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_model import UserModel
from clay_hr_python_sdk.model.user_view_model import UserViewModel
from clay_hr_python_sdk.model.workflow_model import WorkflowModel

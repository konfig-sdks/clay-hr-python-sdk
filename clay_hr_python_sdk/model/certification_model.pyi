# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class CertificationModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            CertificationNumber = schemas.StrSchema
            authority = schemas.StrSchema
            candidateId = schemas.Int32Schema
            certificationId = schemas.Int64Schema
            certificationNumber = schemas.StrSchema
            cid = schemas.Int32Schema
            comments = schemas.StrSchema
            createUserId = schemas.Int32Schema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            expireDate = schemas.DateSchema
            issueDate = schemas.DateSchema
            issueState = schemas.StrSchema
            type = schemas.StrSchema
            userId = schemas.Int32Schema
            validState = schemas.StrSchema
            __annotations__ = {
                "CertificationNumber": CertificationNumber,
                "authority": authority,
                "candidateId": candidateId,
                "certificationId": certificationId,
                "certificationNumber": certificationNumber,
                "cid": cid,
                "comments": comments,
                "createUserId": createUserId,
                "createts": createts,
                "expireDate": expireDate,
                "issueDate": issueDate,
                "issueState": issueState,
                "type": type,
                "userId": userId,
                "validState": validState,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CertificationNumber"]) -> MetaOapg.properties.CertificationNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authority"]) -> MetaOapg.properties.authority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["candidateId"]) -> MetaOapg.properties.candidateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificationId"]) -> MetaOapg.properties.certificationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificationNumber"]) -> MetaOapg.properties.certificationNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expireDate"]) -> MetaOapg.properties.expireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueDate"]) -> MetaOapg.properties.issueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issueState"]) -> MetaOapg.properties.issueState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validState"]) -> MetaOapg.properties.validState: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["CertificationNumber", "authority", "candidateId", "certificationId", "certificationNumber", "cid", "comments", "createUserId", "createts", "expireDate", "issueDate", "issueState", "type", "userId", "validState", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CertificationNumber"]) -> typing.Union[MetaOapg.properties.CertificationNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authority"]) -> typing.Union[MetaOapg.properties.authority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["candidateId"]) -> typing.Union[MetaOapg.properties.candidateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificationId"]) -> typing.Union[MetaOapg.properties.certificationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificationNumber"]) -> typing.Union[MetaOapg.properties.certificationNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expireDate"]) -> typing.Union[MetaOapg.properties.expireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueDate"]) -> typing.Union[MetaOapg.properties.issueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issueState"]) -> typing.Union[MetaOapg.properties.issueState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validState"]) -> typing.Union[MetaOapg.properties.validState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CertificationNumber", "authority", "candidateId", "certificationId", "certificationNumber", "cid", "comments", "createUserId", "createts", "expireDate", "issueDate", "issueState", "type", "userId", "validState", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        CertificationNumber: typing.Union[MetaOapg.properties.CertificationNumber, str, schemas.Unset] = schemas.unset,
        authority: typing.Union[MetaOapg.properties.authority, str, schemas.Unset] = schemas.unset,
        candidateId: typing.Union[MetaOapg.properties.candidateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        certificationId: typing.Union[MetaOapg.properties.certificationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        certificationNumber: typing.Union[MetaOapg.properties.certificationNumber, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        expireDate: typing.Union[MetaOapg.properties.expireDate, str, date, schemas.Unset] = schemas.unset,
        issueDate: typing.Union[MetaOapg.properties.issueDate, str, date, schemas.Unset] = schemas.unset,
        issueState: typing.Union[MetaOapg.properties.issueState, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        validState: typing.Union[MetaOapg.properties.validState, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CertificationModel':
        return super().__new__(
            cls,
            *args,
            CertificationNumber=CertificationNumber,
            authority=authority,
            candidateId=candidateId,
            certificationId=certificationId,
            certificationNumber=certificationNumber,
            cid=cid,
            comments=comments,
            createUserId=createUserId,
            createts=createts,
            expireDate=expireDate,
            issueDate=issueDate,
            issueState=issueState,
            type=type,
            userId=userId,
            validState=validState,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.timestamp import Timestamp

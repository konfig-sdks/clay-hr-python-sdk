# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class SkillsCreateNewSkillResponseSkillTypeModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            skillTypeId = schemas.StrSchema
            skillTypeName = schemas.StrSchema
            skillTypeDesc = schemas.StrSchema
            skillViewModelList = schemas.StrSchema
            createUserId = schemas.StrSchema
            createts = schemas.StrSchema
            skillCategoryModel = schemas.StrSchema
            cid = schemas.StrSchema
            __annotations__ = {
                "skillTypeId": skillTypeId,
                "skillTypeName": skillTypeName,
                "skillTypeDesc": skillTypeDesc,
                "skillViewModelList": skillViewModelList,
                "createUserId": createUserId,
                "createts": createts,
                "skillCategoryModel": skillCategoryModel,
                "cid": cid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeId"]) -> MetaOapg.properties.skillTypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeName"]) -> MetaOapg.properties.skillTypeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillTypeDesc"]) -> MetaOapg.properties.skillTypeDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillViewModelList"]) -> MetaOapg.properties.skillViewModelList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> MetaOapg.properties.createts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skillCategoryModel"]) -> MetaOapg.properties.skillCategoryModel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["skillTypeId", "skillTypeName", "skillTypeDesc", "skillViewModelList", "createUserId", "createts", "skillCategoryModel", "cid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeId"]) -> typing.Union[MetaOapg.properties.skillTypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeName"]) -> typing.Union[MetaOapg.properties.skillTypeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillTypeDesc"]) -> typing.Union[MetaOapg.properties.skillTypeDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillViewModelList"]) -> typing.Union[MetaOapg.properties.skillViewModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union[MetaOapg.properties.createts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skillCategoryModel"]) -> typing.Union[MetaOapg.properties.skillCategoryModel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["skillTypeId", "skillTypeName", "skillTypeDesc", "skillViewModelList", "createUserId", "createts", "skillCategoryModel", "cid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        skillTypeId: typing.Union[MetaOapg.properties.skillTypeId, str, schemas.Unset] = schemas.unset,
        skillTypeName: typing.Union[MetaOapg.properties.skillTypeName, str, schemas.Unset] = schemas.unset,
        skillTypeDesc: typing.Union[MetaOapg.properties.skillTypeDesc, str, schemas.Unset] = schemas.unset,
        skillViewModelList: typing.Union[MetaOapg.properties.skillViewModelList, str, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, str, schemas.Unset] = schemas.unset,
        createts: typing.Union[MetaOapg.properties.createts, str, schemas.Unset] = schemas.unset,
        skillCategoryModel: typing.Union[MetaOapg.properties.skillCategoryModel, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SkillsCreateNewSkillResponseSkillTypeModel':
        return super().__new__(
            cls,
            *args,
            skillTypeId=skillTypeId,
            skillTypeName=skillTypeName,
            skillTypeDesc=skillTypeDesc,
            skillViewModelList=skillViewModelList,
            createUserId=createUserId,
            createts=createts,
            skillCategoryModel=skillCategoryModel,
            cid=cid,
            _configuration=_configuration,
            **kwargs,
        )

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class GoalsGetGoalResponseGoalTypeModelAssessmentModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            scoretemplateid = schemas.StrSchema
            cid = schemas.StrSchema
            scoreMin = schemas.StrSchema
            scoreMax = schemas.StrSchema
            scoreMaxValidation = schemas.StrSchema
            scoringInstructions = schemas.StrSchema
            scoreName = schemas.StrSchema
            allowFractional = schemas.StrSchema
        
            @staticmethod
            def rangeModelList() -> typing.Type['GoalsGetGoalResponseGoalTypeModelAssessmentModelRangeModelList']:
                return GoalsGetGoalResponseGoalTypeModelAssessmentModelRangeModelList
            visualizationType = schemas.StrSchema
            status = schemas.StrSchema
            __annotations__ = {
                "scoretemplateid": scoretemplateid,
                "cid": cid,
                "scoreMin": scoreMin,
                "scoreMax": scoreMax,
                "scoreMaxValidation": scoreMaxValidation,
                "scoringInstructions": scoringInstructions,
                "scoreName": scoreName,
                "allowFractional": allowFractional,
                "rangeModelList": rangeModelList,
                "visualizationType": visualizationType,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoretemplateid"]) -> MetaOapg.properties.scoretemplateid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreMin"]) -> MetaOapg.properties.scoreMin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreMax"]) -> MetaOapg.properties.scoreMax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreMaxValidation"]) -> MetaOapg.properties.scoreMaxValidation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoringInstructions"]) -> MetaOapg.properties.scoringInstructions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreName"]) -> MetaOapg.properties.scoreName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowFractional"]) -> MetaOapg.properties.allowFractional: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rangeModelList"]) -> 'GoalsGetGoalResponseGoalTypeModelAssessmentModelRangeModelList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visualizationType"]) -> MetaOapg.properties.visualizationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["scoretemplateid", "cid", "scoreMin", "scoreMax", "scoreMaxValidation", "scoringInstructions", "scoreName", "allowFractional", "rangeModelList", "visualizationType", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoretemplateid"]) -> typing.Union[MetaOapg.properties.scoretemplateid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreMin"]) -> typing.Union[MetaOapg.properties.scoreMin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreMax"]) -> typing.Union[MetaOapg.properties.scoreMax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreMaxValidation"]) -> typing.Union[MetaOapg.properties.scoreMaxValidation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoringInstructions"]) -> typing.Union[MetaOapg.properties.scoringInstructions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreName"]) -> typing.Union[MetaOapg.properties.scoreName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowFractional"]) -> typing.Union[MetaOapg.properties.allowFractional, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rangeModelList"]) -> typing.Union['GoalsGetGoalResponseGoalTypeModelAssessmentModelRangeModelList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visualizationType"]) -> typing.Union[MetaOapg.properties.visualizationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["scoretemplateid", "cid", "scoreMin", "scoreMax", "scoreMaxValidation", "scoringInstructions", "scoreName", "allowFractional", "rangeModelList", "visualizationType", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scoretemplateid: typing.Union[MetaOapg.properties.scoretemplateid, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, str, schemas.Unset] = schemas.unset,
        scoreMin: typing.Union[MetaOapg.properties.scoreMin, str, schemas.Unset] = schemas.unset,
        scoreMax: typing.Union[MetaOapg.properties.scoreMax, str, schemas.Unset] = schemas.unset,
        scoreMaxValidation: typing.Union[MetaOapg.properties.scoreMaxValidation, str, schemas.Unset] = schemas.unset,
        scoringInstructions: typing.Union[MetaOapg.properties.scoringInstructions, str, schemas.Unset] = schemas.unset,
        scoreName: typing.Union[MetaOapg.properties.scoreName, str, schemas.Unset] = schemas.unset,
        allowFractional: typing.Union[MetaOapg.properties.allowFractional, str, schemas.Unset] = schemas.unset,
        rangeModelList: typing.Union['GoalsGetGoalResponseGoalTypeModelAssessmentModelRangeModelList', schemas.Unset] = schemas.unset,
        visualizationType: typing.Union[MetaOapg.properties.visualizationType, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GoalsGetGoalResponseGoalTypeModelAssessmentModel':
        return super().__new__(
            cls,
            *args,
            scoretemplateid=scoretemplateid,
            cid=cid,
            scoreMin=scoreMin,
            scoreMax=scoreMax,
            scoreMaxValidation=scoreMaxValidation,
            scoringInstructions=scoringInstructions,
            scoreName=scoreName,
            allowFractional=allowFractional,
            rangeModelList=rangeModelList,
            visualizationType=visualizationType,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.goals_get_goal_response_goal_type_model_assessment_model_range_model_list import GoalsGetGoalResponseGoalTypeModelAssessmentModelRangeModelList

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class ProjectModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            Probability = schemas.Int32Schema
            account = schemas.Int32Schema
        
            @staticmethod
            def accountModel() -> typing.Type['AccountModel']:
                return AccountModel
            accountName = schemas.StrSchema
            billing_type = schemas.StrSchema
            cid = schemas.Int32Schema
            contactPerson = schemas.Int32Schema
            contactPersonName = schemas.StrSchema
        
            @staticmethod
            def createts() -> typing.Type['Timestamp']:
                return Timestamp
            createuserid = schemas.Int32Schema
            endDate = schemas.DateSchema
            groupName = schemas.StrSchema
            industry = schemas.StrSchema
            lastupdateuserid = schemas.Int32Schema
            locationid = schemas.Int32Schema
            pgroupid = schemas.Int32Schema
            pmMail = schemas.StrSchema
            probability = schemas.Int32Schema
            projProbability = schemas.Int32Schema
            projStatus = schemas.StrSchema
            projectDesc = schemas.StrSchema
        
            @staticmethod
            def projectGroupModel() -> typing.Type['ProjectGroupModel']:
                return ProjectGroupModel
            projectId = schemas.Int32Schema
            projectName = schemas.StrSchema
            puid = schemas.StrSchema
            reportMethod = schemas.StrSchema
            shortCode = schemas.StrSchema
            startDate = schemas.DateSchema
            status = schemas.StrSchema
            statusValue = schemas.StrSchema
        
            @staticmethod
            def userModel() -> typing.Type['UserViewModel']:
                return UserViewModel
            
            
            class userModelList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserModel']:
                        return UserModel
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['UserModel'], typing.List['UserModel']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userModelList':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserModel':
                    return super().__getitem__(i)
            __annotations__ = {
                "Probability": Probability,
                "account": account,
                "accountModel": accountModel,
                "accountName": accountName,
                "billing_type": billing_type,
                "cid": cid,
                "contactPerson": contactPerson,
                "contactPersonName": contactPersonName,
                "createts": createts,
                "createuserid": createuserid,
                "endDate": endDate,
                "groupName": groupName,
                "industry": industry,
                "lastupdateuserid": lastupdateuserid,
                "locationid": locationid,
                "pgroupid": pgroupid,
                "pmMail": pmMail,
                "probability": probability,
                "projProbability": projProbability,
                "projStatus": projStatus,
                "projectDesc": projectDesc,
                "projectGroupModel": projectGroupModel,
                "projectId": projectId,
                "projectName": projectName,
                "puid": puid,
                "reportMethod": reportMethod,
                "shortCode": shortCode,
                "startDate": startDate,
                "status": status,
                "statusValue": statusValue,
                "userModel": userModel,
                "userModelList": userModelList,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Probability"]) -> MetaOapg.properties.Probability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountModel"]) -> 'AccountModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_type"]) -> MetaOapg.properties.billing_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactPerson"]) -> MetaOapg.properties.contactPerson: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactPersonName"]) -> MetaOapg.properties.contactPersonName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createts"]) -> 'Timestamp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createuserid"]) -> MetaOapg.properties.createuserid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupName"]) -> MetaOapg.properties.groupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["industry"]) -> MetaOapg.properties.industry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastupdateuserid"]) -> MetaOapg.properties.lastupdateuserid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locationid"]) -> MetaOapg.properties.locationid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pgroupid"]) -> MetaOapg.properties.pgroupid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pmMail"]) -> MetaOapg.properties.pmMail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probability"]) -> MetaOapg.properties.probability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projProbability"]) -> MetaOapg.properties.projProbability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projStatus"]) -> MetaOapg.properties.projStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectDesc"]) -> MetaOapg.properties.projectDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectGroupModel"]) -> 'ProjectGroupModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectId"]) -> MetaOapg.properties.projectId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projectName"]) -> MetaOapg.properties.projectName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["puid"]) -> MetaOapg.properties.puid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportMethod"]) -> MetaOapg.properties.reportMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortCode"]) -> MetaOapg.properties.shortCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusValue"]) -> MetaOapg.properties.statusValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userModel"]) -> 'UserViewModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userModelList"]) -> MetaOapg.properties.userModelList: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Probability", "account", "accountModel", "accountName", "billing_type", "cid", "contactPerson", "contactPersonName", "createts", "createuserid", "endDate", "groupName", "industry", "lastupdateuserid", "locationid", "pgroupid", "pmMail", "probability", "projProbability", "projStatus", "projectDesc", "projectGroupModel", "projectId", "projectName", "puid", "reportMethod", "shortCode", "startDate", "status", "statusValue", "userModel", "userModelList", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Probability"]) -> typing.Union[MetaOapg.properties.Probability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> typing.Union[MetaOapg.properties.account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountModel"]) -> typing.Union['AccountModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountName"]) -> typing.Union[MetaOapg.properties.accountName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_type"]) -> typing.Union[MetaOapg.properties.billing_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactPerson"]) -> typing.Union[MetaOapg.properties.contactPerson, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactPersonName"]) -> typing.Union[MetaOapg.properties.contactPersonName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createts"]) -> typing.Union['Timestamp', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createuserid"]) -> typing.Union[MetaOapg.properties.createuserid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupName"]) -> typing.Union[MetaOapg.properties.groupName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["industry"]) -> typing.Union[MetaOapg.properties.industry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastupdateuserid"]) -> typing.Union[MetaOapg.properties.lastupdateuserid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locationid"]) -> typing.Union[MetaOapg.properties.locationid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pgroupid"]) -> typing.Union[MetaOapg.properties.pgroupid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pmMail"]) -> typing.Union[MetaOapg.properties.pmMail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probability"]) -> typing.Union[MetaOapg.properties.probability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projProbability"]) -> typing.Union[MetaOapg.properties.projProbability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projStatus"]) -> typing.Union[MetaOapg.properties.projStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectDesc"]) -> typing.Union[MetaOapg.properties.projectDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectGroupModel"]) -> typing.Union['ProjectGroupModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectId"]) -> typing.Union[MetaOapg.properties.projectId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projectName"]) -> typing.Union[MetaOapg.properties.projectName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["puid"]) -> typing.Union[MetaOapg.properties.puid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportMethod"]) -> typing.Union[MetaOapg.properties.reportMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortCode"]) -> typing.Union[MetaOapg.properties.shortCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusValue"]) -> typing.Union[MetaOapg.properties.statusValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userModel"]) -> typing.Union['UserViewModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userModelList"]) -> typing.Union[MetaOapg.properties.userModelList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Probability", "account", "accountModel", "accountName", "billing_type", "cid", "contactPerson", "contactPersonName", "createts", "createuserid", "endDate", "groupName", "industry", "lastupdateuserid", "locationid", "pgroupid", "pmMail", "probability", "projProbability", "projStatus", "projectDesc", "projectGroupModel", "projectId", "projectName", "puid", "reportMethod", "shortCode", "startDate", "status", "statusValue", "userModel", "userModelList", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Probability: typing.Union[MetaOapg.properties.Probability, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        account: typing.Union[MetaOapg.properties.account, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accountModel: typing.Union['AccountModel', schemas.Unset] = schemas.unset,
        accountName: typing.Union[MetaOapg.properties.accountName, str, schemas.Unset] = schemas.unset,
        billing_type: typing.Union[MetaOapg.properties.billing_type, str, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contactPerson: typing.Union[MetaOapg.properties.contactPerson, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contactPersonName: typing.Union[MetaOapg.properties.contactPersonName, str, schemas.Unset] = schemas.unset,
        createts: typing.Union['Timestamp', schemas.Unset] = schemas.unset,
        createuserid: typing.Union[MetaOapg.properties.createuserid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, date, schemas.Unset] = schemas.unset,
        groupName: typing.Union[MetaOapg.properties.groupName, str, schemas.Unset] = schemas.unset,
        industry: typing.Union[MetaOapg.properties.industry, str, schemas.Unset] = schemas.unset,
        lastupdateuserid: typing.Union[MetaOapg.properties.lastupdateuserid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        locationid: typing.Union[MetaOapg.properties.locationid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pgroupid: typing.Union[MetaOapg.properties.pgroupid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pmMail: typing.Union[MetaOapg.properties.pmMail, str, schemas.Unset] = schemas.unset,
        probability: typing.Union[MetaOapg.properties.probability, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        projProbability: typing.Union[MetaOapg.properties.projProbability, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        projStatus: typing.Union[MetaOapg.properties.projStatus, str, schemas.Unset] = schemas.unset,
        projectDesc: typing.Union[MetaOapg.properties.projectDesc, str, schemas.Unset] = schemas.unset,
        projectGroupModel: typing.Union['ProjectGroupModel', schemas.Unset] = schemas.unset,
        projectId: typing.Union[MetaOapg.properties.projectId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        projectName: typing.Union[MetaOapg.properties.projectName, str, schemas.Unset] = schemas.unset,
        puid: typing.Union[MetaOapg.properties.puid, str, schemas.Unset] = schemas.unset,
        reportMethod: typing.Union[MetaOapg.properties.reportMethod, str, schemas.Unset] = schemas.unset,
        shortCode: typing.Union[MetaOapg.properties.shortCode, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, date, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        statusValue: typing.Union[MetaOapg.properties.statusValue, str, schemas.Unset] = schemas.unset,
        userModel: typing.Union['UserViewModel', schemas.Unset] = schemas.unset,
        userModelList: typing.Union[MetaOapg.properties.userModelList, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectModel':
        return super().__new__(
            cls,
            *args,
            Probability=Probability,
            account=account,
            accountModel=accountModel,
            accountName=accountName,
            billing_type=billing_type,
            cid=cid,
            contactPerson=contactPerson,
            contactPersonName=contactPersonName,
            createts=createts,
            createuserid=createuserid,
            endDate=endDate,
            groupName=groupName,
            industry=industry,
            lastupdateuserid=lastupdateuserid,
            locationid=locationid,
            pgroupid=pgroupid,
            pmMail=pmMail,
            probability=probability,
            projProbability=projProbability,
            projStatus=projStatus,
            projectDesc=projectDesc,
            projectGroupModel=projectGroupModel,
            projectId=projectId,
            projectName=projectName,
            puid=puid,
            reportMethod=reportMethod,
            shortCode=shortCode,
            startDate=startDate,
            status=status,
            statusValue=statusValue,
            userModel=userModel,
            userModelList=userModelList,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.account_model import AccountModel
from clay_hr_python_sdk.model.project_group_model import ProjectGroupModel
from clay_hr_python_sdk.model.timestamp import Timestamp
from clay_hr_python_sdk.model.user_model import UserModel
from clay_hr_python_sdk.model.user_view_model import UserViewModel

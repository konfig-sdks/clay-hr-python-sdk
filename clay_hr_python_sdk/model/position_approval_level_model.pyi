# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class PositionApprovalLevelModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            approvalId = schemas.Int32Schema
            cid = schemas.Int32Schema
            createUserId = schemas.Int32Schema
            flowId = schemas.Int32Schema
            levelSequence = schemas.Int32Schema
            relationType = schemas.StrSchema
        
            @staticmethod
            def userGroupModel() -> typing.Type['UserGroupModel']:
                return UserGroupModel
            __annotations__ = {
                "approvalId": approvalId,
                "cid": cid,
                "createUserId": createUserId,
                "flowId": flowId,
                "levelSequence": levelSequence,
                "relationType": relationType,
                "userGroupModel": userGroupModel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalId"]) -> MetaOapg.properties.approvalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowId"]) -> MetaOapg.properties.flowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["levelSequence"]) -> MetaOapg.properties.levelSequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationType"]) -> MetaOapg.properties.relationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroupModel"]) -> 'UserGroupModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["approvalId", "cid", "createUserId", "flowId", "levelSequence", "relationType", "userGroupModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalId"]) -> typing.Union[MetaOapg.properties.approvalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowId"]) -> typing.Union[MetaOapg.properties.flowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["levelSequence"]) -> typing.Union[MetaOapg.properties.levelSequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationType"]) -> typing.Union[MetaOapg.properties.relationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroupModel"]) -> typing.Union['UserGroupModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["approvalId", "cid", "createUserId", "flowId", "levelSequence", "relationType", "userGroupModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        approvalId: typing.Union[MetaOapg.properties.approvalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        flowId: typing.Union[MetaOapg.properties.flowId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        levelSequence: typing.Union[MetaOapg.properties.levelSequence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        relationType: typing.Union[MetaOapg.properties.relationType, str, schemas.Unset] = schemas.unset,
        userGroupModel: typing.Union['UserGroupModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PositionApprovalLevelModel':
        return super().__new__(
            cls,
            *args,
            approvalId=approvalId,
            cid=cid,
            createUserId=createUserId,
            flowId=flowId,
            levelSequence=levelSequence,
            relationType=relationType,
            userGroupModel=userGroupModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.user_group_model import UserGroupModel

# coding: utf-8

"""
    Expense Reports

    API Documentation

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from clay_hr_python_sdk import schemas  # noqa: F401


class WorkflowStepModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def appraisalModel() -> typing.Type['AppraisalModel']:
                return AppraisalModel
            assignee = schemas.StrSchema
        
            @staticmethod
            def assigneeModel() -> typing.Type['UserModel']:
                return UserModel
        
            @staticmethod
            def attachmentModel() -> typing.Type['AttachmentModel']:
                return AttachmentModel
            cid = schemas.Int32Schema
            createUserId = schemas.Int32Schema
            dependentStepId = schemas.Int32Schema
        
            @staticmethod
            def dependentStepModel() -> typing.Type['WorkflowStepModel']:
                return WorkflowStepModel
            dueDate = schemas.StrSchema
        
            @staticmethod
            def dynamicFormModel() -> typing.Type['DynaFormSlimModel']:
                return DynaFormSlimModel
            fieldToChange = schemas.StrSchema
        
            @staticmethod
            def fromPositionStatusModel() -> typing.Type['PositionStatusModel']:
                return PositionStatusModel
        
            @staticmethod
            def mailTemplateModel() -> typing.Type['MailTemplateModel']:
                return MailTemplateModel
            phaseId = schemas.Int64Schema
            relativeTo = schemas.StrSchema
            reqApproval = schemas.BoolSchema
            sequence = schemas.Int32Schema
            stepDesc = schemas.StrSchema
            stepId = schemas.Int64Schema
            stepName = schemas.StrSchema
            stepType = schemas.StrSchema
        
            @staticmethod
            def toPositionStatusModel() -> typing.Type['PositionStatusModel']:
                return PositionStatusModel
        
            @staticmethod
            def trainingModel() -> typing.Type['TrainingModel']:
                return TrainingModel
            transitionName = schemas.StrSchema
        
            @staticmethod
            def userGroupModel() -> typing.Type['UserGroupModel']:
                return UserGroupModel
        
            @staticmethod
            def workflowParameterModel() -> typing.Type['WorkflowParameterModel']:
                return WorkflowParameterModel
            __annotations__ = {
                "appraisalModel": appraisalModel,
                "assignee": assignee,
                "assigneeModel": assigneeModel,
                "attachmentModel": attachmentModel,
                "cid": cid,
                "createUserId": createUserId,
                "dependentStepId": dependentStepId,
                "dependentStepModel": dependentStepModel,
                "dueDate": dueDate,
                "dynamicFormModel": dynamicFormModel,
                "fieldToChange": fieldToChange,
                "fromPositionStatusModel": fromPositionStatusModel,
                "mailTemplateModel": mailTemplateModel,
                "phaseId": phaseId,
                "relativeTo": relativeTo,
                "reqApproval": reqApproval,
                "sequence": sequence,
                "stepDesc": stepDesc,
                "stepId": stepId,
                "stepName": stepName,
                "stepType": stepType,
                "toPositionStatusModel": toPositionStatusModel,
                "trainingModel": trainingModel,
                "transitionName": transitionName,
                "userGroupModel": userGroupModel,
                "workflowParameterModel": workflowParameterModel,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appraisalModel"]) -> 'AppraisalModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignee"]) -> MetaOapg.properties.assignee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigneeModel"]) -> 'UserModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachmentModel"]) -> 'AttachmentModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cid"]) -> MetaOapg.properties.cid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createUserId"]) -> MetaOapg.properties.createUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependentStepId"]) -> MetaOapg.properties.dependentStepId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependentStepModel"]) -> 'WorkflowStepModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dynamicFormModel"]) -> 'DynaFormSlimModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldToChange"]) -> MetaOapg.properties.fieldToChange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromPositionStatusModel"]) -> 'PositionStatusModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mailTemplateModel"]) -> 'MailTemplateModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phaseId"]) -> MetaOapg.properties.phaseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relativeTo"]) -> MetaOapg.properties.relativeTo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reqApproval"]) -> MetaOapg.properties.reqApproval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sequence"]) -> MetaOapg.properties.sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stepDesc"]) -> MetaOapg.properties.stepDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stepId"]) -> MetaOapg.properties.stepId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stepName"]) -> MetaOapg.properties.stepName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stepType"]) -> MetaOapg.properties.stepType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toPositionStatusModel"]) -> 'PositionStatusModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainingModel"]) -> 'TrainingModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitionName"]) -> MetaOapg.properties.transitionName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userGroupModel"]) -> 'UserGroupModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowParameterModel"]) -> 'WorkflowParameterModel': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["appraisalModel", "assignee", "assigneeModel", "attachmentModel", "cid", "createUserId", "dependentStepId", "dependentStepModel", "dueDate", "dynamicFormModel", "fieldToChange", "fromPositionStatusModel", "mailTemplateModel", "phaseId", "relativeTo", "reqApproval", "sequence", "stepDesc", "stepId", "stepName", "stepType", "toPositionStatusModel", "trainingModel", "transitionName", "userGroupModel", "workflowParameterModel", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appraisalModel"]) -> typing.Union['AppraisalModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignee"]) -> typing.Union[MetaOapg.properties.assignee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigneeModel"]) -> typing.Union['UserModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachmentModel"]) -> typing.Union['AttachmentModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cid"]) -> typing.Union[MetaOapg.properties.cid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createUserId"]) -> typing.Union[MetaOapg.properties.createUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependentStepId"]) -> typing.Union[MetaOapg.properties.dependentStepId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependentStepModel"]) -> typing.Union['WorkflowStepModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dynamicFormModel"]) -> typing.Union['DynaFormSlimModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldToChange"]) -> typing.Union[MetaOapg.properties.fieldToChange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromPositionStatusModel"]) -> typing.Union['PositionStatusModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mailTemplateModel"]) -> typing.Union['MailTemplateModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phaseId"]) -> typing.Union[MetaOapg.properties.phaseId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relativeTo"]) -> typing.Union[MetaOapg.properties.relativeTo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reqApproval"]) -> typing.Union[MetaOapg.properties.reqApproval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sequence"]) -> typing.Union[MetaOapg.properties.sequence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stepDesc"]) -> typing.Union[MetaOapg.properties.stepDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stepId"]) -> typing.Union[MetaOapg.properties.stepId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stepName"]) -> typing.Union[MetaOapg.properties.stepName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stepType"]) -> typing.Union[MetaOapg.properties.stepType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toPositionStatusModel"]) -> typing.Union['PositionStatusModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainingModel"]) -> typing.Union['TrainingModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitionName"]) -> typing.Union[MetaOapg.properties.transitionName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userGroupModel"]) -> typing.Union['UserGroupModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowParameterModel"]) -> typing.Union['WorkflowParameterModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["appraisalModel", "assignee", "assigneeModel", "attachmentModel", "cid", "createUserId", "dependentStepId", "dependentStepModel", "dueDate", "dynamicFormModel", "fieldToChange", "fromPositionStatusModel", "mailTemplateModel", "phaseId", "relativeTo", "reqApproval", "sequence", "stepDesc", "stepId", "stepName", "stepType", "toPositionStatusModel", "trainingModel", "transitionName", "userGroupModel", "workflowParameterModel", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        appraisalModel: typing.Union['AppraisalModel', schemas.Unset] = schemas.unset,
        assignee: typing.Union[MetaOapg.properties.assignee, str, schemas.Unset] = schemas.unset,
        assigneeModel: typing.Union['UserModel', schemas.Unset] = schemas.unset,
        attachmentModel: typing.Union['AttachmentModel', schemas.Unset] = schemas.unset,
        cid: typing.Union[MetaOapg.properties.cid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createUserId: typing.Union[MetaOapg.properties.createUserId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dependentStepId: typing.Union[MetaOapg.properties.dependentStepId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dependentStepModel: typing.Union['WorkflowStepModel', schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, str, schemas.Unset] = schemas.unset,
        dynamicFormModel: typing.Union['DynaFormSlimModel', schemas.Unset] = schemas.unset,
        fieldToChange: typing.Union[MetaOapg.properties.fieldToChange, str, schemas.Unset] = schemas.unset,
        fromPositionStatusModel: typing.Union['PositionStatusModel', schemas.Unset] = schemas.unset,
        mailTemplateModel: typing.Union['MailTemplateModel', schemas.Unset] = schemas.unset,
        phaseId: typing.Union[MetaOapg.properties.phaseId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        relativeTo: typing.Union[MetaOapg.properties.relativeTo, str, schemas.Unset] = schemas.unset,
        reqApproval: typing.Union[MetaOapg.properties.reqApproval, bool, schemas.Unset] = schemas.unset,
        sequence: typing.Union[MetaOapg.properties.sequence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stepDesc: typing.Union[MetaOapg.properties.stepDesc, str, schemas.Unset] = schemas.unset,
        stepId: typing.Union[MetaOapg.properties.stepId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stepName: typing.Union[MetaOapg.properties.stepName, str, schemas.Unset] = schemas.unset,
        stepType: typing.Union[MetaOapg.properties.stepType, str, schemas.Unset] = schemas.unset,
        toPositionStatusModel: typing.Union['PositionStatusModel', schemas.Unset] = schemas.unset,
        trainingModel: typing.Union['TrainingModel', schemas.Unset] = schemas.unset,
        transitionName: typing.Union[MetaOapg.properties.transitionName, str, schemas.Unset] = schemas.unset,
        userGroupModel: typing.Union['UserGroupModel', schemas.Unset] = schemas.unset,
        workflowParameterModel: typing.Union['WorkflowParameterModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkflowStepModel':
        return super().__new__(
            cls,
            *args,
            appraisalModel=appraisalModel,
            assignee=assignee,
            assigneeModel=assigneeModel,
            attachmentModel=attachmentModel,
            cid=cid,
            createUserId=createUserId,
            dependentStepId=dependentStepId,
            dependentStepModel=dependentStepModel,
            dueDate=dueDate,
            dynamicFormModel=dynamicFormModel,
            fieldToChange=fieldToChange,
            fromPositionStatusModel=fromPositionStatusModel,
            mailTemplateModel=mailTemplateModel,
            phaseId=phaseId,
            relativeTo=relativeTo,
            reqApproval=reqApproval,
            sequence=sequence,
            stepDesc=stepDesc,
            stepId=stepId,
            stepName=stepName,
            stepType=stepType,
            toPositionStatusModel=toPositionStatusModel,
            trainingModel=trainingModel,
            transitionName=transitionName,
            userGroupModel=userGroupModel,
            workflowParameterModel=workflowParameterModel,
            _configuration=_configuration,
            **kwargs,
        )

from clay_hr_python_sdk.model.appraisal_model import AppraisalModel
from clay_hr_python_sdk.model.attachment_model import AttachmentModel
from clay_hr_python_sdk.model.dyna_form_slim_model import DynaFormSlimModel
from clay_hr_python_sdk.model.mail_template_model import MailTemplateModel
from clay_hr_python_sdk.model.position_status_model import PositionStatusModel
from clay_hr_python_sdk.model.training_model import TrainingModel
from clay_hr_python_sdk.model.user_group_model import UserGroupModel
from clay_hr_python_sdk.model.user_model import UserModel
from clay_hr_python_sdk.model.workflow_parameter_model import WorkflowParameterModel
from clay_hr_python_sdk.model.workflow_step_model import WorkflowStepModel
